diff --git a/PRESUBMIT.py b/PRESUBMIT.py
index 09249a70fa645..3110a7b2e4ac5 100644
--- a/PRESUBMIT.py
+++ b/PRESUBMIT.py
@@ -873,6 +873,7 @@ _BANNED_CPP_FUNCTIONS: Sequence[BanRule] = (
             # migrated to the //base equivalent.
             r'ash/ambient/model/ambient_topic_queue\.cc',
             r'base/allocator/partition_allocator/src/partition_alloc/partition_alloc_unittest\.cc',
+            r'base/ranges/algorithm_unittest\.cc',
             r'base/test/launcher/test_launcher\.cc',
             r'cc/metrics/video_playback_roughness_reporter_unittest\.cc',
             r'chrome/browser/apps/app_service/metrics/website_metrics\.cc',
@@ -916,7 +917,8 @@ _BANNED_CPP_FUNCTIONS: Sequence[BanRule] = (
     ),
     BanRule(
         r'/\babsl::c_',
-        ('Abseil container utilities are banned. Use std::ranges:: instead.',
+        ('Abseil container utilities are banned. Use base/ranges/algorithm.h ',
+         'instead.',
         ),
         True,
         [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.
diff --git a/base/BUILD.gn b/base/BUILD.gn
index 3934ff75fa9f0..c09afe031ba5c 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -562,6 +562,10 @@ component("base") {
     "profiler/unwinder.h",
     "rand_util.cc",
     "rand_util.h",
+    "ranges/algorithm.h",
+    "ranges/from_range.h",
+    "ranges/functional.h",
+    "ranges/ranges.h",
     "run_loop.cc",
     "run_loop.h",
     "sampling_heap_profiler/lock_free_address_hash_set.cc",
@@ -882,7 +886,6 @@ component("base") {
     "traits_bag.h",
     "tuple.h",
     "types/always_false.h",
-    "types/cxx23_from_range.h",
     "types/cxx23_is_scoped_enum.h",
     "types/cxx23_to_underlying.h",
     "types/expected.h",
@@ -3383,6 +3386,7 @@ test("base_unittests") {
     "profiler/stack_sampling_profiler_unittest.cc",
     "profiler/thread_group_profiler_unittest.cc",
     "rand_util_unittest.cc",
+    "ranges/functional_unittest.cc",
     "run_loop_unittest.cc",
     "safe_numerics_unittest.cc",
     "sampling_heap_profiler/lock_free_address_hash_set_unittest.cc",
diff --git a/base/containers/circular_deque.h b/base/containers/circular_deque.h
index 7e8ff24b9ee83..db427316ff85c 100644
--- a/base/containers/circular_deque.h
+++ b/base/containers/circular_deque.h
@@ -17,7 +17,7 @@
 #include "base/memory/raw_ptr_exclusion.h"
 #include "base/numerics/checked_math.h"
 #include "base/numerics/safe_conversions.h"
-#include "base/types/cxx23_from_range.h"
+#include "base/ranges/from_range.h"
 
 #if DCHECK_IS_ON()
 #include <ostream>
diff --git a/base/containers/intrusive_heap.h b/base/containers/intrusive_heap.h
index 70ecf19d916ac..3eef33b334fbe 100644
--- a/base/containers/intrusive_heap.h
+++ b/base/containers/intrusive_heap.h
@@ -144,7 +144,7 @@
 #include "base/check_op.h"
 #include "base/compiler_specific.h"
 #include "base/memory/ptr_util.h"
-#include "base/types/cxx23_from_range.h"
+#include "base/ranges/from_range.h"
 #include "third_party/abseil-cpp/absl/container/inlined_vector.h"
 
 namespace base {
diff --git a/base/ranges/OWNERS b/base/ranges/OWNERS
new file mode 100644
index 0000000000000..bf426d601e02e
--- /dev/null
+++ b/base/ranges/OWNERS
@@ -0,0 +1 @@
+pkasting@chromium.org
diff --git a/base/ranges/README.md b/base/ranges/README.md
new file mode 100644
index 0000000000000..c9a72c4dd678c
--- /dev/null
+++ b/base/ranges/README.md
@@ -0,0 +1,144 @@
+# `base::ranges`
+
+This directory aims to implement a C++14 version of the new `std::ranges`
+algorithms that were introduced in C++20. These implementations are added to the
+`::base::ranges` namespace, and callers can access them by including
+[`base/ranges/algorithm.h`](https://source.chromium.org/chromium/chromium/src/+/main:base/ranges/algorithm.h).
+
+## Similarities with C++20:
+
+### Automatically deducing `begin()` and `end()`
+As probably one of the most important changes for readability and usability, all
+algorithms in `base::ranges` have overloads for ranges of elements, which allow
+callers to no longer specify `begin()` and `end()` iterators themselves.
+
+Before:
+```c++
+bool HasEvens(const std::vector<int>& vec) {
+  return std::any_of(vec.begin(), vec.end(), [](int i) { return i % 2 == 0; });
+}
+```
+
+After:
+```c++
+bool HasEvens(const std::vector<int>& vec) {
+  return base::ranges::any_of(vec, [](int i) { return i % 2 == 0; });
+}
+```
+
+Furthermore, these overloads also support binding to temporaries, so that
+applying algorithms to return values is easier:
+
+```c++
+std::vector<int> GetNums();
+```
+
+Before:
+
+```c++
+bool HasEvens() {
+  std::vector<int> nums = GetNums();
+  return std::any_of(nums.begin(), nums.end(),
+                     [](int i) { return i % 2 == 0; });
+}
+```
+
+After:
+```c++
+bool HasEvens() {
+  return base::ranges::any_of(GetNums(), [](int i) { return i % 2 == 0; });
+}
+```
+
+### Support for Projections
+In addition to supporting automatically deducing the `begin()` and `end()`
+iterator for ranges, the `base::ranges::` algorithms also support projections,
+that can be applied to arguments prior to passing it to supplied transformations
+or predicates. This is especially useful when ordering a collection of classes
+by a specific data member of the class. Example:
+
+Before:
+```cpp
+std::sort(suggestions->begin(), suggestions->end(),
+          [](const autofill::Suggestion& a, const autofill::Suggestion& b) {
+            return a.match < b.match;
+          });
+```
+
+After:
+```cpp
+base::ranges::sort(*suggestions, /*comp=*/{}, &autofill::Suggestion::match);
+```
+
+Anything that is callable can be used as a projection. This includes
+`FunctionObjects` like function pointers or functors, but also pointers to
+member function and pointers to data members, as shown above. When not specified
+a projection defaults to `base::ranges::identity`, which simply perfectly
+forwards its argument.
+
+Projections are supported in both range and iterator-pair overloads of the
+`base::ranges::` algorithms, for example `base::ranges::all_of` has the
+following signatures:
+
+```cpp
+template <typename InputIterator, typename Pred, typename Proj = identity>
+bool all_of(InputIterator first, InputIterator last, Pred pred, Proj proj = {});
+
+template <typename Range, typename Pred, typename Proj = identity>
+bool all_of(Range&& range, Pred pred, Proj proj = {});
+```
+
+## Differences from C++20:
+To simplify the implementation of the `base::ranges::` algorithms, they dispatch
+to the `std::` algorithms found in C++14. This leads to the following list of
+differences from C++20. Since most of these differences are differences in the
+library and not in the language, they could be addressed in the future by adding
+corresponding implementations.
+
+### Lack of Constraints
+Due to the lack of support for concepts in the language, the algorithms in
+`base::ranges` do not have the constraints that are present on the algorithms in
+`std::ranges`. Instead, they support any type, much like C++14's `std::`
+algorithms. In the future this might be addressed by adding corresponding
+constraints via SFINAE, should the need arise.
+
+### Lack of Range Primitives
+Due to C++14's lack of `std::ranges` concepts like sentinels and other range
+primitives, algorithms taking a `[first, last)` pair rather than a complete
+range, do not support different types for `first` and `last`. Since they rely on
+C++14's implementation, the type must be the same. This could be addressed in
+the future by implementing support for sentinel types ourselves.
+
+### Lack of `constexpr`
+The `base::ranges` algorithms can only be used in a `constexpr` context when
+they call underlying `std::` algorithms that are themselves `constexpr`.  Before
+C++20, only `std::min`, `std::max` and `std::minmax` are annotated
+appropriately, so code like `constexpr bool foo = base::ranges::any_of(...);`
+will fail because the compiler will not find a `constexpr std::any_of`.  This
+could be addressed by either upgrading Chromium's STL to C++20, or implementing
+`constexpr` versions of some of these algorithms ourselves.
+
+### Lack of post C++14 algorithms
+Since most algorithms in `base::ranges` dispatch to their C++14 equivalent, some
+`std::` algorithms that are not present in C++14 have no implementation in
+`base::ranges`. This list of algorithms includes the following:
+
+- [`std::sample`](https://en.cppreference.com/w/cpp/algorithm/sample) (added in C++17)
+
+### Return Types
+Some of the algorithms in `std::ranges::` have different return types than their
+equivalent in `std::`. For example, while `std::for_each` returns the passed-in
+`Function`, `std::ranges::for_each` returns a `std::ranges::for_each_result`,
+consisting of the `last` iterator and the function.
+
+In the cases where the return type differs, `base::ranges::` algorithms will
+continue to return the old return type.
+
+### No blocking of ADL
+The algorithms defined in `std::ranges` are not found by ADL, and inhibit ADL
+when found by [unqualified name lookup][1]. This is done to be able to enforce
+the constraints specified by those algorithms and commonly implemented by using
+function objects instead of regular functions. Since we don't support
+constrained algorithms yet, we don't implement the blocking of ADL either.
+
+[1]: https://wg21.link/algorithms.requirements#2
diff --git a/base/ranges/algorithm.h b/base/ranges/algorithm.h
new file mode 100644
index 0000000000000..86d2ab45a0bdd
--- /dev/null
+++ b/base/ranges/algorithm.h
@@ -0,0 +1,101 @@
+// Copyright 2020 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_RANGES_ALGORITHM_H_
+#define BASE_RANGES_ALGORITHM_H_
+
+#include <algorithm>
+
+// TODO(crbug.com/40240443): Remove this and use std::ranges:: directly.
+
+namespace base::ranges {
+
+using std::ranges::adjacent_find;
+using std::ranges::all_of;
+using std::ranges::any_of;
+using std::ranges::binary_search;
+using std::ranges::clamp;
+using std::ranges::copy;
+using std::ranges::copy_backward;
+using std::ranges::copy_if;
+using std::ranges::copy_n;
+using std::ranges::count;
+using std::ranges::count_if;
+using std::ranges::equal;
+using std::ranges::equal_range;
+using std::ranges::fill;
+using std::ranges::fill_n;
+using std::ranges::find;
+using std::ranges::find_end;
+using std::ranges::find_first_of;
+using std::ranges::find_if;
+using std::ranges::find_if_not;
+using std::ranges::for_each;
+using std::ranges::for_each_n;
+using std::ranges::generate;
+using std::ranges::generate_n;
+using std::ranges::includes;
+using std::ranges::inplace_merge;
+using std::ranges::is_heap;
+using std::ranges::is_heap_until;
+using std::ranges::is_partitioned;
+using std::ranges::is_permutation;
+using std::ranges::is_sorted;
+using std::ranges::is_sorted_until;
+using std::ranges::lexicographical_compare;
+using std::ranges::lower_bound;
+using std::ranges::make_heap;
+using std::ranges::max;
+using std::ranges::max_element;
+using std::ranges::merge;
+using std::ranges::min;
+using std::ranges::min_element;
+using std::ranges::minmax;
+using std::ranges::minmax_element;
+using std::ranges::mismatch;
+using std::ranges::move;
+using std::ranges::move_backward;
+using std::ranges::next_permutation;
+using std::ranges::none_of;
+using std::ranges::nth_element;
+using std::ranges::partial_sort;
+using std::ranges::partial_sort_copy;
+using std::ranges::partition;
+using std::ranges::partition_copy;
+using std::ranges::partition_point;
+using std::ranges::pop_heap;
+using std::ranges::prev_permutation;
+using std::ranges::push_heap;
+using std::ranges::remove;
+using std::ranges::remove_copy;
+using std::ranges::remove_copy_if;
+using std::ranges::remove_if;
+using std::ranges::replace;
+using std::ranges::replace_copy;
+using std::ranges::replace_copy_if;
+using std::ranges::replace_if;
+using std::ranges::reverse;
+using std::ranges::reverse_copy;
+using std::ranges::rotate;
+using std::ranges::rotate_copy;
+using std::ranges::search;
+using std::ranges::search_n;
+using std::ranges::set_difference;
+using std::ranges::set_intersection;
+using std::ranges::set_symmetric_difference;
+using std::ranges::set_union;
+using std::ranges::shuffle;
+using std::ranges::sort;
+using std::ranges::sort_heap;
+using std::ranges::stable_partition;
+using std::ranges::stable_sort;
+using std::ranges::swap_ranges;
+using std::ranges::transform;
+using std::ranges::unique;
+using std::ranges::unique_copy;
+using std::ranges::upper_bound;
+
+}  // namespace base::ranges
+
+#endif  // BASE_RANGES_ALGORITHM_H_
diff --git a/base/types/cxx23_from_range.h b/base/ranges/from_range.h
similarity index 83%
rename from base/types/cxx23_from_range.h
rename to base/ranges/from_range.h
index b7a0a9dc0d1d2..a0fca0a34089e 100644
--- a/base/types/cxx23_from_range.h
+++ b/base/ranges/from_range.h
@@ -2,8 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef BASE_TYPES_CXX23_FROM_RANGE_H_
-#define BASE_TYPES_CXX23_FROM_RANGE_H_
+#ifndef BASE_RANGES_FROM_RANGE_H_
+#define BASE_RANGES_FROM_RANGE_H_
 
 namespace base {
 
@@ -22,4 +22,4 @@ constexpr inline from_range_t from_range;
 
 }  // namespace base
 
-#endif  // BASE_TYPES_CXX23_FROM_RANGE_H_
+#endif  // BASE_RANGES_FROM_RANGE_H_
diff --git a/base/ranges/functional.h b/base/ranges/functional.h
new file mode 100644
index 0000000000000..29ac1237b50c3
--- /dev/null
+++ b/base/ranges/functional.h
@@ -0,0 +1,21 @@
+// Copyright 2020 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_RANGES_FUNCTIONAL_H_
+#define BASE_RANGES_FUNCTIONAL_H_
+
+#include <functional>
+
+namespace base::ranges {
+
+using equal_to = std::equal_to<>;
+using not_equal_to = std::not_equal_to<>;
+using greater = std::greater<>;
+using less = std::less<>;
+using greater_equal = std::greater_equal<>;
+using less_equal = std::less_equal<>;
+
+}  // namespace base::ranges
+
+#endif  // BASE_RANGES_FUNCTIONAL_H_
diff --git a/base/ranges/functional_unittest.cc b/base/ranges/functional_unittest.cc
new file mode 100644
index 0000000000000..2ee7718990354
--- /dev/null
+++ b/base/ranges/functional_unittest.cc
@@ -0,0 +1,25 @@
+// Copyright 2020 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/ranges/functional.h"
+
+#include "testing/gtest/include/gtest/gtest.h"
+
+namespace base {
+
+TEST(RangesTest, EqualTo) {
+  ranges::equal_to eq;
+  EXPECT_TRUE(eq(0, 0));
+  EXPECT_FALSE(eq(0, 1));
+  EXPECT_FALSE(eq(1, 0));
+}
+
+TEST(RangesTest, Less) {
+  ranges::less lt;
+  EXPECT_FALSE(lt(0, 0));
+  EXPECT_TRUE(lt(0, 1));
+  EXPECT_FALSE(lt(1, 0));
+}
+
+}  // namespace base
diff --git a/base/ranges/ranges.h b/base/ranges/ranges.h
new file mode 100644
index 0000000000000..dfe754837aed0
--- /dev/null
+++ b/base/ranges/ranges.h
@@ -0,0 +1,19 @@
+// Copyright 2020 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_RANGES_RANGES_H_
+#define BASE_RANGES_RANGES_H_
+
+#include <ranges>
+
+namespace base::ranges {
+
+template <typename Range>
+using iterator_t = std::ranges::iterator_t<Range>;
+template <typename Range>
+using range_value_t = std::ranges::range_value_t<Range>;
+
+}  // namespace base::ranges
+
+#endif  // BASE_RANGES_RANGES_H_
diff --git a/chrome/browser/ash/kerberos/kerberos_credentials_manager.cc b/chrome/browser/ash/kerberos/kerberos_credentials_manager.cc
index 8cd3c6ea8513f..fcaa188bb8429 100644
--- a/chrome/browser/ash/kerberos/kerberos_credentials_manager.cc
+++ b/chrome/browser/ash/kerberos/kerberos_credentials_manager.cc
@@ -4,13 +4,13 @@
 
 #include "chrome/browser/ash/kerberos/kerberos_credentials_manager.h"
 
-#include <algorithm>
 #include <vector>
 
 #include "ash/webui/settings/public/constants/routes.mojom.h"
 #include "base/containers/flat_map.h"
 #include "base/functional/bind.h"
 #include "base/memory/raw_ptr.h"
+#include "base/ranges/algorithm.h"
 #include "base/strings/escape.h"
 #include "base/strings/string_split.h"
 #include "base/strings/string_util.h"
diff --git a/content/browser/renderer_host/frame_tree.cc b/content/browser/renderer_host/frame_tree.cc
index 0a88a165f0a8c..ecfd033962a28 100644
--- a/content/browser/renderer_host/frame_tree.cc
+++ b/content/browser/renderer_host/frame_tree.cc
@@ -20,9 +20,9 @@
 #include "base/memory/raw_ptr.h"
 #include "base/memory/safe_ref.h"
 #include "base/metrics/histogram_functions.h"
+#include "base/ranges/from_range.h"
 #include "base/trace_event/optional_trace_event.h"
 #include "base/trace_event/typed_macros.h"
-#include "base/types/cxx23_from_range.h"
 #include "base/unguessable_token.h"
 #include "content/browser/renderer_host/batched_proxy_ipc_sender.h"
 #include "content/browser/renderer_host/navigation_controller_impl.h"
diff --git a/styleguide/c++/c++-features.md b/styleguide/c++/c++-features.md
index 81fa4680f7201..bbf0f1780b48c 100644
--- a/styleguide/c++/c++-features.md
+++ b/styleguide/c++/c++-features.md
@@ -1113,6 +1113,8 @@ iterator-sentinel pair or a single range argument.
 
 **Notes:**
 *** promo
+Supersedes `//base`'s backports in `//base/ranges/algorithm.h`.
+
 [Discussion thread](https://groups.google.com/a/chromium.org/g/cxx/c/ZnIbkfJ0Glw)
 ***
 
@@ -1920,7 +1922,7 @@ standard library.
 
 **Notes:**
 *** promo
-Superseded by algorithms in `std::ranges::`.
+Overlaps with `base/ranges/algorithm.h`.
 ***
 
 ### FixedArray <sup>[banned]</sup>
diff --git a/third_party/googletest/custom/gtest/internal/custom/stack_trace_getter.cc b/third_party/googletest/custom/gtest/internal/custom/stack_trace_getter.cc
index 289739be981c2..58f6f81ab66d5 100644
--- a/third_party/googletest/custom/gtest/internal/custom/stack_trace_getter.cc
+++ b/third_party/googletest/custom/gtest/internal/custom/stack_trace_getter.cc
@@ -9,6 +9,7 @@
 
 #include "base/containers/adapters.h"
 #include "base/containers/span.h"
+#include "base/ranges/algorithm.h"
 
 std::string StackTraceGetter::CurrentStackTrace(int max_depth, int skip_count) {
   base::debug::StackTrace stack_trace;
