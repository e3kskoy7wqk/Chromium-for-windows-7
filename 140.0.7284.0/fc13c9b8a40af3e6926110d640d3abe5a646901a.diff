diff --git a/chrome/app/profiles_strings.grdp b/chrome/app/profiles_strings.grdp
index 73cd97a445550..f9776dace4b9f 100644
--- a/chrome/app/profiles_strings.grdp
+++ b/chrome/app/profiles_strings.grdp
@@ -170,12 +170,6 @@
     <message name="IDS_PROFILE_MENU_AUTOFILL_SETTINGS_BUTTON" desc="Button in the avatar menu bubble view for opening Chrome autofill settings.">
       Passwords and autofill
     </message>
-    <message name="IDS_PROFILE_MENU_BATCH_UPLOAD_BUTTON" desc="Button in the profile menu to open the Batch Upload dialog.">
-      {0, plural,
-      =1 {Save 1 item in account}
-      other {Save # items in account}
-      }
-    </message>
   </if>
   <if expr="use_titlecase">
     <message name="IDS_PROFILES_PROFILE_MANAGE_ACCOUNTS_BUTTON" desc="Button in the avatar menu bubble view used to manage accounts for a profile.">
@@ -205,12 +199,6 @@
     <message name="IDS_PROFILE_MENU_AUTOFILL_SETTINGS_BUTTON" desc="Button in the avatar menu bubble view for opening Chrome autofill settings.">
       Passwords and Autofill
     </message>
-    <message name="IDS_PROFILE_MENU_BATCH_UPLOAD_BUTTON" desc="Button in the profile menu to open the Batch Upload dialog.">
-      {0, plural,
-      =1 {Save 1 Item in Account}
-      other {Save # Items in Account}
-      }
-    </message>
   </if>
   <message name="IDS_PROFILES_MANAGED_BY" desc="Label shown under the avatar in the avatar menu bubble view stating that the account is managed.">
     Managed by <ph name="VALUE">$1<ex>1</ex></ph>
diff --git a/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_BATCH_UPLOAD_BUTTON.png.sha1 b/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_BATCH_UPLOAD_BUTTON.png.sha1
deleted file mode 100644
index dbf15220aaf3d..0000000000000
--- a/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_BATCH_UPLOAD_BUTTON.png.sha1
+++ /dev/null
@@ -1 +0,0 @@
-7d72c4fd4776c5d55437c4edd2f42025f5c86d5d
\ No newline at end of file
diff --git a/chrome/browser/ui/color/chrome_color_id.h b/chrome/browser/ui/color/chrome_color_id.h
index d8d49065acfbf..8228fdfa4615b 100644
--- a/chrome/browser/ui/color/chrome_color_id.h
+++ b/chrome/browser/ui/color/chrome_color_id.h
@@ -476,7 +476,7 @@
   E_CPONLY(kColorProfileMenuIdentityInfoBackground) \
   E_CPONLY(kColorProfileMenuIdentityInfoTitle) \
   E_CPONLY(kColorProfileMenuIdentityInfoSubtitle) \
-  E_CPONLY(kColorProfileMenuPromoButtonsBackground) \
+  E_CPONLY(kColorProfileMenuSyncPromoButtonBackground) \
   /* Profiles colors. */ \
   E_CPONLY(kColorProfilesReauthDialogBorder) \
   /* PWA colors. */ \
diff --git a/chrome/browser/ui/color/material_chrome_color_mixer.cc b/chrome/browser/ui/color/material_chrome_color_mixer.cc
index 2ed20c5a1ea5d..4ea5794601b36 100644
--- a/chrome/browser/ui/color/material_chrome_color_mixer.cc
+++ b/chrome/browser/ui/color/material_chrome_color_mixer.cc
@@ -130,7 +130,7 @@ void AddMaterialChromeColorMixer(ui::ColorProvider* provider,
   mixer[kColorProfileMenuIdentityInfoBackground] = {ui::kColorSysSurface3};
   mixer[kColorProfileMenuIdentityInfoTitle] = {ui::kColorSysOnSurface};
   mixer[kColorProfileMenuIdentityInfoSubtitle] = {ui::kColorSysOnSurfaceSubtle};
-  mixer[kColorProfileMenuPromoButtonsBackground] = {
+  mixer[kColorProfileMenuSyncPromoButtonBackground] = {
       ui::kColorSysTonalContainer};
 
   // Signin bubble colors. Main background color uses the same color as the
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view.cc b/chrome/browser/ui/views/profiles/profile_menu_view.cc
index 3420da77f0cac..e2d45fe864749 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view.cc
@@ -26,8 +26,6 @@
 #include "chrome/browser/enterprise/util/managed_browser_utils.h"
 #include "chrome/browser/feature_engagement/tracker_factory.h"
 #include "chrome/browser/lifetime/application_lifetime.h"
-#include "chrome/browser/profiles/batch_upload/batch_upload_service.h"
-#include "chrome/browser/profiles/batch_upload/batch_upload_service_factory.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_attributes_entry.h"
 #include "chrome/browser/profiles/profile_avatar_icon_util.h"
@@ -80,7 +78,6 @@
 #include "components/signin/public/identity_manager/account_info.h"
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
 #include "components/strings/grit/components_strings.h"
-#include "components/sync/base/features.h"
 #include "components/sync/service/sync_service.h"
 #include "components/vector_icons/vector_icons.h"
 #include "net/base/url_util.h"
@@ -97,7 +94,6 @@
 #include "ui/gfx/paint_vector_icon.h"
 #include "ui/strings/grit/ui_strings.h"
 #include "ui/views/accessibility/view_accessibility.h"
-#include "ui/views/widget/widget.h"
 
 #if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_LINUX)
 #include "chrome/browser/enterprise/signin/enterprise_signin_prefs.h"
@@ -516,16 +512,6 @@ void ProfileMenuView::OnAutofillSettingsButtonClicked() {
   chrome::ShowSettingsSubPage(&browser(), chrome::kAutofillSubPage);
 }
 
-void ProfileMenuView::OnBuildBatchUploadButtonClicked() {
-  RecordClick(ActionableItem::kBatchUploadButton);
-  if (!perform_menu_actions()) {
-    return;
-  }
-  BatchUploadServiceFactory::GetForProfile(&profile())
-      ->OpenBatchUpload(&browser(),
-                        BatchUploadService::EntryPoint::kProfileMenu);
-}
-
 void ProfileMenuView::SetMenuTitleForAccessibility() {
   const signin::IdentityManager* identity_manager =
       IdentityManagerFactory::GetForProfile(&profile());
@@ -775,52 +761,16 @@ void ProfileMenuView::BuildHistorySyncOptInButton() {
       explicit_signin_access_point_.value_or(
           signin_metrics::AccessPoint::kAvatarBubbleSignIn);
   signin_metrics::LogSyncOptInOffered(access_point);
-  AddPromoButton(
+  AddFeatureButton(
       l10n_util::GetStringUTF16(IDS_PROFILE_MENU_SYNC_PROMO_ROW_BUTTON_LABEL),
       base::BindRepeating(
           &ProfileMenuView::OnSigninButtonClicked, base::Unretained(this),
           IdentityManagerFactory::GetForProfile(&profile())
               ->GetPrimaryAccountInfo(signin::ConsentLevel::kSignin),
           ActionableItem::kHistorySyncOptInButton, access_point),
-      kDevicesChromeRefreshIcon);
-}
-
-void ProfileMenuView::OnBatchUploadDataReceived(
-    std::map<syncer::DataType, syncer::LocalDataDescription> local_data_map) {
-  size_t local_data_count = std::accumulate(
-      local_data_map.begin(), local_data_map.end(), 0u,
-      [](size_t current_count,
-         std::pair<syncer::DataType, syncer::LocalDataDescription> local_data) {
-        return current_count + local_data.second.local_data_models.size();
-      });
-  if (local_data_count == 0) {
-    return;
-  }
-
-  AddPromoButton(
-      l10n_util::GetPluralStringFUTF16(IDS_PROFILE_MENU_BATCH_UPLOAD_BUTTON,
-                                       local_data_count),
-      base::BindRepeating(&ProfileMenuView::OnBuildBatchUploadButtonClicked,
-                          base::Unretained(this)),
-      vector_icons::kSaveCloudIcon);
-
-  // Adding the button being asynchronous, the menu may be already been shown,
-  // update the view size to accommodate for the addition of the button. In
-  // theory this update should not even be visible to the user.
-  if (views::Widget* widget = GetWidget()) {
-    widget->SetSize(widget->non_client_view()->GetPreferredSize());
-  }
-}
-
-void ProfileMenuView::MaybeBuildBatchUploadButton() {
-  if (!base::FeatureList::IsEnabled(
-          syncer::kReplaceSyncPromosWithSignInPromos)) {
-    return;
-  }
-
-  BatchUploadServiceFactory::GetForProfile(&profile())
-      ->GetLocalDataDescriptionsForAvailableTypes(base::BindOnce(
-          &ProfileMenuView::OnBatchUploadDataReceived, base::Unretained(this)));
+      kDevicesChromeRefreshIcon, /*icon_to_image_ratio=*/1.0f,
+      kColorProfileMenuSyncPromoButtonBackground,
+      /*add_vertical_margin=*/true);
 }
 
 void ProfileMenuView::BuildAutofillSettingsButton() {
@@ -998,8 +948,6 @@ void ProfileMenuView::BuildFeatureButtons() {
       IsNewSyncPromoVariantEnabled()) {
     BuildHistorySyncOptInButton();
   }
-  // May add the button asynchronously, order is not be guaranteed.
-  MaybeBuildBatchUploadButton();
   BuildAutofillSettingsButton();
   MaybeBuildManageGoogleAccountButton();
   BuildCustomizeProfileButton();
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view.h b/chrome/browser/ui/views/profiles/profile_menu_view.h
index 4361ad66461f7..e5183611f24a7 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view.h
+++ b/chrome/browser/ui/views/profiles/profile_menu_view.h
@@ -23,7 +23,6 @@
 #include "components/signin/core/browser/signin_header_helper.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/signin/public/base/signin_metrics.h"
-#include "components/sync/service/local_data_description.h"
 #include "ui/views/controls/styled_label.h"
 
 namespace signin_metrics {
@@ -86,7 +85,6 @@ class ProfileMenuView : public ProfileMenuViewBase {
   void OnManageProfilesButtonClicked();
   void OnEditProfileButtonClicked();
   void OnAutofillSettingsButtonClicked();
-  void OnBuildBatchUploadButtonClicked();
 
   // We normally close the bubble any time it becomes inactive but this can lead
   // to flaky tests where unexpected UI events are triggering this behavior.
@@ -97,7 +95,6 @@ class ProfileMenuView : public ProfileMenuViewBase {
   void SetMenuTitleForAccessibility();
   void BuildGuestIdentity();
   void BuildHistorySyncOptInButton();
-  void MaybeBuildBatchUploadButton();
   void BuildAutofillSettingsButton();
   void BuildCustomizeProfileButton();
   void MaybeBuildChromeAccountSettingsButton();
@@ -118,9 +115,6 @@ class ProfileMenuView : public ProfileMenuViewBase {
 
   void BuildProfileManagementFeatureButtons();
 
-  void OnBatchUploadDataReceived(
-      std::map<syncer::DataType, syncer::LocalDataDescription> local_data_map);
-
   const raw_ref<Browser> browser_;
 
   std::u16string menu_title_;
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view_base.cc b/chrome/browser/ui/views/profiles/profile_menu_view_base.cc
index 19aa2437d27db..c666472fb6f04 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view_base.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view_base.cc
@@ -10,7 +10,6 @@
 
 #include "base/feature_list.h"
 #include "base/functional/bind.h"
-#include "base/logging.h"
 #include "base/memory/raw_ptr.h"
 #include "base/memory/raw_ref.h"
 #include "base/metrics/histogram_functions.h"
@@ -462,96 +461,46 @@ void ProfileMenuViewBase::SetProfileIdentityWithCallToAction(
           .Build());
 }
 
-void ProfileMenuViewBase::AddPromoButton(const std::u16string& text,
-                                         base::RepeatingClosure action,
-                                         const gfx::VectorIcon& icon) {
-  // Initialize layout if this is the first time a button is added.
-  if (!promo_container_->GetLayoutManager()) {
-    promo_container_->SetLayoutManager(std::make_unique<views::BoxLayout>(
-        views::BoxLayout::Orientation::kVertical));
-  }
-
-  // Do not allow more than 2 promos to be shown at the same time in the Profile
-  // Menu. Currently there only exist two types of promos - if we ever need to
-  // support more, a more complex logic to decide which promo to be shown is
-  // needed.
-  if (promo_container_->children().size() == 2u) {
-    return;
-  }
-
-  // Only first and last buttons should have the rounded corners.
-  bool is_first_button_being_added = promo_container_->children().empty();
-
-  // Reset the last button bottom corners since it will not be the last one
-  // anymore.
-  if (!is_first_button_being_added) {
-    HoverButton* last_child =
-        views::AsViewClass<HoverButton>(promo_container_->children().back());
-    std::optional<gfx::RoundedCornersF> current_rounded_corners =
-        last_child->background()->GetRoundedCornerRadii();
-    CHECK(current_rounded_corners.has_value());
-    current_rounded_corners->set_lower_left(0.f);
-    current_rounded_corners->set_lower_right(0.f);
-    // Override the background with the updated corners.
-    last_child->SetBackground(views::CreateRoundedRectBackground(
-        kColorProfileMenuPromoButtonsBackground,
-        current_rounded_corners.value(),
-        gfx::Insets::VH(0, kIdentityContainerMargin)));
-  }
-
-  // Add background color for promos.
-  constexpr int kBackgroundCornerSize = 8;
-  constexpr int kButtonBackgroundVerticalSize = 40;
-  constexpr int kPromoSeparation = 2;
-
-  std::unique_ptr<HoverButton> button = CreateMenuRowButton(
-      std::move(action), std::make_unique<FeatureButtonIconView>(icon, 1.0f),
-      text);
-
-  // The current button being added to the end, we can already set the bottom
-  // corners.
-  gfx::RoundedCornersF rounded_corners(0.f, 0.f, kBackgroundCornerSize,
-                                       kBackgroundCornerSize);
-  // First element should have upper corners rounded.
-  if (is_first_button_being_added) {
-    rounded_corners.set_upper_left(kBackgroundCornerSize);
-    rounded_corners.set_upper_right(kBackgroundCornerSize);
-  }
-  button->SetBackground(views::CreateRoundedRectBackground(
-      kColorProfileMenuPromoButtonsBackground, rounded_corners,
-      gfx::Insets::VH(0, kIdentityContainerMargin)));
-  // Button with a background should have a larger size to fit the background.
-  button->SetPreferredSize(
-      gfx::Size(kMenuWidth, kButtonBackgroundVerticalSize));
-
-  // When adding the first element in the promo container, ensure a separation
-  // between the promo container and the next container. Otherwise, add a top
-  // margin to the button to add a separatation with the previous promos.
-  if (is_first_button_being_added) {
-    promo_container_->SetProperty(views::kMarginsKey,
-                                  gfx::Insets().set_bottom(kDefaultMargin));
-  } else {
-    button->SetProperty(views::kMarginsKey,
-                        gfx::Insets().set_top(kPromoSeparation));
-  }
-
-  promo_container_->AddChildView(std::move(button));
-}
-
-void ProfileMenuViewBase::AddFeatureButton(const std::u16string& text,
-                                           base::RepeatingClosure action,
-                                           const gfx::VectorIcon& icon,
-                                           float icon_to_image_ratio) {
+void ProfileMenuViewBase::AddFeatureButton(
+    const std::u16string& text,
+    base::RepeatingClosure action,
+    const gfx::VectorIcon& icon,
+    float icon_to_image_ratio,
+    std::optional<ui::ColorId> background_color,
+    bool add_vertical_margin) {
   // Initialize layout if this is the first time a button is added.
   if (!features_container_->GetLayoutManager()) {
     features_container_->SetLayoutManager(std::make_unique<views::BoxLayout>(
         views::BoxLayout::Orientation::kVertical));
   }
 
-  features_container_->AddChildView(CreateMenuRowButton(
+  std::unique_ptr<HoverButton> button = CreateMenuRowButton(
       std::move(action),
-      std::make_unique<FeatureButtonIconView>(icon, icon_to_image_ratio),
-      text));
+      std::make_unique<FeatureButtonIconView>(icon, icon_to_image_ratio), text);
+  if (background_color.has_value()) {
+    constexpr int background_corner_radius = 8;
+    constexpr int button_background_vertical_size = 40;
+    button->SetBackground(views::CreateRoundedRectBackground(
+        *background_color, gfx::RoundedCornersF(background_corner_radius),
+        gfx::Insets::VH(0, kIdentityContainerMargin)));
+    // Button with a background should have a larger size to fit the background.
+    button->SetPreferredSize(
+        gfx::Size(kMenuWidth, button_background_vertical_size));
+  }
+  if (add_vertical_margin) {
+    auto margin = gfx::Insets().set_bottom(kDefaultMargin);
+    // Set the top margin only if there is a previous button with no background
+    // (to ensure proper spacing between buttons).
+    if (features_container_->children().size() > 0) {
+      auto* previous_button = views::AsViewClass<HoverButton>(
+          features_container_->children().back());
+      if (previous_button && !previous_button->background()) {
+        margin.set_top(kDefaultMargin);
+      }
+    }
+    button->SetProperty(views::kMarginsKey, std::move(margin));
+  }
+  features_container_->AddChildView(std::move(button));
 }
 
 void ProfileMenuViewBase::SetProfileManagementHeading(
@@ -692,7 +641,6 @@ void ProfileMenuViewBase::Reset() {
   // First, add the parts of the current profile.
   identity_info_container_ =
       components->AddChildView(std::make_unique<views::View>());
-  promo_container_ = components->AddChildView(std::make_unique<views::View>());
   features_container_ =
       components->AddChildView(std::make_unique<views::View>());
   profile_mgmt_separator_container_ =
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view_base.h b/chrome/browser/ui/views/profiles/profile_menu_view_base.h
index 6453fad23c8d3..49ecc4effb057 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view_base.h
+++ b/chrome/browser/ui/views/profiles/profile_menu_view_base.h
@@ -79,8 +79,7 @@ class ProfileMenuViewBase : public content::WebContentsDelegate,
     kSigninReauthButton = 21,
     kAutofillSettingsButton = 22,
     kHistorySyncOptInButton = 23,
-    kBatchUploadButton = 24,
-    kMaxValue = kBatchUploadButton,
+    kMaxValue = kHistorySyncOptInButton,
   };
   // LINT.ThenChange(//tools/metrics/histograms/metadata/profile/enums.xml:ProfileMenuActionableItem)
 
@@ -154,22 +153,13 @@ class ProfileMenuViewBase : public content::WebContentsDelegate,
   // See `IdentitySectionParams` for documentation of the parameters.
   void SetProfileIdentityWithCallToAction(IdentitySectionParams params);
 
-  // Promo buttons have the following Ui aspects:
-  // - are shown right after identity section and before other buttons.
-  // - background color.
-  // - first promo button has a top rounded corners.
-  // - last promo button has bottom rounded corners.
-  // - slight separation between promo buttons.
-  // - limit to the first 2 promo shown.
-  void AddPromoButton(const std::u16string& text,
-                      base::RepeatingClosure action,
-                      const gfx::VectorIcon& icon);
-
   void AddFeatureButton(
       const std::u16string& text,
       base::RepeatingClosure action,
       const gfx::VectorIcon& icon = gfx::VectorIcon::EmptyIcon(),
-      float icon_to_image_ratio = 1.0f);
+      float icon_to_image_ratio = 1.0f,
+      std::optional<ui::ColorId> background_color = std::nullopt,
+      bool add_vertical_margin = false);
   void SetProfileManagementHeading(const std::u16string& heading);
   void AddAvailableProfile(const ui::ImageModel& image_model,
                            const std::u16string& name,
@@ -232,7 +222,6 @@ class ProfileMenuViewBase : public content::WebContentsDelegate,
 
   // Component containers.
   raw_ptr<views::View> identity_info_container_ = nullptr;
-  raw_ptr<views::View> promo_container_ = nullptr;
   raw_ptr<views::View> features_container_ = nullptr;
   raw_ptr<views::View> profile_mgmt_separator_container_ = nullptr;
   raw_ptr<views::View> profile_mgmt_heading_container_ = nullptr;
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc b/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc
index fd0d43f55f1eb..fd4c042ca82e7 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc
@@ -30,7 +30,6 @@
 #include "chrome/browser/enterprise/browser_management/management_service_factory.h"
 #include "chrome/browser/enterprise/util/managed_browser_utils.h"
 #include "chrome/browser/extensions/extension_browsertest.h"
-#include "chrome/browser/profiles/batch_upload/batch_upload_service_test_helper.h"
 #include "chrome/browser/profiles/profile_attributes_entry.h"
 #include "chrome/browser/profiles/profile_attributes_storage.h"
 #include "chrome/browser/profiles/profile_manager.h"
@@ -94,7 +93,6 @@
 #include "components/signin/public/identity_manager/primary_account_mutator.h"
 #include "components/supervised_user/core/browser/family_link_user_capabilities.h"
 #include "components/supervised_user/test_support/supervised_user_signin_test_utils.h"
-#include "components/sync/base/features.h"
 #include "components/sync/service/sync_service.h"
 #include "components/sync/service/sync_user_settings.h"
 #include "components/user_education/common/feature_promo/feature_promo_controller.h"
@@ -1369,53 +1367,6 @@ PROFILE_MENU_CLICK_WITH_FEATURE_TEST(kActionableItems_NewSyncPromoVariant,
   RunTest();
 }
 
-// List of actionable items in the correct order as they appear in the menu. If
-// a new button is added to the menu, it should also be added to this list.
-constexpr std::array kActionableItems_WithPromoButtons = {
-    ProfileMenuViewBase::ActionableItem::kHistorySyncOptInButton,
-    ProfileMenuViewBase::ActionableItem::kBatchUploadButton,
-    ProfileMenuViewBase::ActionableItem::kAutofillSettingsButton,
-    ProfileMenuViewBase::ActionableItem::kManageGoogleAccountButton,
-    ProfileMenuViewBase::ActionableItem::kEditProfileButton,
-    ProfileMenuViewBase::ActionableItem::kSyncSettingsButton,
-    ProfileMenuViewBase::ActionableItem::kSignoutButton,
-    ProfileMenuViewBase::ActionableItem::kAddNewProfileButton,
-    ProfileMenuViewBase::ActionableItem::kGuestProfileButton,
-    ProfileMenuViewBase::ActionableItem::kManageProfilesButton,
-    // The first button is added again to finish the cycle and test that
-    // there are no other buttons at the end.
-    ProfileMenuViewBase::ActionableItem::kHistorySyncOptInButton};
-
-const std::vector<base::test::FeatureRefAndParams>
-    kProfileMenuPromosButtonsFeatureFlags = {
-        {syncer::kReplaceSyncPromosWithSignInPromos, {}},
-        {switches::kEnableHistorySyncOptinExpansionPill,
-         {{"history-sync-optin-expansion-pill-option",
-           "browse-across-devices-new-profile-menu-promo-variant"}}}};
-
-PROFILE_MENU_CLICK_WITH_FEATURE_TEST(kActionableItems_WithPromoButtons,
-                                     ProfileMenuClickTest_WithPromoButtons,
-                                     kProfileMenuPromosButtonsFeatureFlags,
-                                     /*disabled_features=*/{}) {
-  secondary_account_helper::SignInUnconsentedAccount(
-      GetProfile(), &test_url_loader_factory_, "user@example.com");
-  UnconsentedPrimaryAccountChecker(identity_manager()).Wait();
-  // Check that the setup was successful.
-  ASSERT_FALSE(
-      identity_manager()->HasPrimaryAccount(signin::ConsentLevel::kSync));
-  ASSERT_TRUE(
-      identity_manager()->HasPrimaryAccount(signin::ConsentLevel::kSignin));
-
-  BatchUploadServiceTestHelper batch_upload_test_helper;
-  // Exceptionally allow this override during the test in order not to affect
-  // all existing tests.
-  batch_upload_test_helper.SetupBatchUploadTestingFactoryInProfile(
-      GetProfile());
-  batch_upload_test_helper.SetLocalDataDescriptionForAllAvailableTypes();
-
-  RunTest();
-}
-
 // List of actionable items in the correct order as they appear in the menu in
 // signin pending state. If a new button is added to the menu, it should also be
 // added to this list.
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view_ui_browsertest.cc b/chrome/browser/ui/views/profiles/profile_menu_view_ui_browsertest.cc
index 7979a8722566c..56392c1abe206 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view_ui_browsertest.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view_ui_browsertest.cc
@@ -7,7 +7,6 @@
 #include "base/test/scoped_feature_list.h"
 #include "chrome/browser/enterprise/browser_management/management_service_factory.h"
 #include "chrome/browser/enterprise/util/managed_browser_utils.h"
-#include "chrome/browser/profiles/batch_upload/batch_upload_service_test_helper.h"
 #include "chrome/browser/sync/sync_service_factory.h"
 #include "chrome/browser/themes/theme_service.h"
 #include "chrome/browser/themes/theme_service_factory.h"
@@ -29,7 +28,6 @@
 #include "components/signin/public/base/signin_switches.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/supervised_user/test_support/supervised_user_signin_test_utils.h"
-#include "components/sync/base/features.h"
 #include "components/sync/service/sync_user_settings.h"
 #include "content/public/test/browser_test.h"
 #include "content/public/test/browser_test_utils.h"
@@ -67,12 +65,6 @@ enum class ManagementStatus {
   kSupervisedUser
 };
 
-enum class WithLocalData {
-  kNoLocalData,
-  kSingleLocalData,
-  kMultipleLocalData,
-};
-
 struct ProfileMenuViewPixelTestParam {
   PixelTestParam pixel_test_param;
   ProfileTypePixelTestParam profile_type_param =
@@ -82,7 +74,6 @@ struct ProfileMenuViewPixelTestParam {
   ManagementStatus management_status = ManagementStatus::kNonManaged;
   bool use_multiple_profiles = false;
   bool account_image_available = true;
-  WithLocalData with_local_data = WithLocalData::kNoLocalData;
 
   // Features and parameters that are enabled in addition to the features
   // enabled by default.
@@ -90,8 +81,8 @@ struct ProfileMenuViewPixelTestParam {
 };
 
 // To be passed as 4th argument to `INSTANTIATE_TEST_SUITE_P()`, allows the test
-// to be named like `ProfileMenuViewPixelTest.InvokeUi_default/<TestSuffix>`
-// instead of using the index of the param in `TestParam` as suffix.
+// to be named like `<TestClassName>.InvokeUi_default/<TestSuffix>` instead
+// of using the index of the param in `TestParam` as suffix.
 std::string ParamToTestSuffix(
     const ::testing::TestParamInfo<ProfileMenuViewPixelTestParam>& info) {
   return info.param.pixel_test_param.test_suffix;
@@ -250,28 +241,6 @@ const ProfileMenuViewPixelTestParam kPixelTestParams[] = {
               {{"history-sync-optin-expansion-pill-option",
                 "browse-across-devices-new-profile-menu-promo-variant"}}}},
     },
-    {
-        .pixel_test_param = {.test_suffix = "BatchUploadPromoSingleLocalData"},
-        .signin_status = SigninStatusPixelTestParam::kSignedInNoSync,
-        .with_local_data = WithLocalData::kSingleLocalData,
-    },
-    {
-        .pixel_test_param = {.test_suffix =
-                                 "BatchUploadPromoMultipleLocalDataDarkTheme",
-                             .use_dark_theme = true},
-        .signin_status = SigninStatusPixelTestParam::kSignedInNoSync,
-        .with_local_data = WithLocalData::kMultipleLocalData,
-    },
-    {
-        .pixel_test_param = {.test_suffix =
-                                 "BatchUploadPromoAndHistorySyncOptinPromo"},
-        .signin_status = SigninStatusPixelTestParam::kSignedInNoSync,
-        .with_local_data = WithLocalData::kMultipleLocalData,
-        .extra_features_and_params =
-            {{switches::kEnableHistorySyncOptinExpansionPill,
-              {{"history-sync-optin-expansion-pill-option",
-                "browse-across-devices-new-profile-menu-promo-variant"}}}},
-    },
 };
 
 }  // namespace
@@ -291,8 +260,7 @@ class ProfileMenuViewPixelTest
 
     std::vector<base::test::FeatureRefAndParams> enabled_features_and_params = {
         {features::kEnterpriseProfileBadgingForMenu, {}},
-        {features::kEnterpriseProfileBadgingPolicies, {}},
-        {syncer::kReplaceSyncPromosWithSignInPromos, {}}};
+        {features::kEnterpriseProfileBadgingPolicies, {}}};
     std::move(GetParam().extra_features_and_params.begin(),
               GetParam().extra_features_and_params.end(),
               std::back_inserter(enabled_features_and_params));
@@ -315,13 +283,6 @@ class ProfileMenuViewPixelTest
 
   ~ProfileMenuViewPixelTest() override = default;
 
-  void SetUpBrowserContextKeyedServices(
-      content::BrowserContext* context) override {
-    ProfilesPixelTestBaseT::SetUpBrowserContextKeyedServices(context);
-    batch_upload_test_helper_.SetupBatchUploadTestingFactoryInProfile(
-        Profile::FromBrowserContext(context));
-  }
-
   void TearDownOnMainThread() override {
     scoped_browser_management_.reset();
     ProfilesPixelTestBaseT<DialogBrowserTest>::TearDownOnMainThread();
@@ -463,8 +424,6 @@ class ProfileMenuViewPixelTest
         break;
     }
 
-    signin::IdentityManager* identity_manager =
-        identity_test_env()->identity_manager();
     switch (GetManagementStatus()) {
       case ManagementStatus::kNonManaged:
         break;
@@ -484,7 +443,7 @@ class ProfileMenuViewPixelTest
       case ManagementStatus::kSupervisedUser:
         if (!account_info.IsEmpty()) {
           supervised_user::UpdateSupervisionStatusForAccount(
-              account_info, identity_manager, true);
+              account_info, identity_test_env()->identity_manager(), true);
           break;
         }
     }
@@ -514,6 +473,8 @@ class ProfileMenuViewPixelTest
 
     if (!GetParam().account_image_available) {
       // Remove account images. `SignInWithAccount()` adds an image by default.
+      signin::IdentityManager* identity_manager =
+          identity_test_env()->identity_manager();
       for (const CoreAccountInfo& info :
            identity_manager->GetAccountsWithRefreshTokens()) {
         SimulateAccountImageFetch(identity_manager, info.account_id,
@@ -521,22 +482,6 @@ class ProfileMenuViewPixelTest
                                   gfx::Image());
       }
     }
-
-    size_t local_data_count = 0;
-    switch (GetParam().with_local_data) {
-      case WithLocalData::kNoLocalData:
-        break;
-      case WithLocalData::kSingleLocalData:
-        local_data_count = 1;
-        break;
-      case WithLocalData::kMultipleLocalData:
-        local_data_count = 5;
-        break;
-    }
-    if (local_data_count != 0) {
-      batch_upload_test_helper_.SetReturnDescriptions(
-          syncer::DataType::PASSWORDS, local_data_count);
-    }
   }
 
   // DialogBrowserTest:
@@ -603,7 +548,6 @@ class ProfileMenuViewPixelTest
   base::test::ScopedFeatureList feature_list_;
   std::unique_ptr<policy::ScopedManagementServiceOverrideForTesting>
       scoped_browser_management_;
-  BatchUploadServiceTestHelper batch_upload_test_helper_;
 };
 
 IN_PROC_BROWSER_TEST_P(ProfileMenuViewPixelTest, InvokeUi_default) {
diff --git a/tools/metrics/histograms/metadata/profile/enums.xml b/tools/metrics/histograms/metadata/profile/enums.xml
index fcb16be18c16e..70502782160c7 100644
--- a/tools/metrics/histograms/metadata/profile/enums.xml
+++ b/tools/metrics/histograms/metadata/profile/enums.xml
@@ -435,7 +435,6 @@ chromium-metrics-reviews@google.com.
   <int value="21" label="Reauth button (Verify it's you)"/>
   <int value="22" label="Autofill settings button"/>
   <int value="23" label="History sync opt-in button"/>
-  <int value="24" label="Batch upload button"/>
 </enum>
 
 <!-- LINT.ThenChange(//chrome/browser/ui/views/profiles/profile_menu_view_base.h:ActionableItem) -->
