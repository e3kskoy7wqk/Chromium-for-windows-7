

diff --git a/chrome/utility/importer/nss_decryptor_win.cc b/chrome/utility/importer/nss_decryptor_win.cc
index 616e4c793abdd..4758fec5e8df7 100644
--- a/chrome/utility/importer/nss_decryptor_win.cc
+++ b/chrome/utility/importer/nss_decryptor_win.cc
@@ -9,42 +9,87 @@
 
 namespace {
 
-// A helper class whose destructor calls SetDllDirectory(nullptr) to undo the
+typedef BOOL (WINAPI* SetDllDirectoryFunc)(LPCTSTR lpPathName);
+
+// A helper class whose destructor calls SetDllDirectory(NULL) to undo the
 // effects of a previous SetDllDirectory call.
-class ScopedSetDllDirectoryCaller {
+class SetDllDirectoryCaller {
  public:
-  ScopedSetDllDirectoryCaller() = default;
-  ~ScopedSetDllDirectoryCaller() { ::SetDllDirectory(nullptr); }
+  SetDllDirectoryCaller() : func_(NULL) {}
+
+  ~SetDllDirectoryCaller() {
+    if (func_)
+      func_(NULL);
+  }
+
+  // Sets the SetDllDirectory function pointer to activates this object.
+  void set_func(SetDllDirectoryFunc func) { func_ = func; }
+
+ private:
+  SetDllDirectoryFunc func_;
 };
 
 }  // namespace
 
 // static
 const wchar_t NSSDecryptor::kNSS3Library[] = L"nss3.dll";
+const wchar_t NSSDecryptor::kSoftokn3Library[] = L"softokn3.dll";
 const wchar_t NSSDecryptor::kPLDS4Library[] = L"plds4.dll";
 const wchar_t NSSDecryptor::kNSPR4Library[] = L"nspr4.dll";
 
 bool NSSDecryptor::Init(const base::FilePath& dll_path,
                         const base::FilePath& db_path) {
   // We call SetDllDirectory to work around a Purify bug (GetModuleHandle
-  // fails inside Purify under certain conditions).
-
-  if (!::SetDllDirectory(dll_path.value().c_str())) {
+  // fails inside Purify under certain conditions).  SetDllDirectory only
+  // exists on Windows XP SP1 or later, so we look up its address at run time.
+  HMODULE kernel32_dll = ::GetModuleHandle(L"kernel32.dll");
+  if (kernel32_dll == NULL)
     return false;
+  SetDllDirectoryFunc set_dll_directory =
+      (SetDllDirectoryFunc)GetProcAddress(kernel32_dll, "SetDllDirectoryW");
+  SetDllDirectoryCaller caller;
+
+  if (set_dll_directory != NULL) {
+    if (!set_dll_directory(dll_path.value().c_str()))
+      return false;
+    caller.set_func(set_dll_directory);
+    nss3_dll_ = LoadLibrary(kNSS3Library);
+    if (nss3_dll_ == NULL)
+      return false;
+  } else {
+    // Fall back on LoadLibraryEx if SetDllDirectory isn't available.  We
+    // actually prefer this method because it doesn't change the DLL search
+    // path, which is a process-wide property.
+    base::FilePath path = dll_path.Append(kNSS3Library);
+    nss3_dll_ = ::LoadLibraryEx(path.value().c_str(), NULL,
+                              LOAD_WITH_ALTERED_SEARCH_PATH);
+    if (nss3_dll_ == NULL)
+      return false;
+
+    // Firefox 2 uses NSS 3.11.  Firefox 3 uses NSS 3.12.  NSS 3.12 has two
+    // changes in its DLLs:
+    // 1. nss3.dll is not linked with softokn3.dll at build time, but rather
+    //    loads softokn3.dll using LoadLibrary in NSS_Init.
+    // 2. softokn3.dll has a new dependency sqlite3.dll.
+    // NSS_Init's LoadLibrary call has trouble finding sqlite3.dll.  To help
+    // it out, we preload softokn3.dll using LoadLibraryEx with the
+    // LOAD_WITH_ALTERED_SEARCH_PATH flag.  This helps because LoadLibrary
+    // doesn't load a DLL again if it's already loaded.  This workaround is
+    // harmless for NSS 3.11.
+    path = base::FilePath(dll_path).Append(kSoftokn3Library);
+    softokn3_dll_ = ::LoadLibraryEx(path.value().c_str(), NULL,
+                                  LOAD_WITH_ALTERED_SEARCH_PATH);
+    if (softokn3_dll_ == NULL) {
+      Free();
+      return false;
+    }
   }
-
-  ScopedSetDllDirectoryCaller caller;
-  nss3_dll_ = ::LoadLibrary(kNSS3Library);
-  if (!nss3_dll_) {
-    return false;
-  }
-
   HMODULE plds4_dll = ::GetModuleHandle(kPLDS4Library);
   HMODULE nspr4_dll = ::GetModuleHandle(kNSPR4Library);
 
   // On Firefox 22 and higher, NSPR is part of nss3.dll rather than separate
   // DLLs.
-  if (!plds4_dll) {
+  if (plds4_dll == NULL) {
     plds4_dll = nss3_dll_;
     nspr4_dll = nss3_dll_;
   }
