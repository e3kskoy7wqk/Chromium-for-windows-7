diff --git a/base/win/windows_version.cc b/base/win/windows_version.cc
index 63471af190ae2..48b89db110a49 100644
--- a/base/win/windows_version.cc
+++ b/base/win/windows_version.cc
@@ -27,8 +27,8 @@
 #error VS 2017 Update 3.2 or higher is required
 #endif
 
-#if !defined(NTDDI_WIN11_GE)
-#error Windows 10.0.26100.0 SDK or higher required.
+#if !defined(NTDDI_WIN10_NI)
+#error Windows 10.0.22621.0 SDK or higher required.
 #endif
 
 namespace base {
diff --git a/gpu/ipc/common/device_perf_info_mojom_traits.cc b/gpu/ipc/common/device_perf_info_mojom_traits.cc
index 967eed6227092..1bb3afc2451fd 100644
--- a/gpu/ipc/common/device_perf_info_mojom_traits.cc
+++ b/gpu/ipc/common/device_perf_info_mojom_traits.cc
@@ -14,8 +14,13 @@ gpu::mojom::Direct3DFeatureLevel
 EnumTraits<gpu::mojom::Direct3DFeatureLevel, D3D_FEATURE_LEVEL>::ToMojom(
     D3D_FEATURE_LEVEL d3d_feature_level) {
   switch (d3d_feature_level) {
+// TODO(crbug.com/362650376): This case is valid only for SDK version
+// 10.0.26100.0 and up. Include it unconditionally once we start requiring this
+// version
+#ifdef NTDDI_WIN11_GE
     case D3D_FEATURE_LEVEL_1_0_GENERIC:
       return gpu::mojom::Direct3DFeatureLevel::k1_0_Generic;
+#endif
     case D3D_FEATURE_LEVEL_1_0_CORE:
       return gpu::mojom::Direct3DFeatureLevel::k1_0_Core;
     case D3D_FEATURE_LEVEL_9_1:
diff --git a/ui/views/win/hwnd_message_handler.cc b/ui/views/win/hwnd_message_handler.cc
index ac502dee8a217..6dcae42a596e4 100644
--- a/ui/views/win/hwnd_message_handler.cc
+++ b/ui/views/win/hwnd_message_handler.cc
@@ -303,6 +303,24 @@ constexpr auto kTouchDownContextResetTimeout = base::Milliseconds(500);
 // same location as the cursor.
 constexpr int kSynthesizedMouseMessagesTimeDifference = 500;
 
+// TODO(dloehr): As of SDK version 10.0.26100.0, IsWindowArranged is now
+// declared in a header file, so we no longer need this version. Remove this
+// code once the SDK update is finalized.
+#ifndef NTDDI_WIN11_GE
+// Returns true if the window is arranged via Snap. For example, the browser
+// window is snapped via buttons shown when the mouse is hovered over window
+// maximize button.
+bool IsWindowArranged(HWND window) {
+  // IsWindowArranged() is not a part of any header file.
+  // https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-iswindowarranged
+  using IsWindowArrangedFuncType = BOOL(WINAPI*)(HWND);
+  static const auto is_window_arranged_func =
+      reinterpret_cast<IsWindowArrangedFuncType>(
+          base::win::GetUser32FunctionPointer("IsWindowArranged"));
+  return is_window_arranged_func ? is_window_arranged_func(window) : false;
+}
+#endif  // NTDDI_WIN11_GE
+
 }  // namespace
 
 // A scoping class that prevents a window from being able to redraw in response
