

diff --git a/sandbox/win/src/handle_closer_agent.cc b/sandbox/win/src/handle_closer_agent.cc
index a4cb9e8d6aa12..87347016804d4 100644
--- a/sandbox/win/src/handle_closer_agent.cc
+++ b/sandbox/win/src/handle_closer_agent.cc
@@ -166,20 +166,51 @@ bool HandleCloserAgent::CloseHandles() {
       ::GetCurrentProcess(), static_cast<PROCESSINFOCLASS>(ProcessHandleTable),
       handles.data(), static_cast<ULONG>(handles.size() * sizeof(uint32_t)),
       &return_length);
+  DWORD dwError = GetLastErrorFromNtStatus(status);
+  if (!NT_SUCCESS(status) && dwError == ERROR_INVALID_PARAMETER)
+  {
+      handle_count = UINT_MAX;
+      const int kInvalidHandleThreshold = 100;
+      const size_t kHandleOffset = 4;  // Handles are always a multiple of 4.
+
+      if (!::GetProcessHandleCount(::GetCurrentProcess(), &handle_count))
+        return false;
+
+      uint32_t handle_value = 0;
+      int invalid_count = 0;
+
+      // Keep incrementing until we hit the number of handles reported by
+      // GetProcessHandleCount(). If we hit a very long sequence of invalid
+      // handles we assume that we've run past the end of the table.
+      while (handle_count && invalid_count < kInvalidHandleThreshold) {
+        handle_value = kHandleOffset;
+        HANDLE handle = base::win::Uint32ToHandle(handle_value);
+        auto type_name = GetTypeNameFromHandle(handle);
+        if (!type_name) {
+          ++invalid_count;
+          continue;
+        }
 
-  if (!NT_SUCCESS(status)) {
-    ::SetLastError(GetLastErrorFromNtStatus(status));
-    return false;
+        --handle_count;
+        MaybeCloseHandle(type_name.value(), handle);
+      }
   }
-
-  CHECK(handles.size() * sizeof(uint32_t) >= return_length);
-  for (const uint32_t handle_value :
-       handles.subspan(0, return_length / sizeof(uint32_t))) {
-    HANDLE handle = base::win::Uint32ToHandle(handle_value);
-    auto type_name = GetTypeNameFromHandle(handle);
-    if (type_name) {
-      MaybeCloseHandle(type_name.value(), handle);
-    }
+  else if (NT_SUCCESS(status))
+  {
+  CHECK(handles.size() * sizeof(uint32_t) >= return_length);
+  for (const uint32_t handle_value :
+       handles.subspan(0, return_length / sizeof(uint32_t))) {
+        HANDLE handle = base::win::Uint32ToHandle(handle_value);
+        auto type_name = GetTypeNameFromHandle(handle);
+        if (type_name) {
+          MaybeCloseHandle(type_name.value(), handle);
+        }
+      }
+  }
+  else
+  {
+      ::SetLastError(GetLastErrorFromNtStatus(status));
+      return false;
   }
 
   return true;
