

diff --git a/device/BUILD.gn b/device/BUILD.gn
index 3817dadfad69a..9df704ac98466 100644
--- a/device/BUILD.gn
+++ b/device/BUILD.gn
@@ -377,6 +377,8 @@ test("device_unittests") {
     sources += [
       "bluetooth/bluetooth_classic_win_fake.cc",
       "bluetooth/bluetooth_classic_win_fake.h",
+      "bluetooth/bluetooth_low_energy_win_fake.cc",
+      "bluetooth/bluetooth_low_energy_win_fake.h",
       "bluetooth/test/fake_bluetooth_adapter_winrt.cc",
       "bluetooth/test/fake_bluetooth_adapter_winrt.h",
       "bluetooth/test/fake_bluetooth_le_advertisement_data_section_winrt.cc",
diff --git a/device/bluetooth/bluetooth_adapter_win.cc b/device/bluetooth/bluetooth_adapter_win.cc
index be0788831f155..c2952ecf47d0d 100644
--- a/device/bluetooth/bluetooth_adapter_win.cc
+++ b/device/bluetooth/bluetooth_adapter_win.cc
@@ -308,6 +308,7 @@ void BluetoothAdapterWin::Initialize(base::OnceClosure init_callback) {
 void BluetoothAdapterWin::InitForTest(
     base::OnceClosure init_callback,
     std::unique_ptr<win::BluetoothClassicWrapper> classic_wrapper,
+    std::unique_ptr<win::BluetoothLowEnergyWrapper> le_wrapper,
     scoped_refptr<base::SingleThreadTaskRunner> ui_task_runner,
     scoped_refptr<base::SequencedTaskRunner> bluetooth_task_runner) {
   init_callback_ = std::move(init_callback);
@@ -315,7 +316,7 @@ void BluetoothAdapterWin::InitForTest(
   if (!ui_task_runner_)
     ui_task_runner_ = base::SingleThreadTaskRunner::GetCurrentDefault();
   task_manager_ = BluetoothTaskManagerWin::CreateForTesting(
-      std::move(classic_wrapper), ui_task_runner_);
+      std::move(classic_wrapper), std::move(le_wrapper), ui_task_runner_);
   task_manager_->AddObserver(this);
   task_manager_->InitializeWithBluetoothTaskRunner(bluetooth_task_runner);
 }
diff --git a/device/bluetooth/bluetooth_adapter_win.h b/device/bluetooth/bluetooth_adapter_win.h
index a45b6abfb5c51..a4212e625ed3b 100644
--- a/device/bluetooth/bluetooth_adapter_win.h
+++ b/device/bluetooth/bluetooth_adapter_win.h
@@ -126,6 +126,7 @@ class DEVICE_BLUETOOTH_EXPORT BluetoothAdapterWin
   void InitForTest(
       base::OnceClosure init_callback,
       std::unique_ptr<win::BluetoothClassicWrapper> classic_wrapper,
+      std::unique_ptr<win::BluetoothLowEnergyWrapper> le_wrapper,
       scoped_refptr<base::SingleThreadTaskRunner> ui_task_runner,
       scoped_refptr<base::SequencedTaskRunner> bluetooth_task_runner);
 
diff --git a/device/bluetooth/bluetooth_adapter_win_unittest.cc b/device/bluetooth/bluetooth_adapter_win_unittest.cc
index 0294d1d96f555..dcbc4e7c7971c 100644
--- a/device/bluetooth/bluetooth_adapter_win_unittest.cc
+++ b/device/bluetooth/bluetooth_adapter_win_unittest.cc
@@ -62,7 +62,7 @@ class BluetoothAdapterWinTest : public testing::Test {
     adapter_win_->InitForTest(
         base::BindOnce(&BluetoothAdapterWinTest::RunInitCallback,
                        base::Unretained(this)),
-        nullptr, ui_task_runner_, bluetooth_task_runner_);
+        nullptr, nullptr, ui_task_runner_, bluetooth_task_runner_);
   }
 
   void SetUp() override {
diff --git a/device/bluetooth/bluetooth_low_energy_win_fake.cc b/device/bluetooth/bluetooth_low_energy_win_fake.cc
new file mode 100644
index 0000000000000..f55b291d8195f
--- /dev/null
+++ b/device/bluetooth/bluetooth_low_energy_win_fake.cc
@@ -0,0 +1,626 @@
+// Copyright 2016 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "device/bluetooth/bluetooth_low_energy_win_fake.h"
+
+#include <memory>
+#include <string>
+#include <utility>
+#include <vector>
+
+#include "base/check_op.h"
+#include "base/memory/ptr_util.h"
+#include "base/strings/stringprintf.h"
+#include "device/bluetooth/bluetooth_low_energy_defs_win.h"
+
+namespace device::win {
+
+BLEDevice::BLEDevice() {}
+BLEDevice::~BLEDevice() {}
+
+GattService::GattService() {}
+GattService::~GattService() {}
+
+GattCharacteristic::GattCharacteristic() {}
+GattCharacteristic::~GattCharacteristic() {}
+
+GattDescriptor::GattDescriptor() {}
+GattDescriptor::~GattDescriptor() {}
+
+GattCharacteristicObserver::GattCharacteristicObserver() {}
+GattCharacteristicObserver::~GattCharacteristicObserver() {}
+
+BluetoothLowEnergyWrapperFake::BluetoothLowEnergyWrapperFake()
+    : observer_(nullptr) {}
+BluetoothLowEnergyWrapperFake::~BluetoothLowEnergyWrapperFake() {}
+
+bool BluetoothLowEnergyWrapperFake::EnumerateKnownBluetoothLowEnergyDevices(
+    std::vector<std::unique_ptr<BluetoothLowEnergyDeviceInfo>>* devices,
+    std::string* error) {
+  for (auto& device : simulated_devices_) {
+    if (device.second->marked_as_deleted)
+      continue;
+    auto device_info = std::make_unique<BluetoothLowEnergyDeviceInfo>();
+    *device_info = *(device.second->device_info);
+    devices->push_back(std::move(device_info));
+  }
+  return true;
+}
+
+bool BluetoothLowEnergyWrapperFake::
+    EnumerateKnownBluetoothLowEnergyGattServiceDevices(
+        std::vector<std::unique_ptr<BluetoothLowEnergyDeviceInfo>>* devices,
+        std::string* error) {
+  for (auto& device : simulated_devices_) {
+    for (auto& service : device.second->primary_services) {
+      auto device_info = std::make_unique<BluetoothLowEnergyDeviceInfo>();
+      *device_info = *(device.second->device_info);
+      std::wstring path = GenerateGattServiceDevicePath(
+          device.second->device_info->path.value(),
+          service.second->service_info->AttributeHandle);
+      device_info->path = base::FilePath(path);
+      devices->push_back(std::move(device_info));
+    }
+  }
+  return true;
+}
+
+bool BluetoothLowEnergyWrapperFake::EnumerateKnownBluetoothLowEnergyServices(
+    const base::FilePath& device_path,
+    std::vector<std::unique_ptr<BluetoothLowEnergyServiceInfo>>* services,
+    std::string* error) {
+  std::wstring device_address =
+      ExtractDeviceAddressFromDevicePath(device_path.value());
+  std::vector<std::string> service_attribute_handles =
+      ExtractServiceAttributeHandlesFromDevicePath(device_path.value());
+
+  BLEDevicesMap::iterator it_d = simulated_devices_.find(
+      std::string(device_address.begin(), device_address.end()));
+  CHECK(it_d != simulated_devices_.end());
+
+  // |service_attribute_handles| is empty means |device_path| is a BLE device
+  // path, otherwise it is a BLE GATT service device path.
+  if (service_attribute_handles.empty()) {
+    // Return all primary services for BLE device.
+    for (auto& primary_service : it_d->second->primary_services) {
+      auto service_info = std::make_unique<BluetoothLowEnergyServiceInfo>();
+      service_info->uuid = primary_service.second->service_info->ServiceUuid;
+      service_info->attribute_handle =
+          primary_service.second->service_info->AttributeHandle;
+      services->push_back(std::move(service_info));
+    }
+  } else {
+    // Return corresponding GATT service for BLE GATT service device.
+    GattService* target_service =
+        GetSimulatedGattService(it_d->second.get(), service_attribute_handles);
+    auto service_info = std::make_unique<BluetoothLowEnergyServiceInfo>();
+    service_info->uuid = target_service->service_info->ServiceUuid;
+    service_info->attribute_handle =
+        target_service->service_info->AttributeHandle;
+    services->push_back(std::move(service_info));
+  }
+
+  return true;
+}
+
+HRESULT BluetoothLowEnergyWrapperFake::ReadCharacteristicsOfAService(
+    base::FilePath& service_path,
+    const PBTH_LE_GATT_SERVICE service,
+    std::unique_ptr<BTH_LE_GATT_CHARACTERISTIC>* out_included_characteristics,
+    USHORT* out_counts) {
+  std::wstring device_address =
+      ExtractDeviceAddressFromDevicePath(service_path.value());
+  BLEDevice* target_device = GetSimulatedBLEDevice(
+      std::string(device_address.begin(), device_address.end()));
+  if (target_device == nullptr)
+    return HRESULT_FROM_WIN32(ERROR_NOT_FOUND);
+  const std::vector<std::string> service_att_handles =
+      ExtractServiceAttributeHandlesFromDevicePath(service_path.value());
+  GattService* target_service =
+      GetSimulatedGattService(target_device, service_att_handles);
+  if (target_service == nullptr)
+    return HRESULT_FROM_WIN32(ERROR_NOT_FOUND);
+
+  std::size_t number_of_included_characteristic =
+      target_service->included_characteristics.size();
+  if (number_of_included_characteristic) {
+    *out_counts = (USHORT)number_of_included_characteristic;
+    out_included_characteristics->reset(
+        new BTH_LE_GATT_CHARACTERISTIC[number_of_included_characteristic]);
+    std::size_t i = 0;
+    for (const auto& cha : target_service->included_characteristics) {
+      out_included_characteristics->get()[i] =
+          *(cha.second->characteristic_info);
+      i++;
+    }
+    return S_OK;
+  }
+  return HRESULT_FROM_WIN32(ERROR_NO_MORE_ITEMS);
+}
+
+HRESULT BluetoothLowEnergyWrapperFake::ReadDescriptorsOfACharacteristic(
+    base::FilePath& service_path,
+    const PBTH_LE_GATT_CHARACTERISTIC characteristic,
+    std::unique_ptr<BTH_LE_GATT_DESCRIPTOR>* out_included_descriptors,
+    USHORT* out_counts) {
+  GattCharacteristic* target_characteristic =
+      GetSimulatedGattCharacteristic(service_path, characteristic);
+  if (target_characteristic == nullptr)
+    return HRESULT_FROM_WIN32(ERROR_NOT_FOUND);
+
+  std::size_t number_of_included_descriptors =
+      target_characteristic->included_descriptors.size();
+  PBTH_LE_GATT_DESCRIPTOR win_descriptors_info =
+      new BTH_LE_GATT_DESCRIPTOR[number_of_included_descriptors];
+  *out_counts = USHORT(number_of_included_descriptors);
+  std::size_t i = 0;
+  for (const auto& d : target_characteristic->included_descriptors) {
+    win_descriptors_info[i] = *(d.second->descriptor_info);
+    i++;
+  }
+  out_included_descriptors->reset(win_descriptors_info);
+  return S_OK;
+}
+
+HRESULT BluetoothLowEnergyWrapperFake::ReadCharacteristicValue(
+    base::FilePath& service_path,
+    const PBTH_LE_GATT_CHARACTERISTIC characteristic,
+    std::unique_ptr<BTH_LE_GATT_CHARACTERISTIC_VALUE>* out_value) {
+  GattCharacteristic* target_characteristic =
+      GetSimulatedGattCharacteristic(service_path, characteristic);
+  if (target_characteristic == nullptr)
+    return HRESULT_FROM_WIN32(ERROR_NOT_FOUND);
+
+  // Return error simulated by SimulateGattCharacteristicReadError.
+  if (target_characteristic->read_errors.size()) {
+    HRESULT hr = target_characteristic->read_errors[0];
+    target_characteristic->read_errors.erase(
+        target_characteristic->read_errors.begin());
+    return hr;
+  }
+
+  PBTH_LE_GATT_CHARACTERISTIC_VALUE ret_value =
+      (PBTH_LE_GATT_CHARACTERISTIC_VALUE)(
+          new UCHAR[sizeof(ULONG) + target_characteristic->value->DataSize]);
+  ret_value->DataSize = target_characteristic->value->DataSize;
+  for (ULONG i = 0; i < ret_value->DataSize; i++)
+    ret_value->Data[i] = target_characteristic->value->Data[i];
+  out_value->reset(ret_value);
+  if (observer_)
+    observer_->OnReadGattCharacteristicValue();
+  return S_OK;
+}
+
+HRESULT BluetoothLowEnergyWrapperFake::WriteCharacteristicValue(
+    base::FilePath& service_path,
+    const PBTH_LE_GATT_CHARACTERISTIC characteristic,
+    PBTH_LE_GATT_CHARACTERISTIC_VALUE new_value,
+    ULONG flags) {
+  // Web Bluetooth implementation currently only supports no flags or write
+  // without response flag even if Windows supports other flags
+  if (flags != BLUETOOTH_GATT_FLAG_NONE &&
+      flags != BLUETOOTH_GATT_FLAG_WRITE_WITHOUT_RESPONSE) {
+    return HRESULT_FROM_WIN32(ERROR_NOT_SUPPORTED);
+  }
+
+  GattCharacteristic* target_characteristic =
+      GetSimulatedGattCharacteristic(service_path, characteristic);
+  if (target_characteristic == nullptr)
+    return HRESULT_FROM_WIN32(ERROR_NOT_FOUND);
+
+  // Return error simulated by SimulateGattCharacteristicWriteError.
+  if (target_characteristic->write_errors.size()) {
+    HRESULT hr = *(target_characteristic->write_errors.begin());
+    target_characteristic->write_errors.erase(
+        target_characteristic->write_errors.begin());
+    return hr;
+  }
+
+  PBTH_LE_GATT_CHARACTERISTIC_VALUE win_value =
+      (PBTH_LE_GATT_CHARACTERISTIC_VALUE)(
+          new UCHAR[new_value->DataSize + sizeof(ULONG)]);
+  for (ULONG i = 0; i < new_value->DataSize; i++)
+    win_value->Data[i] = new_value->Data[i];
+  win_value->DataSize = new_value->DataSize;
+  target_characteristic->value.reset(win_value);
+  if (observer_)
+    observer_->OnWriteGattCharacteristicValue(win_value);
+  return S_OK;
+}
+
+HRESULT BluetoothLowEnergyWrapperFake::RegisterGattEvents(
+    base::FilePath& service_path,
+    BTH_LE_GATT_EVENT_TYPE type,
+    PVOID event_parameter,
+    PFNBLUETOOTH_GATT_EVENT_CALLBACK_CORRECTED callback,
+    PVOID context,
+    BLUETOOTH_GATT_EVENT_HANDLE* out_handle) {
+  // Right now, only CharacteristicValueChangedEvent is supported.
+  CHECK(CharacteristicValueChangedEvent == type);
+
+  std::unique_ptr<GattCharacteristicObserver> observer(
+      new GattCharacteristicObserver());
+  observer->callback = callback;
+  observer->context = context;
+  *out_handle = (BLUETOOTH_GATT_EVENT_HANDLE)observer.get();
+
+  PBLUETOOTH_GATT_VALUE_CHANGED_EVENT_REGISTRATION parameter =
+      (PBLUETOOTH_GATT_VALUE_CHANGED_EVENT_REGISTRATION)event_parameter;
+  for (USHORT i = 0; i < parameter->NumCharacteristics; i++) {
+    GattCharacteristic* target_characteristic = GetSimulatedGattCharacteristic(
+        service_path, &parameter->Characteristics[i]);
+    CHECK(target_characteristic);
+
+    // Return error simulated by SimulateGattCharacteristicSetNotifyError.
+    if (target_characteristic->notify_errors.size()) {
+      HRESULT error = target_characteristic->notify_errors[0];
+      target_characteristic->notify_errors.erase(
+          target_characteristic->notify_errors.begin());
+      return error;
+    }
+
+    target_characteristic->observers.push_back(*out_handle);
+  }
+  gatt_characteristic_observers_[*out_handle] = std::move(observer);
+
+  if (observer_)
+    observer_->OnStartCharacteristicNotification();
+
+  return S_OK;
+}
+
+HRESULT BluetoothLowEnergyWrapperFake::UnregisterGattEvent(
+    BLUETOOTH_GATT_EVENT_HANDLE event_handle) {
+  gatt_characteristic_observers_.erase(event_handle);
+  return S_OK;
+}
+
+HRESULT BluetoothLowEnergyWrapperFake::WriteDescriptorValue(
+    base::FilePath& service_path,
+    const PBTH_LE_GATT_DESCRIPTOR descriptor,
+    PBTH_LE_GATT_DESCRIPTOR_VALUE new_value) {
+  if (new_value->DescriptorType == ClientCharacteristicConfiguration) {
+    // Simulate the value the OS will write.
+    std::vector<UCHAR> write_value;
+    if (new_value->ClientCharacteristicConfiguration
+            .IsSubscribeToNotification) {
+      write_value.push_back(1);
+    } else if (new_value->ClientCharacteristicConfiguration
+                   .IsSubscribeToIndication) {
+      write_value.push_back(2);
+    }
+    write_value.push_back(0);
+    if (observer_)
+      observer_->OnWriteGattDescriptorValue(write_value);
+  }
+  return S_OK;
+}
+
+BLEDevice* BluetoothLowEnergyWrapperFake::SimulateBLEDevice(
+    std::string device_name,
+    BLUETOOTH_ADDRESS device_address) {
+  BLEDevice* device = new BLEDevice();
+  BluetoothLowEnergyDeviceInfo* device_info =
+      new BluetoothLowEnergyDeviceInfo();
+  std::string string_device_address =
+      BluetoothAddressToCanonicalString(device_address);
+  device_info->path =
+      base::FilePath(GenerateBLEDevicePath(string_device_address));
+  device_info->friendly_name = device_name;
+  device_info->address = device_address;
+  device->device_info.reset(device_info);
+  device->marked_as_deleted = false;
+  simulated_devices_[string_device_address] = base::WrapUnique(device);
+  return device;
+}
+
+BLEDevice* BluetoothLowEnergyWrapperFake::GetSimulatedBLEDevice(
+    std::string device_address) {
+  BLEDevicesMap::iterator it_d = simulated_devices_.find(device_address);
+  if (it_d == simulated_devices_.end())
+    return nullptr;
+  return it_d->second.get();
+}
+
+void BluetoothLowEnergyWrapperFake::RemoveSimulatedBLEDevice(
+    std::string device_address) {
+  simulated_devices_[device_address]->marked_as_deleted = true;
+}
+
+GattService* BluetoothLowEnergyWrapperFake::SimulateGattService(
+    BLEDevice* device,
+    GattService* parent_service,
+    const BTH_LE_UUID& uuid) {
+  CHECK(device);
+
+  GattService* service = new GattService();
+  PBTH_LE_GATT_SERVICE service_info = new BTH_LE_GATT_SERVICE[1];
+  std::string string_device_address =
+      BluetoothAddressToCanonicalString(device->device_info->address);
+  service_info->AttributeHandle =
+      GenerateAUniqueAttributeHandle(string_device_address);
+  service_info->ServiceUuid = uuid;
+  service->service_info.reset(service_info);
+
+  if (parent_service) {
+    parent_service
+        ->included_services[std::to_string(service_info->AttributeHandle)] =
+        base::WrapUnique(service);
+  } else {
+    device->primary_services[std::to_string(service_info->AttributeHandle)] =
+        base::WrapUnique(service);
+  }
+  return service;
+}
+
+void BluetoothLowEnergyWrapperFake::SimulateGattServiceRemoved(
+    BLEDevice* device,
+    GattService* parent_service,
+    std::string attribute_handle) {
+  if (parent_service) {
+    parent_service->included_services.erase(attribute_handle);
+  } else {
+    device->primary_services.erase(attribute_handle);
+  }
+}
+
+GattService* BluetoothLowEnergyWrapperFake::GetSimulatedGattService(
+    BLEDevice* device,
+    const std::vector<std::string>& chain_of_att_handle) {
+  // First, find the root primary service.
+  GattServicesMap::iterator it_s =
+      device->primary_services.find(chain_of_att_handle[0]);
+  if (it_s == device->primary_services.end())
+    return nullptr;
+
+  // Iteratively follow the chain of included service attribute handles to find
+  // the target service.
+  for (std::size_t i = 1; i < chain_of_att_handle.size(); i++) {
+    std::string included_att_handle = std::string(
+        chain_of_att_handle[i].begin(), chain_of_att_handle[i].end());
+    GattServicesMap::iterator it_i =
+        it_s->second->included_services.find(included_att_handle);
+    if (it_i == it_s->second->included_services.end())
+      return nullptr;
+    it_s = it_i;
+  }
+  return it_s->second.get();
+}
+
+GattCharacteristic* BluetoothLowEnergyWrapperFake::SimulateGattCharacterisc(
+    std::string device_address,
+    GattService* parent_service,
+    const BTH_LE_GATT_CHARACTERISTIC& characteristic) {
+  CHECK(parent_service);
+
+  GattCharacteristic* win_characteristic = new GattCharacteristic();
+  PBTH_LE_GATT_CHARACTERISTIC win_characteristic_info =
+      new BTH_LE_GATT_CHARACTERISTIC[1];
+  *win_characteristic_info = characteristic;
+  (win_characteristic->characteristic_info).reset(win_characteristic_info);
+  win_characteristic->characteristic_info->AttributeHandle =
+      GenerateAUniqueAttributeHandle(device_address);
+  parent_service->included_characteristics[std::to_string(
+      win_characteristic->characteristic_info->AttributeHandle)] =
+      base::WrapUnique(win_characteristic);
+  // Set default empty value.
+  PBTH_LE_GATT_CHARACTERISTIC_VALUE win_value =
+      (PBTH_LE_GATT_CHARACTERISTIC_VALUE)(
+          new UCHAR[sizeof(BTH_LE_GATT_CHARACTERISTIC_VALUE)]);
+  win_value->DataSize = 0;
+  win_characteristic->value.reset(win_value);
+  return win_characteristic;
+}
+
+void BluetoothLowEnergyWrapperFake::SimulateGattCharacteriscRemove(
+    GattService* parent_service,
+    std::string attribute_handle) {
+  CHECK(parent_service);
+  parent_service->included_characteristics.erase(attribute_handle);
+}
+
+GattCharacteristic*
+BluetoothLowEnergyWrapperFake::GetSimulatedGattCharacteristic(
+    GattService* parent_service,
+    std::string attribute_handle) {
+  CHECK(parent_service);
+  GattCharacteristicsMap::iterator it =
+      parent_service->included_characteristics.find(attribute_handle);
+  if (it != parent_service->included_characteristics.end())
+    return it->second.get();
+  return nullptr;
+}
+
+void BluetoothLowEnergyWrapperFake::SimulateGattCharacteristicValue(
+    GattCharacteristic* characteristic,
+    const std::vector<uint8_t>& value) {
+  GattCharacteristic* target_characteristic = characteristic;
+  if (target_characteristic == nullptr)
+    target_characteristic = remembered_characteristic_;
+  CHECK(target_characteristic);
+
+  PBTH_LE_GATT_CHARACTERISTIC_VALUE win_value =
+      (PBTH_LE_GATT_CHARACTERISTIC_VALUE)(
+          new UCHAR[value.size() + sizeof(ULONG)]);
+  win_value->DataSize = (ULONG)value.size();
+  for (std::size_t i = 0; i < value.size(); i++)
+    win_value->Data[i] = value[i];
+  target_characteristic->value.reset(win_value);
+}
+
+void BluetoothLowEnergyWrapperFake::
+    SimulateCharacteristicValueChangeNotification(
+        GattCharacteristic* characteristic) {
+  GattCharacteristic* target_characteristic = characteristic;
+  if (target_characteristic == nullptr)
+    target_characteristic = remembered_characteristic_;
+  CHECK(target_characteristic);
+  for (auto* observer : target_characteristic->observers) {
+    GattCharacteristicObserverTable::const_iterator it =
+        gatt_characteristic_observers_.find(observer);
+    // Check if |observer| has been unregistered by UnregisterGattEvent.
+    if (it != gatt_characteristic_observers_.end()) {
+      BLUETOOTH_GATT_VALUE_CHANGED_EVENT event;
+      event.ChangedAttributeHandle =
+          target_characteristic->characteristic_info->AttributeHandle;
+      event.CharacteristicValueDataSize =
+          target_characteristic->value->DataSize + sizeof(ULONG);
+      event.CharacteristicValue = target_characteristic->value.get();
+      it->second->callback(CharacteristicValueChangedEvent, &event,
+                           it->second->context);
+    }
+  }
+}
+
+void BluetoothLowEnergyWrapperFake::SimulateGattCharacteristicSetNotifyError(
+    GattCharacteristic* characteristic,
+    HRESULT error) {
+  characteristic->notify_errors.push_back(error);
+}
+
+void BluetoothLowEnergyWrapperFake::SimulateGattCharacteristicReadError(
+    GattCharacteristic* characteristic,
+    HRESULT error) {
+  CHECK(characteristic);
+  characteristic->read_errors.push_back(error);
+}
+
+void BluetoothLowEnergyWrapperFake::SimulateGattCharacteristicWriteError(
+    GattCharacteristic* characteristic,
+    HRESULT error) {
+  CHECK(characteristic);
+  characteristic->write_errors.push_back(error);
+}
+
+void BluetoothLowEnergyWrapperFake::RememberCharacteristicForSubsequentAction(
+    GattService* parent_service,
+    std::string attribute_handle) {
+  CHECK(parent_service);
+  remembered_characteristic_ =
+      parent_service->included_characteristics[attribute_handle].get();
+  CHECK(remembered_characteristic_);
+}
+
+void BluetoothLowEnergyWrapperFake::SimulateGattDescriptor(
+    std::string device_address,
+    GattCharacteristic* characteristic,
+    const BTH_LE_UUID& uuid) {
+  std::unique_ptr<GattDescriptor> descriptor(new GattDescriptor());
+  descriptor->descriptor_info.reset(new BTH_LE_GATT_DESCRIPTOR[1]);
+  descriptor->descriptor_info->DescriptorUuid = uuid;
+  descriptor->descriptor_info->AttributeHandle =
+      GenerateAUniqueAttributeHandle(device_address);
+  characteristic->included_descriptors[std::to_string(
+      descriptor->descriptor_info->AttributeHandle)] = std::move(descriptor);
+}
+
+void BluetoothLowEnergyWrapperFake::AddObserver(Observer* observer) {
+  observer_ = observer;
+}
+
+GattCharacteristic*
+BluetoothLowEnergyWrapperFake::GetSimulatedGattCharacteristic(
+    base::FilePath& service_path,
+    const PBTH_LE_GATT_CHARACTERISTIC characteristic) {
+  std::wstring device_address =
+      ExtractDeviceAddressFromDevicePath(service_path.value());
+  BLEDevice* target_device = GetSimulatedBLEDevice(
+      std::string(device_address.begin(), device_address.end()));
+  if (target_device == nullptr)
+    return nullptr;
+  const std::vector<std::string> service_att_handles =
+      ExtractServiceAttributeHandlesFromDevicePath(service_path.value());
+  GattService* target_service =
+      GetSimulatedGattService(target_device, service_att_handles);
+  if (target_service == nullptr)
+    return nullptr;
+  GattCharacteristic* target_characteristic = GetSimulatedGattCharacteristic(
+      target_service, std::to_string(characteristic->AttributeHandle));
+  return target_characteristic;
+}
+
+USHORT BluetoothLowEnergyWrapperFake::GenerateAUniqueAttributeHandle(
+    std::string device_address) {
+  std::unique_ptr<std::set<USHORT>>& set_of_ushort =
+      attribute_handle_table_[device_address];
+  if (set_of_ushort) {
+    USHORT max_attribute_handle = *set_of_ushort->rbegin();
+    if (max_attribute_handle < 0xFFFF) {
+      USHORT new_attribute_handle = max_attribute_handle + 1;
+      set_of_ushort->insert(new_attribute_handle);
+      return new_attribute_handle;
+    } else {
+      USHORT i = 1;
+      for (; i < 0xFFFF; i++) {
+        if (set_of_ushort->find(i) == set_of_ushort->end())
+          break;
+      }
+      if (i >= 0xFFFF)
+        return 0;
+      set_of_ushort->insert(i);
+      return i;
+    }
+  }
+
+  USHORT smallest_att_handle = 1;
+  std::set<USHORT>* new_set = new std::set<USHORT>();
+  new_set->insert(smallest_att_handle);
+  set_of_ushort.reset(new_set);
+  return smallest_att_handle;
+}
+
+std::wstring BluetoothLowEnergyWrapperFake::GenerateBLEDevicePath(
+    std::string device_address) {
+  return std::wstring(device_address.begin(), device_address.end());
+}
+
+std::wstring BluetoothLowEnergyWrapperFake::GenerateGattServiceDevicePath(
+    std::wstring resident_device_path,
+    USHORT service_attribute_handle) {
+  std::string sub_path = std::to_string(service_attribute_handle);
+  return resident_device_path + L"/" +
+         std::wstring(sub_path.begin(), sub_path.end());
+}
+
+std::wstring BluetoothLowEnergyWrapperFake::ExtractDeviceAddressFromDevicePath(
+    std::wstring path) {
+  std::size_t found = path.find_first_of('/');
+  if (found != std::wstring::npos) {
+    return path.substr(0, found);
+  }
+  return path;
+}
+
+std::vector<std::string>
+BluetoothLowEnergyWrapperFake::ExtractServiceAttributeHandlesFromDevicePath(
+    std::wstring path) {
+  std::size_t found = path.find('/');
+  if (found == std::wstring::npos)
+    return std::vector<std::string>();
+
+  std::vector<std::string> chain_of_att_handle;
+  while (true) {
+    std::size_t next_found = path.find(path, found + 1);
+    if (next_found == std::wstring::npos)
+      break;
+    std::wstring att_handle = path.substr(found + 1, next_found);
+    chain_of_att_handle.push_back(
+        std::string(att_handle.begin(), att_handle.end()));
+    found = next_found;
+  }
+  std::wstring att_handle = path.substr(found + 1);
+  chain_of_att_handle.push_back(
+      std::string(att_handle.begin(), att_handle.end()));
+  return chain_of_att_handle;
+}
+
+std::string BluetoothLowEnergyWrapperFake::BluetoothAddressToCanonicalString(
+    const BLUETOOTH_ADDRESS& btha) {
+  std::string result = base::StringPrintf(
+      "%02X:%02X:%02X:%02X:%02X:%02X", btha.rgBytes[5], btha.rgBytes[4],
+      btha.rgBytes[3], btha.rgBytes[2], btha.rgBytes[1], btha.rgBytes[0]);
+  return result;
+}
+
+}  // namespace device::win
diff --git a/device/bluetooth/bluetooth_low_energy_win_fake.h b/device/bluetooth/bluetooth_low_energy_win_fake.h
new file mode 100644
index 0000000000000..072fa7abaeea6
--- /dev/null
+++ b/device/bluetooth/bluetooth_low_energy_win_fake.h
@@ -0,0 +1,239 @@
+// Copyright 2016 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef DEVICE_BLUETOOTH_BLUETOOTH_LOW_ENERGY_WIN_FAKE_H_
+#define DEVICE_BLUETOOTH_BLUETOOTH_LOW_ENERGY_WIN_FAKE_H_
+
+#include <memory>
+#include <set>
+#include <unordered_map>
+
+#include "base/memory/raw_ptr.h"
+#include "device/bluetooth/bluetooth_low_energy_win.h"
+
+namespace device {
+namespace win {
+
+struct BLEDevice;
+struct GattService;
+struct GattCharacteristic;
+struct GattCharacteristicObserver;
+struct GattDescriptor;
+
+// The key of BLEDevicesMap is the string of the BLE device address.
+typedef std::unordered_map<std::string, std::unique_ptr<BLEDevice>>
+    BLEDevicesMap;
+// The key of GattServicesMap, GattCharacteristicsMap and GattDescriptorsMap is
+// the string of the attribute handle.
+typedef std::unordered_map<std::string, std::unique_ptr<GattService>>
+    GattServicesMap;
+typedef std::unordered_map<std::string, std::unique_ptr<GattCharacteristic>>
+    GattCharacteristicsMap;
+typedef std::unordered_map<std::string, std::unique_ptr<GattDescriptor>>
+    GattDescriptorsMap;
+// The key of BLEAttributeHandleTable is the string of the BLE device address.
+typedef std::unordered_map<std::string, std::unique_ptr<std::set<USHORT>>>
+    BLEAttributeHandleTable;
+// The key of GattCharacteristicObserverTable is GattCharacteristicObserver
+// pointer.
+// Note: The underlying data type of BLUETOOTH_GATT_EVENT_HANDLE is PVOID.
+typedef std::unordered_map<BLUETOOTH_GATT_EVENT_HANDLE,
+                           std::unique_ptr<GattCharacteristicObserver>>
+    GattCharacteristicObserverTable;
+
+struct BLEDevice {
+  BLEDevice();
+  ~BLEDevice();
+  std::unique_ptr<BluetoothLowEnergyDeviceInfo> device_info;
+  GattServicesMap primary_services;
+  bool marked_as_deleted;
+};
+
+struct GattService {
+  GattService();
+  ~GattService();
+  std::unique_ptr<BTH_LE_GATT_SERVICE> service_info;
+  GattServicesMap included_services;
+  GattCharacteristicsMap included_characteristics;
+};
+
+struct GattCharacteristic {
+  GattCharacteristic();
+  ~GattCharacteristic();
+  std::unique_ptr<BTH_LE_GATT_CHARACTERISTIC> characteristic_info;
+  std::unique_ptr<BTH_LE_GATT_CHARACTERISTIC_VALUE> value;
+  GattDescriptorsMap included_descriptors;
+  std::vector<HRESULT> read_errors;
+  std::vector<HRESULT> write_errors;
+  std::vector<HRESULT> notify_errors;
+  std::vector<BLUETOOTH_GATT_EVENT_HANDLE> observers;
+};
+
+struct GattDescriptor {
+  GattDescriptor();
+  ~GattDescriptor();
+  std::unique_ptr<BTH_LE_GATT_DESCRIPTOR> descriptor_info;
+  std::unique_ptr<BTH_LE_GATT_DESCRIPTOR_VALUE> value;
+};
+
+struct GattCharacteristicObserver {
+  GattCharacteristicObserver();
+  ~GattCharacteristicObserver();
+  PFNBLUETOOTH_GATT_EVENT_CALLBACK_CORRECTED callback;
+  PVOID context;
+};
+
+// Fake implementation of BluetoothLowEnergyWrapper. Used for BluetoothTestWin.
+class BluetoothLowEnergyWrapperFake : public BluetoothLowEnergyWrapper {
+ public:
+  class Observer {
+   public:
+    Observer() {}
+    ~Observer() {}
+
+    virtual void OnReadGattCharacteristicValue() = 0;
+    virtual void OnWriteGattCharacteristicValue(
+        const PBTH_LE_GATT_CHARACTERISTIC_VALUE value) = 0;
+    virtual void OnStartCharacteristicNotification() = 0;
+    virtual void OnWriteGattDescriptorValue(
+        const std::vector<uint8_t>& value) = 0;
+  };
+
+  BluetoothLowEnergyWrapperFake();
+  ~BluetoothLowEnergyWrapperFake() override;
+
+  bool EnumerateKnownBluetoothLowEnergyDevices(
+      std::vector<std::unique_ptr<BluetoothLowEnergyDeviceInfo>>* devices,
+      std::string* error) override;
+  bool EnumerateKnownBluetoothLowEnergyGattServiceDevices(
+      std::vector<std::unique_ptr<BluetoothLowEnergyDeviceInfo>>* devices,
+      std::string* error) override;
+  bool EnumerateKnownBluetoothLowEnergyServices(
+      const base::FilePath& device_path,
+      std::vector<std::unique_ptr<BluetoothLowEnergyServiceInfo>>* services,
+      std::string* error) override;
+  HRESULT ReadCharacteristicsOfAService(
+      base::FilePath& service_path,
+      const PBTH_LE_GATT_SERVICE service,
+      std::unique_ptr<BTH_LE_GATT_CHARACTERISTIC>* out_included_characteristics,
+      USHORT* out_counts) override;
+  HRESULT ReadDescriptorsOfACharacteristic(
+      base::FilePath& service_path,
+      const PBTH_LE_GATT_CHARACTERISTIC characteristic,
+      std::unique_ptr<BTH_LE_GATT_DESCRIPTOR>* out_included_descriptors,
+      USHORT* out_counts) override;
+  HRESULT ReadCharacteristicValue(
+      base::FilePath& service_path,
+      const PBTH_LE_GATT_CHARACTERISTIC characteristic,
+      std::unique_ptr<BTH_LE_GATT_CHARACTERISTIC_VALUE>* out_value) override;
+  HRESULT WriteCharacteristicValue(
+      base::FilePath& service_path,
+      const PBTH_LE_GATT_CHARACTERISTIC characteristic,
+      PBTH_LE_GATT_CHARACTERISTIC_VALUE new_value,
+      ULONG flags) override;
+  HRESULT RegisterGattEvents(
+      base::FilePath& service_path,
+      BTH_LE_GATT_EVENT_TYPE type,
+      PVOID event_parameter,
+      PFNBLUETOOTH_GATT_EVENT_CALLBACK_CORRECTED callback,
+      PVOID context,
+      BLUETOOTH_GATT_EVENT_HANDLE* out_handle) override;
+  HRESULT UnregisterGattEvent(
+      BLUETOOTH_GATT_EVENT_HANDLE event_handle) override;
+  HRESULT WriteDescriptorValue(
+      base::FilePath& service_path,
+      const PBTH_LE_GATT_DESCRIPTOR descriptor,
+      PBTH_LE_GATT_DESCRIPTOR_VALUE new_value) override;
+
+  BLEDevice* SimulateBLEDevice(std::string device_name,
+                               BLUETOOTH_ADDRESS device_address);
+  BLEDevice* GetSimulatedBLEDevice(std::string device_address);
+  void RemoveSimulatedBLEDevice(std::string device_address);
+
+  // Note: |parent_service| may be nullptr to indicate a primary service.
+  GattService* SimulateGattService(BLEDevice* device,
+                                   GattService* parent_service,
+                                   const BTH_LE_UUID& uuid);
+
+  // Note: |parent_service| may be nullptr to indicate a primary service.
+  void SimulateGattServiceRemoved(BLEDevice* device,
+                                  GattService* parent_service,
+                                  std::string attribute_handle);
+
+  // Note: |chain_of_att_handle| contains the attribute handles of the services
+  // in order from primary service to target service. The last item in
+  // |chain_of_att_handle| is the target service's attribute handle.
+  GattService* GetSimulatedGattService(
+      BLEDevice* device,
+      const std::vector<std::string>& chain_of_att_handle);
+  GattCharacteristic* SimulateGattCharacterisc(
+      std::string device_address,
+      GattService* parent_service,
+      const BTH_LE_GATT_CHARACTERISTIC& characteristic);
+  void SimulateGattCharacteriscRemove(GattService* parent_service,
+                                      std::string attribute_handle);
+  GattCharacteristic* GetSimulatedGattCharacteristic(
+      GattService* parent_service,
+      std::string attribute_handle);
+  void SimulateGattCharacteristicValue(GattCharacteristic* characteristic,
+                                       const std::vector<uint8_t>& value);
+  void SimulateCharacteristicValueChangeNotification(
+      GattCharacteristic* characteristic);
+  void SimulateGattCharacteristicSetNotifyError(
+      GattCharacteristic* characteristic,
+      HRESULT error);
+  void SimulateGattCharacteristicReadError(GattCharacteristic* characteristic,
+                                           HRESULT error);
+  void SimulateGattCharacteristicWriteError(GattCharacteristic* characteristic,
+                                            HRESULT error);
+  void RememberCharacteristicForSubsequentAction(GattService* parent_service,
+                                                 std::string attribute_handle);
+  void SimulateGattDescriptor(std::string device_address,
+                              GattCharacteristic* characteristic,
+                              const BTH_LE_UUID& uuid);
+  void AddObserver(Observer* observer);
+
+ private:
+  // Get simulated characteristic by |service_path| and |characteristic| info.
+  GattCharacteristic* GetSimulatedGattCharacteristic(
+      base::FilePath& service_path,
+      const PBTH_LE_GATT_CHARACTERISTIC characteristic);
+
+  // Generate an unique attribute handle on |device_address|.
+  USHORT GenerateAUniqueAttributeHandle(std::string device_address);
+
+  // Generate device path for the BLE device with |device_address|.
+  std::wstring GenerateBLEDevicePath(std::string device_address);
+
+  // Generate GATT service device path of the service with
+  // |service_attribute_handle|. |resident_device_path| is the BLE device this
+  // GATT service belongs to.
+  std::wstring GenerateGattServiceDevicePath(std::wstring resident_device_path,
+                                             USHORT service_attribute_handle);
+
+  // Extract device address from the device |path| generated by
+  // GenerateBLEDevicePath or GenerateGattServiceDevicePath.
+  std::wstring ExtractDeviceAddressFromDevicePath(std::wstring path);
+
+  // Extract service attribute handles from the |path| generated by
+  // GenerateGattServiceDevicePath.
+  std::vector<std::string> ExtractServiceAttributeHandlesFromDevicePath(
+      std::wstring path);
+
+  // The canonical BLE device address string format is the
+  // BluetoothDevice::CanonicalizeAddress.
+  std::string BluetoothAddressToCanonicalString(const BLUETOOTH_ADDRESS& btha);
+
+  // Table to store allocated attribute handle for a device.
+  BLEAttributeHandleTable attribute_handle_table_;
+  BLEDevicesMap simulated_devices_;
+  raw_ptr<Observer> observer_;
+  GattCharacteristicObserverTable gatt_characteristic_observers_;
+  raw_ptr<GattCharacteristic> remembered_characteristic_;
+};
+
+}  // namespace win
+}  // namespace device
+
+#endif  // DEVICE_BLUETOOTH_BLUETOOTH_LOW_ENERGY_WIN_FAKE_H_
diff --git a/device/bluetooth/bluetooth_task_manager_win.cc b/device/bluetooth/bluetooth_task_manager_win.cc
index 9d62ad34789ce..6a1e32747b6c6 100644
--- a/device/bluetooth/bluetooth_task_manager_win.cc
+++ b/device/bluetooth/bluetooth_task_manager_win.cc
@@ -225,9 +225,11 @@ BluetoothTaskManagerWin::BluetoothTaskManagerWin(
 
 BluetoothTaskManagerWin::BluetoothTaskManagerWin(
     std::unique_ptr<win::BluetoothClassicWrapper> classic_wrapper,
+    std::unique_ptr<win::BluetoothLowEnergyWrapper> le_wrapper,
     scoped_refptr<base::SequencedTaskRunner> ui_task_runner)
     : ui_task_runner_(std::move(ui_task_runner)),
-      classic_wrapper_(std::move(classic_wrapper)) {}
+      classic_wrapper_(std::move(classic_wrapper)),
+      le_wrapper_(std::move(le_wrapper)) {}
 
 BluetoothTaskManagerWin::~BluetoothTaskManagerWin() = default;
 
@@ -235,8 +237,10 @@ BluetoothTaskManagerWin::~BluetoothTaskManagerWin() = default;
 scoped_refptr<BluetoothTaskManagerWin>
 BluetoothTaskManagerWin::CreateForTesting(
     std::unique_ptr<win::BluetoothClassicWrapper> classic_wrapper,
+    std::unique_ptr<win::BluetoothLowEnergyWrapper> le_wrapper,
     scoped_refptr<base::SequencedTaskRunner> ui_task_runner) {
   return new BluetoothTaskManagerWin(std::move(classic_wrapper),
+                                     std::move(le_wrapper),
                                      std::move(ui_task_runner));
 }
 
diff --git a/device/bluetooth/bluetooth_task_manager_win.h b/device/bluetooth/bluetooth_task_manager_win.h
index 15bb5657e1eb6..d6b4eb9bee5a8 100644
--- a/device/bluetooth/bluetooth_task_manager_win.h
+++ b/device/bluetooth/bluetooth_task_manager_win.h
@@ -123,6 +123,7 @@ class DEVICE_BLUETOOTH_EXPORT BluetoothTaskManagerWin
 
   static scoped_refptr<BluetoothTaskManagerWin> CreateForTesting(
       std::unique_ptr<win::BluetoothClassicWrapper> classic_wrapper,
+      std::unique_ptr<win::BluetoothLowEnergyWrapper> le_wrapper,
       scoped_refptr<base::SequencedTaskRunner> ui_task_runner);
 
   static BluetoothUUID BluetoothLowEnergyUuidToBluetoothUuid(
@@ -215,6 +216,7 @@ class DEVICE_BLUETOOTH_EXPORT BluetoothTaskManagerWin
 
   BluetoothTaskManagerWin(
       std::unique_ptr<win::BluetoothClassicWrapper> classic_wrapper,
+      std::unique_ptr<win::BluetoothLowEnergyWrapper> le_wrapper,
       scoped_refptr<base::SequencedTaskRunner> ui_task_runner);
   virtual ~BluetoothTaskManagerWin();
 
diff --git a/device/bluetooth/test/bluetooth_test_win.cc b/device/bluetooth/test/bluetooth_test_win.cc
index f53e637d496e7..3a217073a8cb0 100644
--- a/device/bluetooth/test/bluetooth_test_win.cc
+++ b/device/bluetooth/test/bluetooth_test_win.cc
@@ -228,16 +228,35 @@ CanonicalStringToBLUETOOTH_ADDRESS(std::string device_address) {
   return win_addr;
 }
 
+// The canonical UUID string format is device::BluetoothUUID.value().
+BTH_LE_UUID CanonicalStringToBTH_LE_UUID(base::StringPiece uuid) {
+  BTH_LE_UUID win_uuid = {0};
+  if (uuid.size() == 4) {
+    win_uuid.IsShortUuid = TRUE;
+    unsigned int data[1];
+    int result = sscanf_s(uuid.data(), "%04x", &data[0]);
+    CHECK_EQ(1, result);
+    win_uuid.Value.ShortUuid = data[0];
+  } else if (uuid.size() == 36) {
+    win_uuid.IsShortUuid = FALSE;
+    win_uuid.Value.LongUuid = BluetoothUUID::GetCanonicalValueAsGUID(uuid);
+  } else {
+    CHECK(false);
+  }
+
+  return win_uuid;
+}
+
 }  // namespace
 
 BluetoothTestWin::BluetoothTestWin()
     : ui_task_runner_(new base::TestSimpleTaskRunner()),
-      bluetooth_task_runner_(new base::TestSimpleTaskRunner()) {}
-
-BluetoothTestWin::~BluetoothTestWin() = default;
+      bluetooth_task_runner_(new base::TestSimpleTaskRunner()),
+      fake_bt_le_wrapper_(nullptr) {}
+BluetoothTestWin::~BluetoothTestWin() {}
 
 bool BluetoothTestWin::PlatformSupportsLowEnergy() {
-  return false;
+  return true;
 }
 
 void BluetoothTestWin::InitWithDefaultAdapter() {
@@ -250,7 +269,7 @@ void BluetoothTestWin::InitWithDefaultAdapter() {
 
 void BluetoothTestWin::InitWithoutDefaultAdapter() {
   auto adapter = base::WrapRefCounted(new BluetoothAdapterWin());
-  adapter->InitForTest(base::DoNothing(), nullptr, ui_task_runner_,
+  adapter->InitForTest(base::DoNothing(), nullptr, nullptr, ui_task_runner_,
                        bluetooth_task_runner_);
   adapter_ = std::move(adapter);
 }
@@ -262,11 +281,16 @@ void BluetoothTestWin::InitWithFakeAdapter() {
       base::UTF8ToUTF16(kTestAdapterName),
       CanonicalStringToBLUETOOTH_ADDRESS(kTestAdapterAddress));
 
+  auto fake_bt_le_wrapper =
+      std::make_unique<win::BluetoothLowEnergyWrapperFake>();
+  fake_bt_le_wrapper_ = fake_bt_le_wrapper.get();
+  fake_bt_le_wrapper_->AddObserver(this);
+
   auto adapter = base::WrapRefCounted(new BluetoothAdapterWin());
   base::RunLoop run_loop;
-  adapter->InitForTest(run_loop.QuitClosure(),
-                       std::move(fake_bt_classic_wrapper), nullptr,
-                       bluetooth_task_runner_);
+  adapter->InitForTest(
+      run_loop.QuitClosure(), std::move(fake_bt_classic_wrapper),
+      std::move(fake_bt_le_wrapper), nullptr, bluetooth_task_runner_);
   adapter_ = std::move(adapter);
   FinishPendingTasks();
   run_loop.Run();
@@ -282,7 +306,20 @@ void BluetoothTestWin::StartLowEnergyDiscoverySession() {
 }
 
 BluetoothDevice* BluetoothTestWin::SimulateLowEnergyDevice(int device_ordinal) {
-  NOTREACHED();
+  LowEnergyDeviceData data = GetLowEnergyDeviceData(device_ordinal);
+  win::BLEDevice* simulated_device = fake_bt_le_wrapper_->SimulateBLEDevice(
+      data.name.value_or(std::string()),
+      CanonicalStringToBLUETOOTH_ADDRESS(data.address));
+  if (simulated_device != nullptr) {
+    for (const auto& uuid : data.advertised_uuids) {
+      fake_bt_le_wrapper_->SimulateGattService(
+          simulated_device, nullptr,
+          CanonicalStringToBTH_LE_UUID(uuid.canonical_value()));
+    }
+  }
+  FinishPendingTasks();
+
+  return adapter_->GetDevice(data.address);
 }
 
 std::optional<BluetoothUUID> BluetoothTestWin::GetTargetGattService(
@@ -294,87 +331,348 @@ std::optional<BluetoothUUID> BluetoothTestWin::GetTargetGattService(
 }
 
 void BluetoothTestWin::SimulateGattConnection(BluetoothDevice* device) {
-  NOTREACHED();
+  FinishPendingTasks();
+  // We don't actually attempt to discover on Windows, so fake it for testing.
+  gatt_discovery_attempts_++;
 }
 
 void BluetoothTestWin::SimulateStatusChangeToDisconnect(
     BluetoothDevice* device) {
-  NOTREACHED();
+  // OnConnectionStatusChanged events only get fired on WinRT. So this is just
+  // a mock for testing.
+  FinishPendingTasks();
 }
 
 void BluetoothTestWin::SimulateGattServicesDiscovered(
     BluetoothDevice* device,
     const std::vector<std::string>& uuids,
     const std::vector<std::string>& blocked_uuids) {
-  NOTREACHED();
+  DCHECK(blocked_uuids.empty());
+  std::string address =
+      device ? device->GetAddress() : remembered_device_address_;
+
+  win::BLEDevice* simulated_device =
+      fake_bt_le_wrapper_->GetSimulatedBLEDevice(address);
+  CHECK(simulated_device);
+
+  for (auto uuid : uuids) {
+    fake_bt_le_wrapper_->SimulateGattService(
+        simulated_device, nullptr, CanonicalStringToBTH_LE_UUID(uuid));
+  }
+
+  FinishPendingTasks();
+
+  // We still need to discover characteristics.  Wait for the appropriate method
+  // to be posted and then finish the pending tasks.
+  base::RunLoop().RunUntilIdle();
+  FinishPendingTasks();
 }
 
 void BluetoothTestWin::SimulateGattServiceRemoved(
     BluetoothRemoteGattService* service) {
-  NOTREACHED();
+  std::string device_address = service->GetDevice()->GetAddress();
+  win::BLEDevice* target_device =
+      fake_bt_le_wrapper_->GetSimulatedBLEDevice(device_address);
+  CHECK(target_device);
+
+  BluetoothRemoteGattServiceWin* win_service =
+      static_cast<BluetoothRemoteGattServiceWin*>(service);
+  std::string service_att_handle =
+      std::to_string(win_service->GetAttributeHandle());
+  fake_bt_le_wrapper_->SimulateGattServiceRemoved(target_device, nullptr,
+                                                  service_att_handle);
+
+  ForceRefreshDevice();
 }
 
 void BluetoothTestWin::SimulateGattCharacteristic(
     BluetoothRemoteGattService* service,
     const std::string& uuid,
     int properties) {
-  NOTREACHED();
+  std::string device_address = service->GetDevice()->GetAddress();
+  win::BLEDevice* target_device =
+      fake_bt_le_wrapper_->GetSimulatedBLEDevice(device_address);
+  CHECK(target_device);
+  win::GattService* target_service =
+      GetSimulatedService(target_device, service);
+  CHECK(target_service);
+
+  BTH_LE_GATT_CHARACTERISTIC win_characteristic_info;
+  win_characteristic_info.CharacteristicUuid =
+      CanonicalStringToBTH_LE_UUID(uuid);
+  win_characteristic_info.IsBroadcastable = FALSE;
+  win_characteristic_info.IsReadable = FALSE;
+  win_characteristic_info.IsWritableWithoutResponse = FALSE;
+  win_characteristic_info.IsWritable = FALSE;
+  win_characteristic_info.IsNotifiable = FALSE;
+  win_characteristic_info.IsIndicatable = FALSE;
+  win_characteristic_info.IsSignedWritable = FALSE;
+  win_characteristic_info.HasExtendedProperties = FALSE;
+  if (properties & BluetoothRemoteGattCharacteristic::PROPERTY_BROADCAST)
+    win_characteristic_info.IsBroadcastable = TRUE;
+  if (properties & BluetoothRemoteGattCharacteristic::PROPERTY_READ)
+    win_characteristic_info.IsReadable = TRUE;
+  if (properties &
+      BluetoothRemoteGattCharacteristic::PROPERTY_WRITE_WITHOUT_RESPONSE)
+    win_characteristic_info.IsWritableWithoutResponse = TRUE;
+  if (properties & BluetoothRemoteGattCharacteristic::PROPERTY_WRITE)
+    win_characteristic_info.IsWritable = TRUE;
+  if (properties & BluetoothRemoteGattCharacteristic::PROPERTY_NOTIFY)
+    win_characteristic_info.IsNotifiable = TRUE;
+  if (properties & BluetoothRemoteGattCharacteristic::PROPERTY_INDICATE)
+    win_characteristic_info.IsIndicatable = TRUE;
+  if (properties &
+      BluetoothRemoteGattCharacteristic::PROPERTY_AUTHENTICATED_SIGNED_WRITES) {
+    win_characteristic_info.IsSignedWritable = TRUE;
+  }
+  if (properties &
+      BluetoothRemoteGattCharacteristic::PROPERTY_EXTENDED_PROPERTIES)
+    win_characteristic_info.HasExtendedProperties = TRUE;
+
+  fake_bt_le_wrapper_->SimulateGattCharacterisc(device_address, target_service,
+                                                win_characteristic_info);
+
+  ForceRefreshDevice();
 }
 
 void BluetoothTestWin::SimulateGattCharacteristicRemoved(
     BluetoothRemoteGattService* service,
     BluetoothRemoteGattCharacteristic* characteristic) {
-  NOTREACHED();
+  CHECK(service);
+  CHECK(characteristic);
+
+  std::string device_address = service->GetDevice()->GetAddress();
+  win::GattService* target_service = GetSimulatedService(
+      fake_bt_le_wrapper_->GetSimulatedBLEDevice(device_address), service);
+  CHECK(target_service);
+
+  std::string characteristic_att_handle = std::to_string(
+      static_cast<BluetoothRemoteGattCharacteristicWin*>(characteristic)
+          ->GetAttributeHandle());
+  fake_bt_le_wrapper_->SimulateGattCharacteriscRemove(
+      target_service, characteristic_att_handle);
+
+  ForceRefreshDevice();
+}
+
+void BluetoothTestWin::RememberCharacteristicForSubsequentAction(
+    BluetoothRemoteGattCharacteristic* characteristic) {
+  CHECK(characteristic);
+  BluetoothRemoteGattCharacteristicWin* win_characteristic =
+      static_cast<BluetoothRemoteGattCharacteristicWin*>(characteristic);
+
+  std::string device_address =
+      win_characteristic->GetService()->GetDevice()->GetAddress();
+  win::BLEDevice* target_device =
+      fake_bt_le_wrapper_->GetSimulatedBLEDevice(device_address);
+  CHECK(target_device);
+  win::GattService* target_service =
+      GetSimulatedService(target_device, win_characteristic->GetService());
+  CHECK(target_service);
+  fake_bt_le_wrapper_->RememberCharacteristicForSubsequentAction(
+      target_service, std::to_string(win_characteristic->GetAttributeHandle()));
 }
 
 void BluetoothTestWin::SimulateGattCharacteristicRead(
     BluetoothRemoteGattCharacteristic* characteristic,
     const std::vector<uint8_t>& value) {
-  NOTREACHED();
+  win::GattCharacteristic* target_simulated_characteristic = nullptr;
+  if (characteristic) {
+    target_simulated_characteristic =
+        GetSimulatedCharacteristic(characteristic);
+  }
+
+  fake_bt_le_wrapper_->SimulateGattCharacteristicValue(
+      target_simulated_characteristic, value);
+
+  RunPendingTasksUntilCallback();
 }
 
 void BluetoothTestWin::SimulateGattCharacteristicReadError(
     BluetoothRemoteGattCharacteristic* characteristic,
     BluetoothGattService::GattErrorCode error_code) {
-  NOTREACHED();
+  win::GattCharacteristic* target_characteristic =
+      GetSimulatedCharacteristic(characteristic);
+  CHECK(target_characteristic);
+  HRESULT hr = HRESULT_FROM_WIN32(ERROR_SEM_TIMEOUT);
+  if (error_code == BluetoothGattService::GattErrorCode::kInvalidLength)
+    hr = E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH;
+  fake_bt_le_wrapper_->SimulateGattCharacteristicReadError(
+      target_characteristic, hr);
+
+  FinishPendingTasks();
 }
 
 void BluetoothTestWin::SimulateGattCharacteristicWrite(
     BluetoothRemoteGattCharacteristic* characteristic) {
-  NOTREACHED();
+  RunPendingTasksUntilCallback();
 }
 
 void BluetoothTestWin::SimulateGattCharacteristicWriteError(
     BluetoothRemoteGattCharacteristic* characteristic,
     BluetoothGattService::GattErrorCode error_code) {
-  NOTREACHED();
+  win::GattCharacteristic* target_characteristic =
+      GetSimulatedCharacteristic(characteristic);
+  CHECK(target_characteristic);
+  HRESULT hr = HRESULT_FROM_WIN32(ERROR_SEM_TIMEOUT);
+  if (error_code == BluetoothGattService::GattErrorCode::kInvalidLength)
+    hr = E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH;
+  fake_bt_le_wrapper_->SimulateGattCharacteristicWriteError(
+      target_characteristic, hr);
+
+  FinishPendingTasks();
+}
+
+void BluetoothTestWin::RememberDeviceForSubsequentAction(
+    BluetoothDevice* device) {
+  remembered_device_address_ = device->GetAddress();
 }
 
 void BluetoothTestWin::DeleteDevice(BluetoothDevice* device) {
-  NOTREACHED();
+  CHECK(device);
+  fake_bt_le_wrapper_->RemoveSimulatedBLEDevice(device->GetAddress());
+  FinishPendingTasks();
 }
 
 void BluetoothTestWin::SimulateGattDescriptor(
     BluetoothRemoteGattCharacteristic* characteristic,
     const std::string& uuid) {
-  NOTREACHED();
+  win::GattCharacteristic* target_characteristic =
+      GetSimulatedCharacteristic(characteristic);
+  CHECK(target_characteristic);
+  fake_bt_le_wrapper_->SimulateGattDescriptor(
+      characteristic->GetService()->GetDevice()->GetAddress(),
+      target_characteristic, CanonicalStringToBTH_LE_UUID(uuid));
+  ForceRefreshDevice();
 }
 
 void BluetoothTestWin::SimulateGattNotifySessionStarted(
     BluetoothRemoteGattCharacteristic* characteristic) {
-  NOTREACHED();
+  FinishPendingTasks();
 }
 
 void BluetoothTestWin::SimulateGattNotifySessionStartError(
     BluetoothRemoteGattCharacteristic* characteristic,
     BluetoothGattService::GattErrorCode error_code) {
-  NOTREACHED();
+  win::GattCharacteristic* simulated_characteristic =
+      GetSimulatedCharacteristic(characteristic);
+  DCHECK(simulated_characteristic);
+  DCHECK(error_code == BluetoothGattService::GattErrorCode::kUnknown);
+  fake_bt_le_wrapper_->SimulateGattCharacteristicSetNotifyError(
+      simulated_characteristic, E_BLUETOOTH_ATT_UNKNOWN_ERROR);
 }
 
 void BluetoothTestWin::SimulateGattCharacteristicChanged(
     BluetoothRemoteGattCharacteristic* characteristic,
     const std::vector<uint8_t>& value) {
-  NOTREACHED();
+  win::GattCharacteristic* target_simulated_characteristic = nullptr;
+  if (characteristic) {
+    target_simulated_characteristic =
+        GetSimulatedCharacteristic(characteristic);
+  }
+
+  fake_bt_le_wrapper_->SimulateGattCharacteristicValue(
+      target_simulated_characteristic, value);
+  fake_bt_le_wrapper_->SimulateCharacteristicValueChangeNotification(
+      target_simulated_characteristic);
+
+  FinishPendingTasks();
+}
+
+void BluetoothTestWin::OnReadGattCharacteristicValue() {
+  gatt_read_characteristic_attempts_++;
+}
+
+void BluetoothTestWin::OnWriteGattCharacteristicValue(
+    const PBTH_LE_GATT_CHARACTERISTIC_VALUE value) {
+  gatt_write_characteristic_attempts_++;
+  last_write_value_.clear();
+  for (ULONG i = 0; i < value->DataSize; i++)
+    last_write_value_.push_back(value->Data[i]);
+}
+
+void BluetoothTestWin::OnStartCharacteristicNotification() {
+  gatt_notify_characteristic_attempts_++;
+}
+
+void BluetoothTestWin::OnWriteGattDescriptorValue(
+    const std::vector<uint8_t>& value) {
+  gatt_write_descriptor_attempts_++;
+  last_write_value_.assign(value.begin(), value.end());
+}
+
+win::GattService* BluetoothTestWin::GetSimulatedService(
+    win::BLEDevice* device,
+    BluetoothRemoteGattService* service) {
+  CHECK(device);
+  CHECK(service);
+
+  std::vector<std::string> chain_of_att_handles;
+  BluetoothRemoteGattServiceWin* win_service =
+      static_cast<BluetoothRemoteGattServiceWin*>(service);
+  chain_of_att_handles.insert(
+      chain_of_att_handles.begin(),
+      std::to_string(win_service->GetAttributeHandle()));
+  win::GattService* simulated_service =
+      fake_bt_le_wrapper_->GetSimulatedGattService(device,
+                                                   chain_of_att_handles);
+  CHECK(simulated_service);
+  return simulated_service;
+}
+
+win::GattCharacteristic* BluetoothTestWin::GetSimulatedCharacteristic(
+    BluetoothRemoteGattCharacteristic* characteristic) {
+  CHECK(characteristic);
+  BluetoothRemoteGattCharacteristicWin* win_characteristic =
+      static_cast<BluetoothRemoteGattCharacteristicWin*>(characteristic);
+
+  std::string device_address =
+      win_characteristic->GetService()->GetDevice()->GetAddress();
+  win::BLEDevice* target_device =
+      fake_bt_le_wrapper_->GetSimulatedBLEDevice(device_address);
+  if (target_device == nullptr)
+    return nullptr;
+  win::GattService* target_service =
+      GetSimulatedService(target_device, win_characteristic->GetService());
+  if (target_service == nullptr)
+    return nullptr;
+  return fake_bt_le_wrapper_->GetSimulatedGattCharacteristic(
+      target_service, std::to_string(win_characteristic->GetAttributeHandle()));
+}
+
+void BluetoothTestWin::RunPendingTasksUntilCallback() {
+  base::circular_deque<base::TestPendingTask> tasks =
+      bluetooth_task_runner_->TakePendingTasks();
+  int original_callback_count = callback_count_;
+  int original_error_callback_count = error_callback_count_;
+  do {
+    base::TestPendingTask task = std::move(tasks.front());
+    tasks.pop_front();
+    std::move(task.task).Run();
+    base::RunLoop().RunUntilIdle();
+  } while (tasks.size() && callback_count_ == original_callback_count &&
+           error_callback_count_ == original_error_callback_count);
+
+  // Put the rest of pending tasks back to Bluetooth task runner.
+  for (auto& task : tasks) {
+    if (task.delay.is_zero()) {
+      bluetooth_task_runner_->PostTask(task.location, std::move(task.task));
+    } else {
+      bluetooth_task_runner_->PostDelayedTask(task.location,
+                                              std::move(task.task), task.delay);
+    }
+  }
+}
+
+void BluetoothTestWin::ForceRefreshDevice() {
+  auto* adapter_win = static_cast<BluetoothAdapterWin*>(adapter_.get());
+  adapter_win->force_update_device_for_test_ = true;
+  FinishPendingTasks();
+  adapter_win->force_update_device_for_test_ = false;
+
+  // The characteristics still need to be discovered.
+  base::RunLoop().RunUntilIdle();
+  FinishPendingTasks();
 }
 
 void BluetoothTestWin::FinishPendingTasks() {
@@ -407,10 +705,6 @@ bool BluetoothTestWinrt::UsesNewGattSessionHandling() const {
   return GetParam().uncached_gatt_discovery_for_gatt_connection;
 }
 
-bool BluetoothTestWinrt::PlatformSupportsLowEnergy() {
-  return true;
-}
-
 void BluetoothTestWinrt::InitWithDefaultAdapter() {
   base::RunLoop run_loop;
   auto adapter = base::WrapRefCounted(new BluetoothAdapterWinrt());
diff --git a/device/bluetooth/test/bluetooth_test_win.h b/device/bluetooth/test/bluetooth_test_win.h
index 6ce67cbcd9d76..bac65663329f7 100644
--- a/device/bluetooth/test/bluetooth_test_win.h
+++ b/device/bluetooth/test/bluetooth_test_win.h
@@ -19,13 +19,15 @@
 #include "base/test/test_simple_task_runner.h"
 #include "base/win/scoped_winrt_initializer.h"
 #include "device/bluetooth/bluetooth_classic_win_fake.h"
+#include "device/bluetooth/bluetooth_low_energy_win_fake.h"
 #include "device/bluetooth/bluetooth_task_manager_win.h"
 #include "device/bluetooth/test/bluetooth_test.h"
 
 namespace device {
 
 // Windows implementation of BluetoothTestBase.
-class BluetoothTestWin : public BluetoothTestBase {
+class BluetoothTestWin : public BluetoothTestBase,
+                         public win::BluetoothLowEnergyWrapperFake::Observer {
  public:
   BluetoothTestWin();
   ~BluetoothTestWin() override;
@@ -53,6 +55,8 @@ class BluetoothTestWin : public BluetoothTestBase {
   void SimulateGattCharacteristicRemoved(
       BluetoothRemoteGattService* service,
       BluetoothRemoteGattCharacteristic* characteristic) override;
+  void RememberCharacteristicForSubsequentAction(
+      BluetoothRemoteGattCharacteristic* characteristic) override;
   void SimulateGattCharacteristicRead(
       BluetoothRemoteGattCharacteristic* characteristic,
       const std::vector<uint8_t>& value) override;
@@ -64,6 +68,7 @@ class BluetoothTestWin : public BluetoothTestBase {
   void SimulateGattCharacteristicWriteError(
       BluetoothRemoteGattCharacteristic* characteristic,
       BluetoothGattService::GattErrorCode error_code) override;
+  void RememberDeviceForSubsequentAction(BluetoothDevice* device) override;
   void DeleteDevice(BluetoothDevice* device) override;
   void SimulateGattDescriptor(BluetoothRemoteGattCharacteristic* characteristic,
                               const std::string& uuid) override;
@@ -76,12 +81,32 @@ class BluetoothTestWin : public BluetoothTestBase {
       BluetoothRemoteGattCharacteristic* characteristic,
       const std::vector<uint8_t>& value) override;
 
+  // win::BluetoothLowEnergyWrapperFake::Observer overrides.
+  void OnReadGattCharacteristicValue() override;
+  void OnWriteGattCharacteristicValue(
+      const PBTH_LE_GATT_CHARACTERISTIC_VALUE value) override;
+  void OnStartCharacteristicNotification() override;
+  void OnWriteGattDescriptorValue(const std::vector<uint8_t>& value) override;
+
  private:
   scoped_refptr<base::TestSimpleTaskRunner> ui_task_runner_;
   scoped_refptr<base::TestSimpleTaskRunner> bluetooth_task_runner_;
 
+  raw_ptr<win::BluetoothLowEnergyWrapperFake> fake_bt_le_wrapper_;
+
+  // This is used for retaining access to a single deleted device.
+  std::string remembered_device_address_;
+
   void AdapterInitCallback();
+  win::GattService* GetSimulatedService(win::BLEDevice* device,
+                                        BluetoothRemoteGattService* service);
+  win::GattCharacteristic* GetSimulatedCharacteristic(
+      BluetoothRemoteGattCharacteristic* characteristic);
 
+  // Run pending Bluetooth tasks until the first callback that the test fixture
+  // tracks is called.
+  void RunPendingTasksUntilCallback();
+  void ForceRefreshDevice();
   void FinishPendingTasks();
 };
 
@@ -133,7 +158,6 @@ class BluetoothTestWinrt
   void SimulateSpuriousRadioStateChangedEvent();
 
   // BluetoothTestBase:
-  bool PlatformSupportsLowEnergy() override;
   void InitWithDefaultAdapter() override;
   void InitWithoutDefaultAdapter() override;
   void InitWithFakeAdapter() override;
