

diff --git a/content/web_test/browser/web_test_content_browser_client.cc b/content/web_test/browser/web_test_content_browser_client.cc
index 6cf5db64b526c..f191959c53352 100644
--- a/content/web_test/browser/web_test_content_browser_client.cc
+++ b/content/web_test/browser/web_test_content_browser_client.cc
@@ -418,11 +418,14 @@ void WebTestContentBrowserClient::AppendExtraCommandLineSwitches(
                                                             child_process_id);
 
   static const char* const kForwardSwitches[] = {
-      // Switches from web_test_switches.h that are used in the renderer.
-      switches::kEnableAccelerated2DCanvas,
-      switches::kEnableFontAntialiasing,
-      switches::kAlwaysUseComplexText,
-      switches::kStableReleaseMode,
+    // Switches from web_test_switches.h that are used in the renderer.
+    switches::kEnableAccelerated2DCanvas,
+    switches::kEnableFontAntialiasing,
+    switches::kAlwaysUseComplexText,
+    switches::kStableReleaseMode,
+#if BUILDFLAG(IS_WIN)
+    switches::kRegisterFontFiles,
+#endif
   };
 
   command_line->CopySwitchesFrom(*base::CommandLine::ForCurrentProcess(),
diff --git a/content/web_test/common/web_test_switches.cc b/content/web_test/common/web_test_switches.cc
index 01b29ddff1694..58b6aeeff8e46 100644
--- a/content/web_test/common/web_test_switches.cc
+++ b/content/web_test/common/web_test_switches.cc
@@ -4,6 +4,10 @@
 
 #include "content/web_test/common/web_test_switches.h"
 
+#include "base/command_line.h"
+#include "base/strings/string_split.h"
+#include "build/build_config.h"
+
 namespace switches {
 
 // Allow access to external pages during web tests.
@@ -55,4 +59,23 @@ const char kStableReleaseMode[] = "stable-release-mode";
 // kRunWebTests is set.
 const char kDisableHeadlessMode[] = "disable-headless-mode";
 
+#if BUILDFLAG(IS_WIN)
+// Registers additional font files on Windows (for fonts outside the usual
+// %WINDIR%\Fonts location). Multiple files can be used by separating them
+// with a semicolon (;).
+const char kRegisterFontFiles[] = "register-font-files";
+
+std::vector<std::string> GetSideloadFontFiles() {
+  std::vector<std::string> files;
+  const base::CommandLine& command_line =
+      *base::CommandLine::ForCurrentProcess();
+  if (command_line.HasSwitch(switches::kRegisterFontFiles)) {
+    files = base::SplitString(
+        command_line.GetSwitchValueASCII(switches::kRegisterFontFiles), ";",
+        base::TRIM_WHITESPACE, base::SPLIT_WANT_ALL);
+  }
+  return files;
+}
+#endif
+
 }  // namespace switches
diff --git a/content/web_test/common/web_test_switches.h b/content/web_test/common/web_test_switches.h
index 03ce084bd3397..87a3bf4416c60 100644
--- a/content/web_test/common/web_test_switches.h
+++ b/content/web_test/common/web_test_switches.h
@@ -5,6 +5,11 @@
 #ifndef CONTENT_WEB_TEST_COMMON_WEB_TEST_SWITCHES_H_
 #define CONTENT_WEB_TEST_COMMON_WEB_TEST_SWITCHES_H_
 
+#include <string>
+#include <vector>
+
+#include "build/build_config.h"
+
 namespace switches {
 
 extern const char kAllowExternalPages[];
@@ -20,6 +25,14 @@ extern const char kDisableHeadlessMode[];
 extern const char kDisableAutoWPTOriginIsolation[];
 extern const char kResetBrowsingInstanceBetweenTests[];
 
+#if BUILDFLAG(IS_WIN)
+extern const char kRegisterFontFiles[];
+
+// Returns list of extra font files to be made accessible to the renderer, that
+// are specified via kRegisterFontFiles.
+std::vector<std::string> GetSideloadFontFiles();
+#endif
+
 }  // namespace switches
 
 #endif  // CONTENT_WEB_TEST_COMMON_WEB_TEST_SWITCHES_H_
diff --git a/content/web_test/renderer/web_test_content_renderer_client.cc b/content/web_test/renderer/web_test_content_renderer_client.cc
index b1783009bb377..0b1ea5a63a76a 100644
--- a/content/web_test/renderer/web_test_content_renderer_client.cc
+++ b/content/web_test/renderer/web_test_content_renderer_client.cc
@@ -36,6 +36,12 @@
 #include "ui/gfx/icc_profile.h"
 #include "v8/include/v8.h"
 
+#if BUILDFLAG(IS_WIN)
+#include "third_party/blink/public/web/win/web_font_rendering.h"
+#include "third_party/skia/include/core/SkFontMgr.h"
+#include "third_party/skia/include/ports/SkTypeface_win.h"
+#endif
+
 #if BUILDFLAG(IS_FUCHSIA) || BUILDFLAG(IS_APPLE)
 #include "skia/ext/test_fonts.h"
 #endif
diff --git a/third_party/blink/public/web/win/web_font_rendering.h b/third_party/blink/public/web/win/web_font_rendering.h
index 3addef2393409..cbcc4b4b3692d 100644
--- a/third_party/blink/public/web/win/web_font_rendering.h
+++ b/third_party/blink/public/web/win/web_font_rendering.h
@@ -11,6 +11,7 @@
 #include "third_party/skia/include/core/SkRefCnt.h"
 
 class SkFontMgr;
+class SkTypeface;
 
 namespace blink {
 
@@ -26,6 +27,7 @@ class BLINK_EXPORT WebFontRendering {
   // alive until the process exits.
   static void SetFontRenderingClient(WebFontRenderingClient*);
   static WebFontPrewarmer* GetFontPrewarmer();
+  static void AddSideloadedFontForTesting(sk_sp<SkTypeface>);
   static void SetMenuFontMetrics(const WebString& family_name,
                                  int32_t font_height);
   static void SetSmallCaptionFontMetrics(const WebString& family_name,
diff --git a/third_party/blink/renderer/core/layout/web_font_rendering_win.cc b/third_party/blink/renderer/core/layout/web_font_rendering_win.cc
index 7f491246d1607..633e553052e9b 100644
--- a/third_party/blink/renderer/core/layout/web_font_rendering_win.cc
+++ b/third_party/blink/renderer/core/layout/web_font_rendering_win.cc
@@ -31,6 +31,11 @@ void WebFontRendering::SetFontRenderingClient(
   FontCache::SetFontPrewarmer(rendering_client);
 }
 
+// static
+void WebFontRendering::AddSideloadedFontForTesting(sk_sp<SkTypeface> typeface) {
+  FontCache::AddSideloadedFontForTesting(std::move(typeface));
+}
+
 // static
 void WebFontRendering::SetMenuFontMetrics(const WebString& family_name,
                                           int32_t font_height) {
diff --git a/third_party/blink/renderer/platform/fonts/font_cache.h b/third_party/blink/renderer/platform/fonts/font_cache.h
index 9b7727322cc9a..41a7588aaeb21 100644
--- a/third_party/blink/renderer/platform/fonts/font_cache.h
+++ b/third_party/blink/renderer/platform/fonts/font_cache.h
@@ -198,6 +198,7 @@ class PLATFORM_EXPORT FontCache final {
     antialiased_text_enabled_ = enabled;
   }
   static void SetLCDTextEnabled(bool enabled) { lcd_text_enabled_ = enabled; }
+  static void AddSideloadedFontForTesting(sk_sp<SkTypeface>);
   // Functions to cache and retrieve the system font metrics.
   static void SetMenuFontMetrics(const AtomicString& family_name,
                                  int32_t font_height);
@@ -349,6 +350,8 @@ class PLATFORM_EXPORT FontCache final {
   static WebFontPrewarmer* prewarmer_;
   static bool antialiased_text_enabled_;
   static bool lcd_text_enabled_;
+  static HashMap<String, sk_sp<SkTypeface>, CaseFoldingHashTraits<String>>*
+      sideloaded_fonts_;
   // The system font metrics cache.
   static AtomicString* menu_font_family_name_;
   static int32_t menu_font_height_;
diff --git a/third_party/blink/renderer/platform/fonts/skia/font_cache_skia.cc b/third_party/blink/renderer/platform/fonts/skia/font_cache_skia.cc
index 47bb8314863b0..b6ae01e5b3405 100644
--- a/third_party/blink/renderer/platform/fonts/skia/font_cache_skia.cc
+++ b/third_party/blink/renderer/platform/fonts/skia/font_cache_skia.cc
@@ -230,6 +230,15 @@ sk_sp<SkTypeface> FontCache::CreateTypeface(
   }
 #endif  // BUILDFLAG(IS_ANDROID)
 
+#if BUILDFLAG(IS_WIN)
+  // TODO(vmpstr): Deal with paint typeface here.
+  if (sideloaded_fonts_) {
+    auto sideloaded_font = sideloaded_fonts_->find(name.c_str());
+    if (sideloaded_font != sideloaded_fonts_->end())
+      return sideloaded_font->value;
+  }
+#endif
+
   // TODO(https://crbug.com/1425390: Assign FontCache::font_manager_ in the
   // ctor.
   auto font_manager = font_manager_ ? font_manager_ : skia::DefaultFontMgr();
diff --git a/third_party/blink/renderer/platform/fonts/win/font_cache_skia_win.cc b/third_party/blink/renderer/platform/fonts/win/font_cache_skia_win.cc
index 1a962c51f69ce..f2cf0697dbdd7 100644
--- a/third_party/blink/renderer/platform/fonts/win/font_cache_skia_win.cc
+++ b/third_party/blink/renderer/platform/fonts/win/font_cache_skia_win.cc
@@ -64,6 +64,10 @@ namespace blink {
 
 WebFontPrewarmer* FontCache::prewarmer_ = nullptr;
 
+using SideloadedFontsMap =
+    HashMap<String, sk_sp<SkTypeface>, CaseFoldingHashTraits<String>>;
+SideloadedFontsMap* FontCache::sideloaded_fonts_ = nullptr;
+
 // Cached system font metrics.
 AtomicString* FontCache::menu_font_family_name_ = nullptr;
 int32_t FontCache::menu_font_height_ = 0;
@@ -81,6 +85,45 @@ int32_t EnsureMinimumFontHeightIfNeeded(int32_t font_height) {
   return ((font_height < 12.0f) && (GetACP() == 936)) ? 12.0f : font_height;
 }
 
+// Test-only code for matching sideloaded fonts by postscript name. This
+// implementation is incomplete, as it does not match the full font name and
+// only uses FT_Get_Postscript_Name, which returns an ASCII font name. This is
+// intended to pass tests on Windows, where for example src: local(Ahem) is used
+// in @font-face CSS declarations.  Skia does not expose getAdvancedMetrics, so
+// we use FreeType here to parse the font's postscript name.
+sk_sp<SkTypeface> FindUniqueFontNameFromSideloadedFonts(
+    const String& font_name,
+    SideloadedFontsMap* sideloaded_fonts) {
+  CHECK(sideloaded_fonts);
+  FT_Library library;
+  FT_Init_FreeType(&library);
+
+  sk_sp<SkTypeface> return_typeface(nullptr);
+  for (auto& sideloaded_font : sideloaded_fonts->Values()) {
+    // Open ttc index zero as we can assume that we do not sideload TrueType
+    // collections.
+    std::unique_ptr<SkStreamAsset> typeface_stream(
+        sideloaded_font->openStream(nullptr));
+    CHECK(typeface_stream->getMemoryBase());
+    std::string font_family_name;
+    FT_Face font_face;
+    FT_Open_Args open_args = {
+        FT_OPEN_MEMORY,
+        reinterpret_cast<const FT_Byte*>(typeface_stream->getMemoryBase()),
+        static_cast<FT_Long>(typeface_stream->getLength())};
+    CHECK_EQ(FT_Err_Ok, FT_Open_Face(library, &open_args, 0, &font_face));
+    font_family_name = FT_Get_Postscript_Name(font_face);
+    FT_Done_Face(font_face);
+
+    if (font_name.FoldCase() == String(font_family_name.c_str()).FoldCase()) {
+      return_typeface = sideloaded_font;
+      break;
+    }
+  }
+  FT_Done_FreeType(library);
+  return return_typeface;
+}
+
 static const char kChineseSimplified[] = "zh-Hant";
 
 // For Windows out-of-process fallback calls, there is a limiation: only one
@@ -132,6 +175,17 @@ void FontCache::PrewarmFamily(const AtomicString& family_name) {
   prewarmer_->PrewarmFamily(family_name);
 }
 
+// static
+void FontCache::AddSideloadedFontForTesting(sk_sp<SkTypeface> typeface) {
+  if (!sideloaded_fonts_) {
+    sideloaded_fonts_ = new SideloadedFontsMap();
+  }
+  SkString name;
+  typeface->getFamilyName(&name);
+  String name_wtf(name.c_str());
+  sideloaded_fonts_->Set(name_wtf, std::move(typeface));
+}
+
 //static
 void FontCache::SetSystemFontFamily(const AtomicString&) {
   // TODO(https://crbug.com/808221) Use this instead of
@@ -501,6 +555,11 @@ const FontPlatformData* FontCache::CreateFontPlatformData(
       RuntimeEnabledFeatures::FontSrcLocalMatchingEnabled()) {
     typeface = CreateTypefaceFromUniqueName(creation_params);
 
+    if (!typeface && sideloaded_fonts_) {
+      typeface = FindUniqueFontNameFromSideloadedFonts(creation_params.Family(),
+                                                       sideloaded_fonts_);
+    }
+
     // We do not need to try any heuristic around the font name, as below, for
     // family matching.
     if (!typeface)
