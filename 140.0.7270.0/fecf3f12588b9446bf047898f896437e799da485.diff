

diff --git a/base/native_library_win.cc b/base/native_library_win.cc
index 9a5431e764cfa..2ada6f09bf277 100644
--- a/base/native_library_win.cc
+++ b/base/native_library_win.cc
@@ -34,11 +34,11 @@ enum LoadLibraryResult {
   // LoadLibraryW is used but fails as well.
   FAIL_AND_FAIL,
   // LoadLibraryExW API/flags are unavailabe to use, then LoadLibraryW is used
-  // and succeeds. Pre-Win10-only.
-  UNAVAILABLE_AND_SUCCEED_OBSOLETE,
+  // and succeeds.
+  UNAVAILABLE_AND_SUCCEED,
   // LoadLibraryExW API/flags are unavailabe to use, then LoadLibraryW is used
-  // but fails.  Pre-Win10-only.
-  UNAVAILABLE_AND_FAIL_OBSOLETE,
+  // but fails.
+  UNAVAILABLE_AND_FAIL,
   // Add new items before this one, always keep this one at the end.
   END
 };
@@ -49,11 +49,39 @@ void LogLibrarayLoadResultToUMA(LoadLibraryResult result) {
                             LoadLibraryResult::END);
 }
 
+// A helper method to check if AddDllDirectory method is available, thus
+// LOAD_LIBRARY_SEARCH_* flags are available on systems.
+bool AreSearchFlagsAvailable() {
+  // The LOAD_LIBRARY_SEARCH_* flags are available on systems that have
+  // KB2533623 installed. To determine whether the flags are available, use
+  // GetProcAddress to get the address of the AddDllDirectory,
+  // RemoveDllDirectory, or SetDefaultDllDirectories function. If GetProcAddress
+  // succeeds, the LOAD_LIBRARY_SEARCH_* flags can be used with LoadLibraryEx.
+  // https://msdn.microsoft.com/en-us/library/windows/desktop/ms684179(v=vs.85).aspx
+  // The LOAD_LIBRARY_SEARCH_* flags are used in the LoadNativeLibraryHelper
+  // method.
+  static const auto add_dll_dir_func =
+      reinterpret_cast<decltype(::AddDllDirectory)*>(
+          GetProcAddress(GetModuleHandle(L"kernel32.dll"), "AddDllDirectory"));
+  return !!add_dll_dir_func;
+}
+
 // A helper method to encode the library loading result to enum
 // LoadLibraryResult.
-LoadLibraryResult GetLoadLibraryResult(bool has_load_library_succeeded) {
-  return has_load_library_succeeded ? LoadLibraryResult::FAIL_AND_SUCCEED
-                                    : LoadLibraryResult::FAIL_AND_FAIL;
+LoadLibraryResult GetLoadLibraryResult(bool are_search_flags_available,
+                                       bool has_load_library_succeeded) {
+  LoadLibraryResult result;
+  if (are_search_flags_available) {
+    if (has_load_library_succeeded)
+      result = LoadLibraryResult::FAIL_AND_SUCCEED;
+    else
+      result = LoadLibraryResult::FAIL_AND_FAIL;
+  } else if (has_load_library_succeeded) {
+    result = LoadLibraryResult::UNAVAILABLE_AND_SUCCEED;
+  } else {
+    result = LoadLibraryResult::UNAVAILABLE_AND_FAIL;
+  }
+  return result;
 }
 
 NativeLibrary LoadNativeLibraryHelper(const FilePath& library_path,
@@ -68,26 +96,28 @@ NativeLibrary LoadNativeLibraryHelper(const FilePath& library_path,
   // while it holds the LoaderLock.
   SCOPED_MAY_LOAD_LIBRARY_AT_BACKGROUND_PRIORITY_REPEATEDLY();
 
-  HMODULE module_handle = nullptr;
+  HMODULE module = nullptr;
 
   // This variable records the library loading result.
   LoadLibraryResult load_library_result = LoadLibraryResult::SUCCEED;
 
-  // LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR flag is needed to search the library
-  // directory as the library may have dependencies on DLLs in this
-  // directory.
-  module_handle = ::LoadLibraryExW(
-      library_path.value().c_str(), nullptr,
-      LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR | LOAD_LIBRARY_SEARCH_DEFAULT_DIRS);
-  // If LoadLibraryExW succeeds, log this metric and return.
-  if (module_handle) {
-    LogLibrarayLoadResultToUMA(load_library_result);
-    return module_handle;
-  }
-  // GetLastError() needs to be called immediately after
-  // LoadLibraryExW call.
-  if (error) {
-    error->code = ::GetLastError();
+  bool are_search_flags_available = AreSearchFlagsAvailable();
+  if (are_search_flags_available) {
+    // LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR flag is needed to search the library
+    // directory as the library may have dependencies on DLLs in this
+    // directory.
+    module = ::LoadLibraryExW(
+        library_path.value().c_str(), nullptr,
+        LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR | LOAD_LIBRARY_SEARCH_DEFAULT_DIRS);
+    // If LoadLibraryExW succeeds, log this metric and return.
+    if (module) {
+      LogLibrarayLoadResultToUMA(load_library_result);
+      return module;
+    }
+    // GetLastError() needs to be called immediately after
+    // LoadLibraryExW call.
+    if (error)
+      error->code = ::GetLastError();
   }
 
   // If LoadLibraryExW API/flags are unavailable or API call fails, try
@@ -104,21 +134,21 @@ NativeLibrary LoadNativeLibraryHelper(const FilePath& library_path,
       restore_directory = true;
     }
   }
-  module_handle = ::LoadLibraryW(library_path.value().c_str());
+  module = ::LoadLibraryW(library_path.value().c_str());
 
   // GetLastError() needs to be called immediately after LoadLibraryW call.
-  if (!module_handle && error) {
+  if (!module && error)
     error->code = ::GetLastError();
-  }
 
   if (restore_directory) {
     SetCurrentDirectory(current_directory);
   }
 
   // Get the library loading result and log it to UMA.
-  LogLibrarayLoadResultToUMA(GetLoadLibraryResult(!!module_handle));
+  LogLibrarayLoadResultToUMA(
+      GetLoadLibraryResult(are_search_flags_available, !!module));
 
-  return module_handle;
+  return module;
 }
 
 NativeLibrary LoadSystemLibraryHelper(const FilePath& library_path,
@@ -129,14 +159,18 @@ NativeLibrary LoadSystemLibraryHelper(const FilePath& library_path,
   BOOL module_found =
       ::GetModuleHandleExW(0, library_path.value().c_str(), &module);
   if (!module_found) {
-    module = ::LoadLibraryExW(library_path.value().c_str(), nullptr,
-                              LOAD_LIBRARY_SEARCH_SYSTEM32);
+    bool are_search_flags_available = AreSearchFlagsAvailable();
+    // Prefer LOAD_LIBRARY_SEARCH_SYSTEM32 to avoid DLL preloading attacks.
+    DWORD flags = are_search_flags_available ? LOAD_LIBRARY_SEARCH_SYSTEM32
+                                             : LOAD_WITH_ALTERED_SEARCH_PATH;
+    module = ::LoadLibraryExW(library_path.value().c_str(), nullptr, flags);
 
     if (!module && error) {
       error->code = ::GetLastError();
     }
 
-    LogLibrarayLoadResultToUMA(GetLoadLibraryResult(!!module));
+    LogLibrarayLoadResultToUMA(
+        GetLoadLibraryResult(are_search_flags_available, !!module));
   }
 
   return module;
