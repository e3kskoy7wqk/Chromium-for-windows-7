

diff --git a/chrome/installer/setup/install.cc b/chrome/installer/setup/install.cc
index 26d3bab930e68..c14608e55811c 100644
--- a/chrome/installer/setup/install.cc
+++ b/chrome/installer/setup/install.cc
@@ -28,6 +28,7 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/time/time.h"
 #include "base/win/shortcut.h"
+#include "base/win/windows_version.h"
 #include "chrome/install_static/install_details.h"
 #include "chrome/install_static/install_util.h"
 #include "chrome/installer/setup/install_params.h"
@@ -134,6 +135,7 @@ void ExecuteAndLogShortcutOperation(
   // For Start Menu shortcut creation on versions of Win10 that support
   // pinning, record whether or not the installer pinned Chrome.
   if (location == ShellUtil::SHORTCUT_LOCATION_START_MENU_ROOT &&
+      base::win::GetVersion() >= base::win::Version::WIN10 &&
       CanPinShortcutToTaskbar()) {
     SetInstallerPinnedChromeToTaskbar(properties.pin_to_taskbar && pinned);
   }
diff --git a/chrome/installer/util/shell_util.cc b/chrome/installer/util/shell_util.cc
index 967f78cfc385b..29335beeabfda 100644
--- a/chrome/installer/util/shell_util.cc
+++ b/chrome/installer/util/shell_util.cc
@@ -306,11 +306,13 @@ void GetProgIdEntries(const ShellUtil::ApplicationInfo& app_info,
     entries->back()->set_removal_flag(RegistryEntry::RemovalFlag::VALUE);
   }
 
-  // The following entries are required but do not depend on the DelegateExecute
-  // verb handler being set.
-  if (!app_info.app_id.empty()) {
-    entries->push_back(std::make_unique<RegistryEntry>(
-        prog_id_path, ShellUtil::kRegAppUserModelId, app_info.app_id));
+  // The following entries are required as of Windows 8, but do not
+  // depend on the DelegateExecute verb handler being set.
+  if (base::win::GetVersion() >= base::win::Version::WIN8) {
+    if (!app_info.app_id.empty()) {
+      entries->push_back(std::make_unique<RegistryEntry>(
+          prog_id_path, ShellUtil::kRegAppUserModelId, app_info.app_id));
+    }
   }
 
   // Add \Software\Classes\<prog_id>\Application entries
@@ -773,11 +775,12 @@ bool QuickIsChromeRegisteredForMode(
   }
   reg_key += ShellUtil::kRegShellOpen;
 
-  // ProgId and shell integration registrations are allowed to reside in HKCU
-  // for user-level installs, and values there have priority over values in
-  // HKLM.
+  // ProgId registrations are allowed to reside in HKCU for user-level installs
+  // (and values there have priority over values in HKLM). The same is true for
+  // shell integration entries as of Windows 8.
   if (confirmation_level == CONFIRM_PROGID_REGISTRATION ||
-      confirmation_level == CONFIRM_SHELL_REGISTRATION) {
+      (confirmation_level == CONFIRM_SHELL_REGISTRATION &&
+       base::win::GetVersion() >= base::win::Version::WIN8)) {
     const RegKey key_hkcu(HKEY_CURRENT_USER, reg_key.c_str(), KEY_QUERY_VALUE);
     std::wstring hkcu_value;
     // If |reg_key| is present in HKCU, assert that it points to |chrome_exe|.
@@ -794,6 +797,14 @@ bool QuickIsChromeRegisteredForMode(
   return false;
 }
 
+base::FilePath GetChromeInstallPath(bool system_install) {
+  base::FilePath install_path =
+      installer::GetInstalledDirectory(system_install);
+  if (install_path.empty())
+    install_path = installer::GetDefaultChromeInstallPath(system_install);
+  return install_path;
+ }
+
 // Returns the installation suffix for |mode| at the system or user level based
 // on |system_install|.
 std::wstring GetInstallationSuffixForModeAtLevel(
@@ -802,7 +813,7 @@ std::wstring GetInstallationSuffixForModeAtLevel(
   // Search based on the existing install location. If no existing install
   // found, uses the default install location for the mode.
   const base::FilePath chrome_exe =
-      installer::GetChromeInstallPath(system_install)
+      GetChromeInstallPath(system_install)
           .Append(installer::kChromeExe);
 
   // See the comment in ShellUtil::GetCurrentInstallationSuffix for details on
@@ -895,7 +906,9 @@ bool GetInstallationSpecificSuffix(const base::FilePath& chrome_exe,
 // be placed for this install. As of Windows 8 everything can go in HKCU for
 // per-user installs.
 HKEY DetermineRegistrationRoot(bool is_per_user) {
-  return is_per_user ? HKEY_CURRENT_USER : HKEY_LOCAL_MACHINE;
+  return is_per_user && base::win::GetVersion() >= base::win::Version::WIN8
+             ? HKEY_CURRENT_USER
+             : HKEY_LOCAL_MACHINE;
 }
 
 // Associates Chrome with supported protocols and file associations. This should
@@ -1019,16 +1032,19 @@ base::win::ShortcutProperties TranslateShortcutProperties(
 // Cleans up an old verb (run) we used to register in
 // <root>\Software\Classes\Chrome<.suffix>\.exe\shell\run on Windows 8.
 void RemoveRunVerbOnWindows8() {
-  bool is_per_user_install = InstallUtil::IsPerUserInstall();
-  HKEY root_key = DetermineRegistrationRoot(is_per_user_install);
-  // There's no need to rollback, so forgo the usual work item lists and just
-  // remove the key from the registry.
-  std::wstring run_verb_key =
-      base::StrCat({ShellUtil::kRegClasses, kFilePathSeparator,
-                    ShellUtil::GetBrowserModelId(is_per_user_install),
-                    ShellUtil::kRegExePath, ShellUtil::kRegShellPath,
-                    kFilePathSeparator, ShellUtil::kRegVerbRun});
-  installer::DeleteRegistryKey(root_key, run_verb_key, WorkItem::kWow64Default);
+  if (base::win::GetVersion() >= base::win::Version::WIN8) {
+    bool is_per_user_install = InstallUtil::IsPerUserInstall();
+    HKEY root_key = DetermineRegistrationRoot(is_per_user_install);
+    // There's no need to rollback, so forgo the usual work item lists and just
+    // remove the key from the registry.
+    std::wstring run_verb_key =
+        base::StrCat({ShellUtil::kRegClasses, kFilePathSeparator,
+                      ShellUtil::GetBrowserModelId(is_per_user_install),
+                      ShellUtil::kRegExePath, ShellUtil::kRegShellPath,
+                      kFilePathSeparator, ShellUtil::kRegVerbRun});
+    installer::DeleteRegistryKey(root_key, run_verb_key,
+                                 WorkItem::kWow64Default);
+  }
 }
 
 // Probes default handler registration (in a manner appropriate for the current
@@ -1180,10 +1196,11 @@ ShellUtil::DefaultState ProbeProtocolHandlers(const base::FilePath& chrome_exe,
   return ProbeAppIsDefaultHandlers(base::PathService::CheckedGet(base::FILE_EXE), {identifier}, type);
 }
 
-// Finds and stores an app shortcuts folder path in *`path`.
+// (Windows 8+) Finds and stores an app shortcuts folder path in *|path|.
 // Returns true on success.
 bool GetAppShortcutsFolder(ShellUtil::ShellChange level, base::FilePath* path) {
   DCHECK(path);
+  DCHECK_GE(base::win::GetVersion(), base::win::Version::WIN8);
 
   base::FilePath folder;
   if (!base::PathService::Get(base::DIR_APP_SHORTCUTS, &folder)) {
@@ -1561,6 +1578,8 @@ bool RegisterChromeBrowserImpl(const base::FilePath& chrome_exe,
 bool RegisterApplicationForProtocols(const std::vector<std::wstring>& protocols,
                                      const std::wstring& prog_id,
                                      const base::FilePath& chrome_exe) {
+  DCHECK_GT(base::win::GetVersion(), base::win::Version::WIN7);
+
   std::vector<std::unique_ptr<RegistryEntry>> entries;
   ShellUtil::ApplicationInfo app_info =
       ShellUtil::GetApplicationInfoForProgId(prog_id);
@@ -1922,10 +1941,12 @@ bool ShellUtil::ShortcutLocationIsSupported(ShortcutLocation location) {
     case SHORTCUT_LOCATION_START_MENU_ROOT:                   // Falls through.
     case SHORTCUT_LOCATION_START_MENU_CHROME_DIR_DEPRECATED:  // Falls through.
     case SHORTCUT_LOCATION_START_MENU_CHROME_APPS_DIR:        // Falls through.
-    case SHORTCUT_LOCATION_STARTUP:                           // Falls through.
-    case SHORTCUT_LOCATION_TASKBAR_PINS:                      // Falls through.
-    case SHORTCUT_LOCATION_APP_SHORTCUTS:
+    case SHORTCUT_LOCATION_STARTUP:
       return true;
+    case SHORTCUT_LOCATION_TASKBAR_PINS:
+      return base::win::GetVersion() >= base::win::Version::WIN7;
+    case SHORTCUT_LOCATION_APP_SHORTCUTS:
+      return base::win::GetVersion() >= base::win::Version::WIN8;
     default:
       NOTREACHED();
   }
@@ -2340,8 +2361,7 @@ bool ShellUtil::CanMakeChromeDefaultUnattended() {
 // static
 ShellUtil::InteractiveSetDefaultMode ShellUtil::GetInteractiveSetDefaultMode() {
   DCHECK(!CanMakeChromeDefaultUnattended());
-  // TODO(crbug.com/1385856): Remove all code associated with INTENT_PICKER,
-  // including InteractiveSetDefaultMode and GetInteractiveSetDefaultMode().
+
   if (base::win::GetVersion() >= base::win::Version::WIN10)
     return InteractiveSetDefaultMode::SYSTEM_SETTINGS;
 
@@ -2415,6 +2435,9 @@ bool ShellUtil::MakeChromeDefaultDirectly(int shell_change,
                                           bool elevate_if_not_admin) {
   DCHECK(!(shell_change & SYSTEM_LEVEL) || IsUserAnAdmin());
 
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return false;
+
   if (!install_static::SupportsSetAsDefaultBrowser())
     return false;
 
@@ -2995,6 +3020,8 @@ bool ShellUtil::AddAppProtocolAssociations(
     const std::vector<std::wstring>& protocols,
     const std::wstring& prog_id) {
   base::FilePath chrome_exe;
+  DCHECK_GT(base::win::GetVersion(), base::win::Version::WIN7);
+
   if (!base::PathService::Get(base::FILE_EXE, &chrome_exe)) {
     NOTREACHED();
   }
@@ -3017,13 +3044,17 @@ bool ShellUtil::AddAppProtocolAssociations(
     if (!AddRegistryEntries(HKEY_CURRENT_USER, entries))
       success = false;
 
-    // Removing the existing user choice for a given protocol forces Windows to
-    // present a disambiguation dialog the next time this protocol is invoked
-    // from the OS.
-    std::unique_ptr<RegistryEntry> entry = GetProtocolUserChoiceEntry(protocol);
-    if (!installer::DeleteRegistryValue(HKEY_CURRENT_USER, entry->key_path(),
-                                        WorkItem::kWow64Default, kRegProgId)) {
-      success = false;
+    // On Windows 10, removing the existing user choice for a given protocol
+    // forces Windows to present a disambiguation dialog the next time this
+    // protocol is invoked from the OS.
+    if (base::win::GetVersion() >= base::win::Version::WIN10) {
+      std::unique_ptr<RegistryEntry> entry =
+          GetProtocolUserChoiceEntry(protocol);
+      if (!installer::DeleteRegistryValue(HKEY_CURRENT_USER, entry->key_path(),
+                                          WorkItem::kWow64Default,
+                                          kRegProgId)) {
+        success = false;
+      }
     }
   }
 
@@ -3032,6 +3063,8 @@ bool ShellUtil::AddAppProtocolAssociations(
 
 // static
 bool ShellUtil::RemoveAppProtocolAssociations(const std::wstring& prog_id) {
+  DCHECK_GT(base::win::GetVersion(), base::win::Version::WIN7);
+
   // Delete the |prog_id| value from HKEY_CURRENT_USER\RegisteredApplications.
   installer::DeleteRegistryValue(HKEY_CURRENT_USER,
                                  ShellUtil::kRegRegisteredApplications,
diff --git a/chrome/installer/util/shell_util_interactive_uitest.cc b/chrome/installer/util/shell_util_interactive_uitest.cc
index e78ae0abbdacb..70a5e2b0f76e1 100644
--- a/chrome/installer/util/shell_util_interactive_uitest.cc
+++ b/chrome/installer/util/shell_util_interactive_uitest.cc
@@ -20,6 +20,7 @@
 #include "base/win/com_init_util.h"
 #include "base/win/registry.h"
 #include "base/win/scoped_co_mem.h"
+#include "base/win/windows_version.h"
 #include "build/branding_buildflags.h"
 #include "chrome/installer/util/util_constants.h"
 #include "testing/gtest/include/gtest/gtest.h"
@@ -121,6 +122,10 @@ class ScopedCopyRegKey {
 }  // namespace
 
 TEST(ShellUtilInteractiveTest, MakeChromeDefaultDirectly) {
+  // Direct default setting is only supported on Win10 or above.
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    GTEST_SKIP();
+
   base::win::AssertComInitialized();
 
   base::ScopedTempDir temp_dir;
diff --git a/chrome/installer/util/shell_util_unittest.cc b/chrome/installer/util/shell_util_unittest.cc
index a7c42cf55222f..24cd039ad6f11 100644
--- a/chrome/installer/util/shell_util_unittest.cc
+++ b/chrome/installer/util/shell_util_unittest.cc
@@ -25,6 +25,7 @@
 #include "base/test/test_shortcut_win.h"
 #include "base/win/registry.h"
 #include "base/win/shortcut.h"
+#include "base/win/windows_version.h"
 #include "chrome/install_static/install_util.h"
 #include "chrome/installer/util/install_util.h"
 #include "chrome/installer/util/util_constants.h"
@@ -1152,13 +1153,16 @@ TEST_F(ShellUtilRegistryTest, AddFileAssociations) {
   EXPECT_EQ(ERROR_SUCCESS, key.ReadValue(L"", &value));
   EXPECT_EQ(L"\"C:\\test.exe\" --single-argument %1", value);
 
-  ASSERT_EQ(ERROR_SUCCESS,
-            key.Open(HKEY_CURRENT_USER,
-                     L"Software\\Classes\\TestApp\\Application", KEY_READ));
-  EXPECT_EQ(ERROR_SUCCESS, key.ReadValue(L"ApplicationName", &value));
-  EXPECT_EQ(L"Test Application", value);
-  EXPECT_EQ(ERROR_SUCCESS, key.ReadValue(L"ApplicationIcon", &value));
-  EXPECT_EQ(L"D:\\test.ico,0", value);
+  // The Application subkey and values are only required by Windows 8 and later.
+  if (base::win::GetVersion() >= base::win::Version::WIN8) {
+    ASSERT_EQ(ERROR_SUCCESS,
+              key.Open(HKEY_CURRENT_USER,
+                       L"Software\\Classes\\TestApp\\Application", KEY_READ));
+    EXPECT_EQ(ERROR_SUCCESS, key.ReadValue(L"ApplicationName", &value));
+    EXPECT_EQ(L"Test Application", value);
+    EXPECT_EQ(ERROR_SUCCESS, key.ReadValue(L"ApplicationIcon", &value));
+    EXPECT_EQ(L"D:\\test.ico,0", value);
+  }
 
   // .test1 should not be default-associated with our test app. Programmatically
   // becoming the default handler can be surprising to users, and risks
@@ -1257,13 +1261,16 @@ TEST_F(ShellUtilRegistryTest, AddApplicationClass) {
   EXPECT_EQ(ERROR_SUCCESS, key.ReadValue(L"", &value));
   EXPECT_EQ(L"\"C:\\test.exe\" --single-argument %1", value);
 
-  ASSERT_EQ(ERROR_SUCCESS,
-            key.Open(HKEY_CURRENT_USER,
-                     L"Software\\Classes\\TestApp\\Application", KEY_READ));
-  EXPECT_EQ(ERROR_SUCCESS, key.ReadValue(L"ApplicationName", &value));
-  EXPECT_EQ(L"Test Application", value);
-  EXPECT_EQ(ERROR_SUCCESS, key.ReadValue(L"ApplicationIcon", &value));
-  EXPECT_EQ(L"D:\\test.ico,0", value);
+  // The Application subkey and values are only required by Windows 8 and later.
+  if (base::win::GetVersion() >= base::win::Version::WIN8) {
+    ASSERT_EQ(ERROR_SUCCESS,
+              key.Open(HKEY_CURRENT_USER,
+                       L"Software\\Classes\\TestApp\\Application", KEY_READ));
+    EXPECT_EQ(ERROR_SUCCESS, key.ReadValue(L"ApplicationName", &value));
+    EXPECT_EQ(L"Test Application", value);
+    EXPECT_EQ(ERROR_SUCCESS, key.ReadValue(L"ApplicationIcon", &value));
+    EXPECT_EQ(L"D:\\test.ico,0", value);
+  }
 }
 
 TEST_F(ShellUtilRegistryTest, DeleteApplicationClass) {
@@ -1317,7 +1324,8 @@ TEST_F(ShellUtilRegistryTest, GetApplicationInfoForProgId) {
 
   EXPECT_EQ(L"\"C:\\test.exe\" --single-argument %1", app_info.command_line);
 
-  EXPECT_EQ(L"", app_info.app_id);
+  if (base::win::GetVersion() >= base::win::Version::WIN8)
+    EXPECT_EQ(L"", app_info.app_id);
 
   EXPECT_EQ(kTestApplicationName, app_info.application_name);
   EXPECT_EQ(kTestApplicationDescription, app_info.application_description);
@@ -1328,6 +1336,10 @@ TEST_F(ShellUtilRegistryTest, GetApplicationInfoForProgId) {
 }
 
 TEST_F(ShellUtilRegistryTest, AddAppProtocolAssociations) {
+  // App protocol handlers are not supported on Windows 7.
+  if (base::win::GetVersion() <= base::win::Version::WIN7)
+    return;
+
   // Create test protocol associations.
   const std::wstring app_progid = L"app_progid1";
   const std::vector<std::wstring> app_protocols = {L"web+test", L"mailto"};
@@ -1403,6 +1415,10 @@ TEST_F(ShellUtilRegistryTest, ToAndFromCommandLineArgument) {
 }
 
 TEST_F(ShellUtilRegistryTest, RemoveAppProtocolAssociations) {
+  // App protocol handlers are not supported on Windows 7.
+  if (base::win::GetVersion() <= base::win::Version::WIN7)
+    return;
+
   // Create test protocol associations.
   const std::wstring app_progid = L"app_progid1";
   const std::vector<std::wstring> app_protocols = {L"web+test"};
@@ -1596,6 +1612,10 @@ TEST(ShellUtilTest, HashComputationTest) {
 }
 
 TEST(ShellUtilTest, UserChoiceHashComputationTest) {
+  // User Choice hashing is only available on Win10 or above.
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    GTEST_SKIP();
+
   // If these tests fail, investigate if the salt changed or if the hash
   // function changed.
   EXPECT_EQ(
