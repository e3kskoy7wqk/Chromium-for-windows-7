diff --git a/chrome/browser/ui/color/win/native_chrome_color_mixer_win.cc b/chrome/browser/ui/color/win/native_chrome_color_mixer_win.cc
index 7f0c0f7cafe28..8bf2c7f461e36 100644
--- a/chrome/browser/ui/color/win/native_chrome_color_mixer_win.cc
+++ b/chrome/browser/ui/color/win/native_chrome_color_mixer_win.cc
@@ -72,20 +72,17 @@ FrameTransforms GetSystemFrameTransforms(const ui::ColorProviderKey& key) {
   if (ShouldDefaultThemeUseMicaTitlebar()) {
     frame_transforms = GetMicaFrameTransforms(key);
   }
-  if (const auto* const accent_color_observer = ui::AccentColorObserver::Get();
-      accent_color_observer->ShouldUseAccentColorForWindowFrame()) {
-    if (const std::optional<SkColor> dwm_frame_color =
-            accent_color_observer->accent_color()) {
-      frame_transforms.active = {dwm_frame_color.value()};
-      const std::optional<SkColor> dwm_inactive_frame_color =
-          accent_color_observer->accent_color_inactive();
-      frame_transforms.inactive =
-          dwm_inactive_frame_color.has_value()
-              ? ui::ColorTransform(dwm_inactive_frame_color.value())
-              : ui::HSLShift(
-                    {dwm_frame_color.value()},
-                    GetTint(ThemeProperties::TINT_FRAME_INACTIVE, key));
-    }
+  const auto* const accent_color_observer = ui::AccentColorObserver::Get();
+  if (const std::optional<SkColor> dwm_frame_color =
+          accent_color_observer->accent_color()) {
+    frame_transforms.active = {dwm_frame_color.value()};
+    const std::optional<SkColor> dwm_inactive_frame_color =
+        accent_color_observer->accent_color_inactive();
+    frame_transforms.inactive =
+        dwm_inactive_frame_color.has_value()
+            ? ui::ColorTransform(dwm_inactive_frame_color.value())
+            : ui::HSLShift({dwm_frame_color.value()},
+                           GetTint(ThemeProperties::TINT_FRAME_INACTIVE, key));
   }
   return frame_transforms;
 }
@@ -113,12 +110,9 @@ void EnsureColorProviderCacheWillBeResetWhenAccentColorStateChanges() {
 }
 
 SkColor GetAccentBorderColor() {
-  if (const auto* const accent_color_observer = ui::AccentColorObserver::Get();
-      accent_color_observer->ShouldUseAccentColorForWindowFrame()) {
-    if (const std::optional<SkColor> accent_border_color =
-            accent_color_observer->accent_border_color()) {
-      return accent_border_color.value();
-    }
+  if (const std::optional<SkColor> accent_border_color =
+          ui::AccentColorObserver::Get()->accent_border_color()) {
+    return accent_border_color.value();
   }
 
   // Windows 10 pre-version 1809 native active borders default to white, while
diff --git a/chrome/browser/ui/color/win/native_chrome_color_mixer_win_browsertest.cc b/chrome/browser/ui/color/win/native_chrome_color_mixer_win_browsertest.cc
index 6c5b5a36a141b..ba66dcf962be9 100644
--- a/chrome/browser/ui/color/win/native_chrome_color_mixer_win_browsertest.cc
+++ b/chrome/browser/ui/color/win/native_chrome_color_mixer_win_browsertest.cc
@@ -14,14 +14,9 @@
 #include "ui/color/color_id.h"
 #include "ui/color/color_provider.h"
 #include "ui/color/win/accent_color_observer.h"
-#include "ui/native_theme/mock_os_settings_provider.h"
 
 using NativeChromeColorMixerWinBrowserTest = InProcessBrowserTest;
 
-namespace {
-constexpr SkColor kAccentColor = SK_ColorMAGENTA;
-}  // namespace
-
 // Tests that windows header colors track the accent color when configured to
 // use DWM frame colors.
 IN_PROC_BROWSER_TEST_F(NativeChromeColorMixerWinBrowserTest,
@@ -33,17 +28,17 @@ IN_PROC_BROWSER_TEST_F(NativeChromeColorMixerWinBrowserTest,
   auto* const theme_service =
       ThemeServiceFactory::GetForProfile(browser()->profile());
   theme_service->UseDeviceTheme(false);
-  const auto get_header_color = [&] {
+  const auto get_header_color = [&]() {
     return browser()->window()->GetColorProvider()->GetColor(
         ui::kColorSysHeader);
   };
-  const SkColor initial_header_color = get_header_color();
+  const auto initial_header_color = get_header_color();
 
   // Configure the observer to use a specific accent color. The header color
   // should be unaffected as the theme service has not been set to follow the
   // device theme.
+  constexpr SkColor kAccentColor = SK_ColorMAGENTA;
   accent_color_observer->SetAccentColorForTesting(kAccentColor);
-  accent_color_observer->SetShouldUseAccentColorForWindowFrameForTesting(true);
   EXPECT_EQ(initial_header_color, get_header_color());
 
   // Configure the theme service to follow the device theme. The header color
@@ -57,38 +52,3 @@ IN_PROC_BROWSER_TEST_F(NativeChromeColorMixerWinBrowserTest,
   accent_color_observer->SetAccentColorForTesting(std::nullopt);
   EXPECT_EQ(initial_header_color, get_header_color());
 }
-
-IN_PROC_BROWSER_TEST_F(NativeChromeColorMixerWinBrowserTest,
-                       AccentColorAvailableWithFrameColorDisabled) {
-  // Test that accent colors are present in Chrome UI even when DWM frame colors
-  // are disabled, but not used for titlebar/frame colors.
-  ui::MockOsSettingsProvider mock_provider;
-  mock_provider.SetAccentColor(kAccentColor);
-
-  auto* const accent_color_observer = ui::AccentColorObserver::Get();
-  // Disable DWM frame colors (simulates registry with ColorPrevalence=0)
-  accent_color_observer->SetShouldUseAccentColorForWindowFrameForTesting(false);
-
-  auto* const theme_service =
-      ThemeServiceFactory::GetForProfile(browser()->profile());
-  theme_service->UseDeviceTheme(true);
-
-  // Accent color should be available for internal Chrome UI and web content
-  // with DWM frame colors disabled.
-  EXPECT_EQ(kAccentColor,
-            ui::NativeTheme::GetInstanceForNativeUi()->user_color());
-  EXPECT_EQ(kAccentColor, ui::NativeTheme::GetInstanceForWeb()->user_color());
-
-  const auto get_header_color = [&] {
-    return browser()->window()->GetColorProvider()->GetColor(
-        ui::kColorSysHeader);
-  };
-  const SkColor header_color_without_prevalence = get_header_color();
-  accent_color_observer->SetShouldUseAccentColorForWindowFrameForTesting(true);
-  const SkColor header_color_with_prevalence = get_header_color();
-
-  // When DWM frame colors are disabled, the header color uses the default
-  // value. When enabled, the header color is computed from the accent color.
-  // The two header colors should be different.
-  EXPECT_NE(header_color_without_prevalence, header_color_with_prevalence);
-}
diff --git a/ui/color/win/accent_color_observer.cc b/ui/color/win/accent_color_observer.cc
index 2f9f572f3c89e..d7204aa1e34cb 100644
--- a/ui/color/win/accent_color_observer.cc
+++ b/ui/color/win/accent_color_observer.cc
@@ -72,27 +72,6 @@ base::CallbackListSubscription AccentColorObserver::Subscribe(
   return callbacks_.Add(std::move(callback));
 }
 
-bool AccentColorObserver::ShouldUseAccentColorForWindowFrame() const {
-  if (should_use_accent_color_for_window_frame_for_testing_.has_value()) {
-    return should_use_accent_color_for_window_frame_for_testing_.value();
-  }
-
-  if (!dwm_key_) {
-    return false;
-  }
-
-  DWORD color_prevalence = 0;
-  return dwm_key_->ReadValueDW(L"ColorPrevalence", &color_prevalence) ==
-             ERROR_SUCCESS &&
-         color_prevalence == 1;
-}
-
-void AccentColorObserver::SetShouldUseAccentColorForWindowFrameForTesting(
-    bool use_accent_color) {
-  should_use_accent_color_for_window_frame_for_testing_ = use_accent_color;
-  callbacks_.Notify();
-}
-
 void AccentColorObserver::SetAccentColorForTesting(
     std::optional<SkColor> accent_color) {
   accent_color_ = accent_color;
@@ -118,9 +97,16 @@ void AccentColorObserver::OnDwmKeyUpdated() {
 }
 
 void AccentColorObserver::UpdateAccentColors() {
+  // Ignore accent colors unless color prevalence is enabled.
   accent_color_.reset();
   accent_color_inactive_.reset();
   accent_border_color_.reset();
+  if (DWORD color_prevalence = 0;
+      dwm_key_->ReadValueDW(L"ColorPrevalence", &color_prevalence) !=
+          ERROR_SUCCESS ||
+      color_prevalence != 1) {
+    return;
+  }
 
   // Windows will set unsupported accent color values in the registry, while
   // coercing the value to another color. Use the UISettings API to ensure we
diff --git a/ui/color/win/accent_color_observer.h b/ui/color/win/accent_color_observer.h
index 58f1162a037c7..d54271e433009 100644
--- a/ui/color/win/accent_color_observer.h
+++ b/ui/color/win/accent_color_observer.h
@@ -40,13 +40,7 @@ class COMPONENT_EXPORT(COLOR) AccentColorObserver {
     return accent_border_color_;
   }
 
-  // Returns whether accent colors should be used for window frames.
-  // Even when false, a non-null accent color may be used to theme secondary UI
-  // or supplied to web content.
-  bool ShouldUseAccentColorForWindowFrame() const;
-
   void SetAccentColorForTesting(std::optional<SkColor> accent_color);
-  void SetShouldUseAccentColorForWindowFrameForTesting(bool use_accent_color);
 
  private:
   void OnDwmKeyUpdated();
@@ -60,8 +54,6 @@ class COMPONENT_EXPORT(COLOR) AccentColorObserver {
   std::optional<SkColor> accent_color_;
   std::optional<SkColor> accent_color_inactive_;
   std::optional<SkColor> accent_border_color_;
-
-  std::optional<bool> should_use_accent_color_for_window_frame_for_testing_;
 };
 
 }  // namespace ui
