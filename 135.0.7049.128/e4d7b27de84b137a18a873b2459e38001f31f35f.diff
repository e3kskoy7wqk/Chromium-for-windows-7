

diff --git a/device/base/features.cc b/device/base/features.cc
index f2471613916ff..ff2ba102d04a7 100644
--- a/device/base/features.cc
+++ b/device/base/features.cc
@@ -16,6 +16,10 @@ BASE_FEATURE(kNewUsbBackend,
 namespace device {
 
 #if BUILDFLAG(IS_WIN)
+BASE_FEATURE(kNewBLEWinImplementation,
+             "NewBLEWinImplementation",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
 // Controls whether a more reliable GATT session handling
 // implementation is used on Windows 10 1709 (RS3) and beyond.
 //
diff --git a/device/base/features.h b/device/base/features.h
index ecb1c6b320003..622753a9b28ce 100644
--- a/device/base/features.h
+++ b/device/base/features.h
@@ -16,6 +16,7 @@ DEVICE_BASE_EXPORT BASE_DECLARE_FEATURE(kNewUsbBackend);
 namespace device {
 
 #if BUILDFLAG(IS_WIN)
+DEVICE_BASE_EXPORT BASE_DECLARE_FEATURE(kNewBLEWinImplementation);
 DEVICE_BASE_EXPORT BASE_DECLARE_FEATURE(kNewBLEGattSessionHandling);
 #endif  // BUILDFLAG(IS_WIN)
 
diff --git a/device/bluetooth/bluetooth_adapter_unittest.cc b/device/bluetooth/bluetooth_adapter_unittest.cc
index f9a9de2835f99..b513e152c35e1 100644
--- a/device/bluetooth/bluetooth_adapter_unittest.cc
+++ b/device/bluetooth/bluetooth_adapter_unittest.cc
@@ -811,7 +811,7 @@ TEST_F(BluetoothTest, MAYBE_ConstructFakeAdapter) {
 }
 
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, ConstructFakeAdapterWithoutRadio) {
+TEST_P(BluetoothTestWinrtOnly, ConstructFakeAdapterWithoutRadio) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -826,7 +826,7 @@ TEST_P(BluetoothTestWinrt, ConstructFakeAdapterWithoutRadio) {
   EXPECT_FALSE(adapter_->IsDiscovering());
 }
 
-TEST_P(BluetoothTestWinrt, ConstructFakeAdapterWithoutPowerControl) {
+TEST_P(BluetoothTestWinrtOnly, ConstructFakeAdapterWithoutPowerControl) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1073,7 +1073,7 @@ TEST_F(BluetoothTest, MAYBE_DiscoverMultipleLowEnergyDevices) {
 
 #if BUILDFLAG(IS_WIN)
 // Tests that the adapter responds to external changes to the power state.
-TEST_P(BluetoothTestWinrt, SimulateAdapterPoweredOffAndOn) {
+TEST_P(BluetoothTestWinrtOnly, SimulateAdapterPoweredOffAndOn) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1103,7 +1103,7 @@ TEST_P(BluetoothTestWinrt, SimulateAdapterPoweredOffAndOn) {
 // Tests that power change notifications are deduplicated.
 // Multiple StateChanged events with the same state only cause a
 // single AdapterPoweredChanged() call.
-TEST_P(BluetoothTestWinrt, SimulateDuplicateStateChanged) {
+TEST_P(BluetoothTestWinrtOnly, SimulateDuplicateStateChanged) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1140,7 +1140,7 @@ TEST_P(BluetoothTestWinrt, SimulateDuplicateStateChanged) {
 
 // Tests that the adapter responds to external changes to the power state, even
 // if it failed to obtain the underlying radio.
-TEST_P(BluetoothTestWinrt, SimulateAdapterPoweredOnAndOffWithoutRadio) {
+TEST_P(BluetoothTestWinrtOnly, SimulateAdapterPoweredOnAndOffWithoutRadio) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1171,7 +1171,7 @@ TEST_P(BluetoothTestWinrt, SimulateAdapterPoweredOnAndOffWithoutRadio) {
 // fails.
 // TODO(crbug.com/41410591): Implement SimulateAdapterPowerSuccess() and
 // enable on all platforms.
-TEST_P(BluetoothTestWinrt, SimulateAdapterPowerFailure) {
+TEST_P(BluetoothTestWinrtOnly, SimulateAdapterPowerFailure) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1191,5 +1191,5 @@ TEST_P(BluetoothTestWinrt, SimulateAdapterPowerFailure) {
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, TogglePowerFakeAdapter) {
+TEST_P(BluetoothTestWinrtOnly, TogglePowerFakeAdapter) {
 #else
 #if BUILDFLAG(IS_IOS)
 #define MAYBE_TogglePowerFakeAdapter DISABLED_TogglePowerFakeAdapter
@@ -1236,7 +1236,7 @@ TEST_F(BluetoothTest, MAYBE_TogglePowerFakeAdapter) {
 // that it is not necessary to store pending callbacks and wait for the
 // appropriate events.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, TogglePowerFakeAdapter_Twice) {
+TEST_P(BluetoothTestWinrtOnly, TogglePowerFakeAdapter_Twice) {
 #else
 TEST_F(BluetoothTest, MAYBE_TogglePowerFakeAdapter_Twice) {
 #endif
@@ -1281,7 +1281,7 @@ TEST_F(BluetoothTest, MAYBE_TogglePowerFakeAdapter_Twice) {
 #endif
 
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, TogglePowerFakeAdapter_WithinCallback_On_Off) {
+TEST_P(BluetoothTestWinrtOnly, TogglePowerFakeAdapter_WithinCallback_On_Off) {
 #else
 TEST_F(BluetoothTest, MAYBE_TogglePowerFakeAdapter_WithinCallback_On_Off) {
 #endif
@@ -1317,7 +1317,7 @@ TEST_F(BluetoothTest, MAYBE_TogglePowerFakeAdapter_WithinCallback_On_Off) {
 #endif
 
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, TogglePowerFakeAdapter_WithinCallback_Off_On) {
+TEST_P(BluetoothTestWinrtOnly, TogglePowerFakeAdapter_WithinCallback_Off_On) {
 #else
 TEST_F(BluetoothTest, MAYBE_TogglePowerFakeAdapter_WithinCallback_Off_On) {
 #endif
@@ -1360,7 +1360,7 @@ TEST_F(BluetoothTest, MAYBE_TogglePowerFakeAdapter_WithinCallback_Off_On) {
 #endif
 
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, TogglePowerFakeAdapter_DestroyWithPending) {
+TEST_P(BluetoothTestWinrtOnly, TogglePowerFakeAdapter_DestroyWithPending) {
 #else
 TEST_F(BluetoothTest, MAYBE_TogglePowerFakeAdapter_DestroyWithPending) {
 #endif
@@ -1443,7 +1443,7 @@ TEST_F(BluetoothTest, MAYBE_TogglePowerBeforeScan) {
 }
 
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, DiscoverySessionFailure) {
+TEST_P(BluetoothTestWinrtOnly, DiscoverySessionFailure) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1504,7 +1504,7 @@ TEST_F(BluetoothTest, MAYBE_TurnOffAdapterWithConnectedDevice) {
 }
 
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, RegisterAdvertisement) {
+TEST_P(BluetoothTestWinrtOnly, RegisterAdvertisement) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1526,7 +1526,7 @@ TEST_P(BluetoothTestWinrt, RegisterAdvertisement) {
   EXPECT_TRUE(adapter_->GetPendingAdvertisementsForTesting().empty());
 }
 
-TEST_P(BluetoothTestWinrt, FailRegisterAdvertisement) {
+TEST_P(BluetoothTestWinrtOnly, FailRegisterAdvertisement) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1551,7 +1551,7 @@ TEST_P(BluetoothTestWinrt, FailRegisterAdvertisement) {
   EXPECT_TRUE(adapter_->GetPendingAdvertisementsForTesting().empty());
 }
 
-TEST_P(BluetoothTestWinrt, RegisterAndUnregisterAdvertisement) {
+TEST_P(BluetoothTestWinrtOnly, RegisterAndUnregisterAdvertisement) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1582,7 +1582,7 @@ TEST_P(BluetoothTestWinrt, RegisterAndUnregisterAdvertisement) {
   EXPECT_TRUE(adapter_->GetPendingAdvertisementsForTesting().empty());
 }
 
-TEST_P(BluetoothTestWinrt, FailUnregisterAdvertisement) {
+TEST_P(BluetoothTestWinrtOnly, FailUnregisterAdvertisement) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1618,7 +1618,7 @@ TEST_P(BluetoothTestWinrt, FailUnregisterAdvertisement) {
   EXPECT_TRUE(adapter_->GetPendingAdvertisementsForTesting().empty());
 }
 
-TEST_P(BluetoothTestWinrt, RegisterAdvertisementWithInvalidData) {
+TEST_P(BluetoothTestWinrtOnly, RegisterAdvertisementWithInvalidData) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1641,7 +1641,7 @@ TEST_P(BluetoothTestWinrt, RegisterAdvertisementWithInvalidData) {
   EXPECT_TRUE(adapter_->GetPendingAdvertisementsForTesting().empty());
 }
 
-TEST_P(BluetoothTestWinrt, RegisterMultipleAdvertisements) {
+TEST_P(BluetoothTestWinrtOnly, RegisterMultipleAdvertisements) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1671,7 +1671,7 @@ TEST_P(BluetoothTestWinrt, RegisterMultipleAdvertisements) {
   EXPECT_TRUE(adapter_->GetPendingAdvertisementsForTesting().empty());
 }
 
-TEST_P(BluetoothTestWinrt, UnregisterAdvertisementWhilePendingUnregister) {
+TEST_P(BluetoothTestWinrtOnly, UnregisterAdvertisementWhilePendingUnregister) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1717,7 +1717,7 @@ TEST_P(BluetoothTestWinrt, UnregisterAdvertisementWhilePendingUnregister) {
   EXPECT_TRUE(adapter_->GetPendingAdvertisementsForTesting().empty());
 }
 
-TEST_P(BluetoothTestWinrt, DoubleUnregisterAdvertisement) {
+TEST_P(BluetoothTestWinrtOnly, DoubleUnregisterAdvertisement) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -1760,7 +1760,7 @@ TEST_P(BluetoothTestWinrt, DoubleUnregisterAdvertisement) {
   EXPECT_TRUE(adapter_->GetPendingAdvertisementsForTesting().empty());
 }
 
-TEST_P(BluetoothTestWinrt, SimulateAdvertisementStoppedByOS) {
+TEST_P(BluetoothTestWinrtOnly, SimulateAdvertisementStoppedByOS) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -2219,7 +2219,13 @@ TEST_F(BluetoothTest, DiscoverConnectedLowEnergyDeviceTwice) {
 #if BUILDFLAG(IS_WIN)
 INSTANTIATE_TEST_SUITE_P(All,
                          BluetoothTestWinrt,
-                         ::testing::ValuesIn(kBluetoothTestWinrtParam));
+                         ::testing::ValuesIn(kBluetoothTestWinrtParamAll));
+
+INSTANTIATE_TEST_SUITE_P(
+    All,
+    BluetoothTestWinrtOnly,
+    ::testing::ValuesIn(kBluetoothTestWinrtParamWinrtOnly));
+
 #endif  // BUILDFLAG(IS_WIN)
 
 }  // namespace device
diff --git a/device/bluetooth/bluetooth_adapter_win.cc b/device/bluetooth/bluetooth_adapter_win.cc
index c2952ecf47d0d..9f7aad32f92b0 100644
--- a/device/bluetooth/bluetooth_adapter_win.cc
+++ b/device/bluetooth/bluetooth_adapter_win.cc
@@ -38,7 +38,10 @@ scoped_refptr<BluetoothAdapter> BluetoothAdapter::CreateAdapter() {
 
 // static
 scoped_refptr<BluetoothAdapter> BluetoothAdapterWin::CreateAdapter() {
-  return base::WrapRefCounted(new BluetoothAdapterWinrt());
+  if (UseNewBLEWinImplementation())
+    return base::WrapRefCounted(new BluetoothAdapterWinrt());
+
+  return BluetoothAdapterWin::CreateClassicAdapter();
 }
 
 // static
@@ -46,6 +49,11 @@ scoped_refptr<BluetoothAdapter> BluetoothAdapterWin::CreateClassicAdapter() {
   return base::WrapRefCounted(new BluetoothAdapterWin());
 }
 
+// static
+bool BluetoothAdapterWin::UseNewBLEWinImplementation() {
+  return base::FeatureList::IsEnabled(kNewBLEWinImplementation);
+}
+
 BluetoothAdapterWin::BluetoothAdapterWin() = default;
 
 BluetoothAdapterWin::~BluetoothAdapterWin() {
diff --git a/device/bluetooth/bluetooth_adapter_win.h b/device/bluetooth/bluetooth_adapter_win.h
index a4212e625ed3b..491a001a41201 100644
--- a/device/bluetooth/bluetooth_adapter_win.h
+++ b/device/bluetooth/bluetooth_adapter_win.h
@@ -40,6 +40,8 @@ class DEVICE_BLUETOOTH_EXPORT BluetoothAdapterWin
   BluetoothAdapterWin(const BluetoothAdapterWin&) = delete;
   BluetoothAdapterWin& operator=(const BluetoothAdapterWin&) = delete;
 
+  static bool UseNewBLEWinImplementation();
+
   // BluetoothAdapter:
   std::string GetAddress() const override;
   std::string GetName() const override;
diff --git a/device/bluetooth/bluetooth_device.h b/device/bluetooth/bluetooth_device.h
index fab14245cf856..74faf48d36962 100644
--- a/device/bluetooth/bluetooth_device.h
+++ b/device/bluetooth/bluetooth_device.h
@@ -719,14 +719,14 @@ class DEVICE_BLUETOOTH_EXPORT BluetoothDevice {
   FRIEND_TEST_ALL_PREFIXES(BluetoothTest, RemoveOutdatedDeviceGattConnect);
 
   FRIEND_TEST_ALL_PREFIXES(
-      BluetoothTestWinrt,
+      BluetoothTestWinrtOnly,
       BluetoothGattConnection_DisconnectGatt_SimulateConnect);
   FRIEND_TEST_ALL_PREFIXES(
-      BluetoothTestWinrt,
+      BluetoothTestWinrtOnly,
       BluetoothGattConnection_DisconnectGatt_SimulateDisconnect);
-  FRIEND_TEST_ALL_PREFIXES(BluetoothTestWinrt,
+  FRIEND_TEST_ALL_PREFIXES(BluetoothTestWinrtOnly,
                            BluetoothGattConnection_ErrorAfterConnection);
-  FRIEND_TEST_ALL_PREFIXES(BluetoothTestWinrt,
+  FRIEND_TEST_ALL_PREFIXES(BluetoothTestWinrtOnly,
                            BluetoothGattConnection_DisconnectGatt_Cleanup);
 
   // Helper class to easily update the sets of UUIDs and keep them in sync with
diff --git a/device/bluetooth/bluetooth_device_unittest.cc b/device/bluetooth/bluetooth_device_unittest.cc
index d763998ec2944..31c895efba84d 100644
--- a/device/bluetooth/bluetooth_device_unittest.cc
+++ b/device/bluetooth/bluetooth_device_unittest.cc
@@ -189,7 +189,7 @@ TEST(BluetoothDeviceTest, GattConnectionErrorReentrancy) {
 }
 
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, DeviceIsPaired) {
+TEST_P(BluetoothTestWinrtOnly, DeviceIsPaired) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -210,7 +210,7 @@ TEST_P(BluetoothTestWinrt, DeviceIsPaired) {
 }
 
 // Tests that providing a correct pin code results in a paired device.
-TEST_P(BluetoothTestWinrt, DevicePairRequestPinCodeCorrect) {
+TEST_P(BluetoothTestWinrtOnly, DevicePairRequestPinCodeCorrect) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -245,7 +245,7 @@ TEST_P(BluetoothTestWinrt, DevicePairRequestPinCodeCorrect) {
 }
 
 // Tests that providing a wrong pin code does not result in a paired device.
-TEST_P(BluetoothTestWinrt, DevicePairRequestPinCodeWrong) {
+TEST_P(BluetoothTestWinrtOnly, DevicePairRequestPinCodeWrong) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -279,7 +279,7 @@ TEST_P(BluetoothTestWinrt, DevicePairRequestPinCodeWrong) {
 }
 
 // Tests that rejecting the pairing does not result in a paired device.
-TEST_P(BluetoothTestWinrt, DevicePairRequestPinCodeRejectPairing) {
+TEST_P(BluetoothTestWinrtOnly, DevicePairRequestPinCodeRejectPairing) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -314,7 +314,7 @@ TEST_P(BluetoothTestWinrt, DevicePairRequestPinCodeRejectPairing) {
 }
 
 // Tests that cancelling the pairing does not result in a paired device.
-TEST_P(BluetoothTestWinrt, DevicePairRequestPinCodeCancelPairing) {
+TEST_P(BluetoothTestWinrtOnly, DevicePairRequestPinCodeCancelPairing) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -349,7 +349,7 @@ TEST_P(BluetoothTestWinrt, DevicePairRequestPinCodeCancelPairing) {
   EXPECT_FALSE(device->ExpectingPinCode());
 }
 
-TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmOnlyAccept) {
+TEST_P(BluetoothTestWinrtOnly, DevicePairRequestConfirmOnlyAccept) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -377,7 +377,7 @@ TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmOnlyAccept) {
   EXPECT_TRUE(device->IsPaired());
 }
 
-TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmOnlyCancel) {
+TEST_P(BluetoothTestWinrtOnly, DevicePairRequestConfirmOnlyCancel) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -405,7 +405,7 @@ TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmOnlyCancel) {
   EXPECT_FALSE(device->IsPaired());
 }
 
-TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmPinAccept) {
+TEST_P(BluetoothTestWinrtOnly, DevicePairRequestConfirmPinAccept) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -434,7 +434,7 @@ TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmPinAccept) {
   EXPECT_TRUE(device->IsPaired());
 }
 
-TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmPinCancel) {
+TEST_P(BluetoothTestWinrtOnly, DevicePairRequestConfirmPinCancel) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -463,7 +463,7 @@ TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmPinCancel) {
   EXPECT_FALSE(device->IsPaired());
 }
 
-TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmPinLeadingZeroAccept) {
+TEST_P(BluetoothTestWinrtOnly, DevicePairRequestConfirmPinLeadingZeroAccept) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -492,7 +492,7 @@ TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmPinLeadingZeroAccept) {
   EXPECT_TRUE(device->IsPaired());
 }
 
-TEST_P(BluetoothTestWinrt, DevicePairRequestConfirmPinInvalid) {
+TEST_P(BluetoothTestWinrtOnly, DevicePairRequestConfirmPinInvalid) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -596,7 +596,7 @@ TEST_F(BluetoothTest, LowEnergyDeviceNoUUIDs) {
   DISABLED_GetServiceDataUUIDs_GetServiceDataForUUID
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, GetServiceDataUUIDs_GetServiceDataForUUID) {
+TEST_P(BluetoothTestWinrtOnly, GetServiceDataUUIDs_GetServiceDataForUUID) {
 #else
 TEST_F(BluetoothTest, MAYBE_GetServiceDataUUIDs_GetServiceDataForUUID) {
 #endif
@@ -708,7 +708,7 @@ TEST_F(BluetoothTest, MAYBE_GetServiceDataUUIDs_GetServiceDataForUUID) {
 // Tests that the Advertisement Data fields are correctly updated during
 // discovery.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, AdvertisementData_Discovery) {
+TEST_P(BluetoothTestWinrtOnly, AdvertisementData_Discovery) {
 #else
 TEST_F(BluetoothTest, MAYBE_AdvertisementData_Discovery) {
 #endif
@@ -849,7 +849,7 @@ TEST_F(BluetoothTest, MAYBE_AdvertisementData_Discovery) {
 // Tests that the Bluetooth adapter observer is notified when a device
 // advertisement is received.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, DeviceAdvertisementReceived) {
+TEST_P(BluetoothTestWinrtOnly, DeviceAdvertisementReceived) {
 #else
 TEST_F(BluetoothTest, MAYBE_DeviceAdvertisementReceived) {
 #endif
@@ -899,7 +899,7 @@ TEST_F(BluetoothTest, MAYBE_DeviceAdvertisementReceived) {
 #endif
 // Tests Advertisement Data is updated correctly during a connection.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, GetUUIDs_Connection) {
+TEST_P(BluetoothTestWinrtOnly, GetUUIDs_Connection) {
 #else
 TEST_F(BluetoothTest, MAYBE_GetUUIDs_Connection) {
 #endif
@@ -1086,7 +1086,7 @@ TEST_F(BluetoothTest, ExtraDidDiscoverServicesCall) {
 // Tests Advertisement Data is updated correctly when we start discovery
 // during a connection.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, AdvertisementData_DiscoveryDuringConnection) {
+TEST_P(BluetoothTestWinrtOnly, AdvertisementData_DiscoveryDuringConnection) {
 #else
 TEST_F(BluetoothTest, MAYBE_AdvertisementData_DiscoveryDuringConnection) {
 #endif
@@ -1225,7 +1225,7 @@ TEST_F(BluetoothTest, MAYBE_AdvertisementData_DiscoveryDuringConnection) {
   DISABLED_AdvertisementData_ConnectionDuringDiscovery
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, AdvertisementData_ConnectionDuringDiscovery) {
+TEST_P(BluetoothTestWinrtOnly, AdvertisementData_ConnectionDuringDiscovery) {
 #else
 TEST_F(BluetoothTest, MAYBE_AdvertisementData_ConnectionDuringDiscovery) {
 #endif
@@ -1421,7 +1421,7 @@ TEST_F(BluetoothTest, MAYBE_GetName_NullName) {
 #endif
 // Basic CreateGattConnection test.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, CreateGattConnection) {
+TEST_P(BluetoothTestWinrtOnly, CreateGattConnection) {
 #else
 TEST_F(BluetoothTest, MAYBE_CreateGattConnection) {
 #endif
@@ -1448,7 +1448,7 @@ TEST_F(BluetoothTest, MAYBE_CreateGattConnection) {
   DISABLED_DisconnectionNotifiesDeviceChanged
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, DisconnectionNotifiesDeviceChanged) {
+TEST_P(BluetoothTestWinrtOnly, DisconnectionNotifiesDeviceChanged) {
 #else
 TEST_F(BluetoothTest, MAYBE_DisconnectionNotifiesDeviceChanged) {
 #endif
@@ -1480,7 +1480,7 @@ TEST_F(BluetoothTest, MAYBE_DisconnectionNotifiesDeviceChanged) {
 // Creates BluetoothGattConnection instances and tests that the interface
 // functions even when some Disconnect and the BluetoothDevice is destroyed.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, BluetoothGattConnection) {
+TEST_P(BluetoothTestWinrtOnly, BluetoothGattConnection) {
 #else
 TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection) {
 #endif
@@ -1583,7 +1583,7 @@ TEST_F(BluetoothTest,
 #endif
 // Calls CreateGattConnection after already connected.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, BluetoothGattConnection_AlreadyConnected) {
+TEST_P(BluetoothTestWinrtOnly, BluetoothGattConnection_AlreadyConnected) {
 #else
 TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection_AlreadyConnected) {
 #endif
@@ -1614,7 +1614,7 @@ TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection_AlreadyConnected) {
 #endif
 // Creates BluetoothGattConnection after one exists that has disconnected.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt,
+TEST_P(BluetoothTestWinrtOnly,
        BluetoothGattConnection_NewConnectionLeavesPreviousDisconnected) {
 #else
 TEST_F(BluetoothTest,
@@ -1653,7 +1653,7 @@ TEST_F(BluetoothTest,
 #endif
 // Deletes BluetoothGattConnection causing disconnection.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt,
+TEST_P(BluetoothTestWinrtOnly,
        BluetoothGattConnection_DisconnectWhenObjectsDestroyed) {
 #else
 TEST_F(BluetoothTest,
@@ -1690,7 +1690,7 @@ TEST_F(BluetoothTest,
 #endif
 // Starts process of disconnecting and then calls BluetoothGattConnection.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, BluetoothGattConnection_DisconnectInProgress) {
+TEST_P(BluetoothTestWinrtOnly, BluetoothGattConnection_DisconnectInProgress) {
 #else
 TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection_DisconnectInProgress) {
 #endif
@@ -1740,7 +1740,7 @@ TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection_DisconnectInProgress) {
 // Calls CreateGattConnection but receives notice that the device disconnected
 // before it ever connects.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, BluetoothGattConnection_SimulateDisconnect) {
+TEST_P(BluetoothTestWinrtOnly, BluetoothGattConnection_SimulateDisconnect) {
 #else
 TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection_SimulateDisconnect) {
 #endif
@@ -1773,7 +1773,7 @@ TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection_SimulateDisconnect) {
 #endif
 // Calls CreateGattConnection & DisconnectGatt, then simulates connection.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt,
+TEST_P(BluetoothTestWinrtOnly,
        BluetoothGattConnection_DisconnectGatt_SimulateConnect) {
 #else
 TEST_F(BluetoothTest,
@@ -1819,7 +1819,7 @@ TEST_F(BluetoothTest,
 #endif
 // Calls CreateGattConnection & DisconnectGatt, then simulates disconnection.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt,
+TEST_P(BluetoothTestWinrtOnly,
        BluetoothGattConnection_DisconnectGatt_SimulateDisconnect) {
 #else
 TEST_F(BluetoothTest,
@@ -1866,7 +1866,7 @@ TEST_F(BluetoothTest,
 // Calls CreateGattConnection & DisconnectGatt, then checks that gatt services
 // have been cleaned up.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, BluetoothGattConnection_DisconnectGatt_Cleanup) {
+TEST_P(BluetoothTestWinrtOnly, BluetoothGattConnection_DisconnectGatt_Cleanup) {
 #else
 TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection_DisconnectGatt_Cleanup) {
 #endif
@@ -1924,7 +1924,7 @@ TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection_DisconnectGatt_Cleanup) {
 // Calls CreateGattConnection, but simulate errors connecting. Also, verifies
 // multiple errors should only invoke callbacks once.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, BluetoothGattConnection_ErrorAfterConnection) {
+TEST_P(BluetoothTestWinrtOnly, BluetoothGattConnection_ErrorAfterConnection) {
 #else
 TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection_ErrorAfterConnection) {
 #endif
@@ -1964,7 +1964,7 @@ TEST_F(BluetoothTest, MAYBE_BluetoothGattConnection_ErrorAfterConnection) {
 #define MAYBE_GattServices_ObserversCalls DISABLED_GattServices_ObserversCalls
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, GattServices_ObserversCalls) {
+TEST_P(BluetoothTestWinrtOnly, GattServices_ObserversCalls) {
 #else
 TEST_F(BluetoothTest, MAYBE_GattServices_ObserversCalls) {
 #endif
@@ -1994,7 +1994,7 @@ TEST_F(BluetoothTest, MAYBE_GattServices_ObserversCalls) {
   DISABLED_GattServicesDiscovered_Success
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, GattServicesDiscovered_Success) {
+TEST_P(BluetoothTestWinrtOnly, GattServicesDiscovered_Success) {
 #else
 TEST_F(BluetoothTest, MAYBE_GattServicesDiscovered_Success) {
 #endif
@@ -2090,7 +2090,7 @@ TEST_F(BluetoothTest, MAYBE_GattServicesDiscoveredError_AfterDeleted) {
 #endif
 // Classic Windows does not support disconnection.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, GattServicesDiscovered_AfterDisconnection) {
+TEST_P(BluetoothTestWinrtOnly, GattServicesDiscovered_AfterDisconnection) {
 #else
 TEST_F(BluetoothTest, MAYBE_GattServicesDiscovered_AfterDisconnection) {
 #endif
@@ -2127,7 +2127,7 @@ TEST_F(BluetoothTest, MAYBE_GattServicesDiscovered_AfterDisconnection) {
 #endif
 // Windows does not support disconnecting.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, GattServicesDiscoveredError_AfterDisconnection) {
+TEST_P(BluetoothTestWinrtOnly, GattServicesDiscoveredError_AfterDisconnection) {
 #else
 TEST_F(BluetoothTest, MAYBE_GattServicesDiscoveredError_AfterDisconnection) {
 #endif
@@ -2197,7 +2197,7 @@ TEST_F(BluetoothTest, MAYBE_GetGattServices_and_GetGattService) {
 #define MAYBE_GetGattServices_FindNone DISABLED_GetGattServices_FindNone
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, GetGattServices_FindNone) {
+TEST_P(BluetoothTestWinrtOnly, GetGattServices_FindNone) {
 #else
 TEST_F(BluetoothTest, MAYBE_GetGattServices_FindNone) {
 #endif
@@ -2224,7 +2224,7 @@ TEST_F(BluetoothTest, MAYBE_GetGattServices_FindNone) {
   DISABLED_GetGattServices_DiscoveryError
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, GetGattServices_DiscoveryError) {
+TEST_P(BluetoothTestWinrtOnly, GetGattServices_DiscoveryError) {
 #else
 TEST_F(BluetoothTest, MAYBE_GetGattServices_DiscoveryError) {
 #endif
@@ -2244,7 +2244,7 @@ TEST_F(BluetoothTest, MAYBE_GetGattServices_DiscoveryError) {
 }
 
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, GattServicesDiscovered_SomeServicesBlocked) {
+TEST_P(BluetoothTestWinrtOnly, GattServicesDiscovered_SomeServicesBlocked) {
 #else
 TEST_F(BluetoothTest, DISABLED_GattServicesDiscovered_SomeServicesBlocked) {
 #endif
@@ -2380,7 +2380,7 @@ TEST_F(BluetoothTest, MAYBE_GetPrimaryServicesByUUID) {
 }
 
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothTestWinrt, GattConnectedNameChange) {
+TEST_P(BluetoothTestWinrtOnly, GattConnectedNameChange) {
 #else
 // The SimulateGattNameChange() function is not yet available on other
 // platforms.
@@ -2408,7 +2408,7 @@ TEST_F(BluetoothTest, DISABLED_GattConnectedNameChange) {
 #if BUILDFLAG(IS_WIN)
 // WinRT sometimes calls OnConnectionStatusChanged when the status is
 // initialized and not when changed.
-TEST_P(BluetoothTestWinrt, FalseStatusChangedTest) {
+TEST_P(BluetoothTestWinrtOnly, FalseStatusChangedTest) {
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
   }
@@ -2433,7 +2433,7 @@ TEST_P(BluetoothTestWinrt, FalseStatusChangedTest) {
 #if !BUILDFLAG(IS_WIN)
 TEST_F(BluetoothTest, MAYBE_ServiceSpecificDiscovery) {
 #else
-TEST_P(BluetoothTestWinrt, ServiceSpecificDiscovery) {
+TEST_P(BluetoothTestWinrtOnly, ServiceSpecificDiscovery) {
 #endif
   if (!PlatformSupportsLowEnergy()) {
     GTEST_SKIP() << "Low Energy Bluetooth unavailable, skipping unit test.";
diff --git a/device/bluetooth/bluetooth_remote_gatt_characteristic_unittest.cc b/device/bluetooth/bluetooth_remote_gatt_characteristic_unittest.cc
index 4fac09d8fc2d0..20e70f6bdb790 100644
--- a/device/bluetooth/bluetooth_remote_gatt_characteristic_unittest.cc
+++ b/device/bluetooth/bluetooth_remote_gatt_characteristic_unittest.cc
@@ -160,6 +160,17 @@ class BluetoothRemoteGattCharacteristicTest :
     ExpectedNotifyValue(notify_value_state);
   }
 
+  // A few tests below don't behave correctly on Classic Windows, but do for
+  // WinRT. Since a #if BUILDFLAG(IS_WIN) guard is not sufficient to distinguish
+  // these two cases, this small utility function is added.
+  bool IsClassicWin() {
+#if BUILDFLAG(IS_WIN)
+    return !UsesNewBleImplementation();
+#else
+    return false;
+#endif
+  }
+
   raw_ptr<BluetoothDevice, AcrossTasksDanglingUntriaged> device_ = nullptr;
   raw_ptr<BluetoothRemoteGattService, AcrossTasksDanglingUntriaged> service_ =
       nullptr;
@@ -172,6 +183,10 @@ class BluetoothRemoteGattCharacteristicTest :
 #if BUILDFLAG(IS_WIN)
 using BluetoothRemoteGattCharacteristicTestWinrt =
     BluetoothRemoteGattCharacteristicTest;
+using BluetoothRemoteGattCharacteristicTestWin32Only =
+    BluetoothRemoteGattCharacteristicTest;
+using BluetoothRemoteGattCharacteristicTestWinrtOnly =
+    BluetoothRemoteGattCharacteristicTest;
 #endif
 
 #if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_APPLE)
@@ -579,10 +594,15 @@ TEST_F(
 // Tests ReadRemoteCharacteristic completing after Chrome objects are deleted.
 // macOS: Not applicable: This can never happen if CBPeripheral delegate is set
 // to nil.
-// Windows: Not applicable: Pending callbacks won't fire once the underlying
+// WinRT: Not applicable: Pending callbacks won't fire once the underlying
 // object is destroyed.
+#if BUILDFLAG(IS_WIN)
+TEST_P(BluetoothRemoteGattCharacteristicTestWin32Only,
+       ReadRemoteCharacteristic_AfterDeleted) {
+#else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
        MAYBE_ReadRemoteCharacteristic_AfterDeleted) {
+#endif
   ASSERT_NO_FATAL_FAILURE(FakeCharacteristicBoilerplate(
       BluetoothRemoteGattCharacteristic::PROPERTY_READ));
 
@@ -609,7 +629,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   DISABLED_ReadRemoteCharacteristic_Disconnected
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        ReadRemoteCharacteristic_Disconnected) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -656,10 +676,15 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 // Tests WriteRemoteCharacteristic completing after Chrome objects are deleted.
 // macOS: Not applicable: This can never happen if CBPeripheral
 // delegate is set to nil.
-// Windows: Not applicable: Pending callbacks won't fire once the underlying
+// WinRT: Not applicable: Pending callbacks won't fire once the underlying
 // object is destroyed.
+#if BUILDFLAG(IS_WIN)
+TEST_P(BluetoothRemoteGattCharacteristicTestWin32Only,
+       WriteRemoteCharacteristic_AfterDeleted) {
+#else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
        MAYBE_WriteRemoteCharacteristic_AfterDeleted) {
+#endif
   ASSERT_NO_FATAL_FAILURE(FakeCharacteristicBoilerplate(
       BluetoothRemoteGattCharacteristic::PROPERTY_WRITE));
 
@@ -694,10 +719,15 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 // deleted.
 // macOS: Not applicable: This can never happen if CBPeripheral
 // delegate is set to nil.
-// Windows: Not applicable: Pending callbacks won't fire once the underlying
+// WinRT: Not applicable: Pending callbacks won't fire once the underlying
 // object is destroyed.
+#if BUILDFLAG(IS_WIN)
+TEST_P(BluetoothRemoteGattCharacteristicTestWin32Only,
+       DeprecatedWriteRemoteCharacteristic_AfterDeleted) {
+#else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
        MAYBE_DeprecatedWriteRemoteCharacteristic_AfterDeleted) {
+#endif
   ASSERT_NO_FATAL_FAILURE(FakeCharacteristicBoilerplate(
       BluetoothRemoteGattCharacteristic::PROPERTY_WRITE));
 
@@ -724,7 +754,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   DISABLED_WriteRemoteCharacteristic_Disconnected
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        WriteRemoteCharacteristic_Disconnected) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -776,7 +806,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   DISABLED_DeprecatedWriteRemoteCharacteristic_Disconnected
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        DeprecatedWriteRemoteCharacteristic_Disconnected) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -885,8 +915,15 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   base::RunLoop().RunUntilIdle();
 
   EXPECT_EQ(0, observer.gatt_characteristic_value_changed_count());
-  EXPECT_TRUE(observer.last_gatt_characteristic_id().empty());
-  EXPECT_FALSE(observer.last_gatt_characteristic_uuid().IsValid());
+  // TODO(https://crbug.com/699694): Remove this #if once the bug on Windows is
+  // fixed.
+  if (IsClassicWin()) {
+    EXPECT_FALSE(observer.last_gatt_characteristic_id().empty());
+    EXPECT_TRUE(observer.last_gatt_characteristic_uuid().IsValid());
+  } else {
+    EXPECT_TRUE(observer.last_gatt_characteristic_id().empty());
+    EXPECT_FALSE(observer.last_gatt_characteristic_uuid().IsValid());
+  }
   EXPECT_TRUE(observer.last_changed_characteristic_value().empty());
 }
 
@@ -913,7 +950,10 @@ TEST_F(BluetoothRemoteGattCharacteristicTest, MAYBE_WriteRemoteCharacteristic) {
       test_vector, WriteType::kWithResponse, base::BindLambdaForTesting([&] {
         EXPECT_EQ(1, gatt_write_characteristic_attempts_);
 
-        EXPECT_EQ(0, observer.gatt_characteristic_value_changed_count());
+        // TODO(crbug.com/653291): remove this if once the bug on windows is
+        // fixed.
+        if (!IsClassicWin())
+          EXPECT_EQ(0, observer.gatt_characteristic_value_changed_count());
         EXPECT_EQ(test_vector, last_write_value_);
         loop.Quit();
       }),
@@ -958,7 +998,9 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   base::RunLoop().RunUntilIdle();
 
   EXPECT_EQ(1, gatt_write_characteristic_attempts_);
-  EXPECT_EQ(0, observer.gatt_characteristic_value_changed_count());
+  // TODO(crbug.com/653291): remove this if once the bug on windows is fixed.
+  if (!IsClassicWin())
+    EXPECT_EQ(0, observer.gatt_characteristic_value_changed_count());
   EXPECT_EQ(test_vector, last_write_value_);
 }
 
@@ -1173,25 +1215,39 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   std::vector<uint8_t> test_vector1;
   test_vector1.push_back(111);
   characteristic1_->WriteRemoteCharacteristic(
-      test_vector1, WriteType::kWithResponse, loop1.QuitClosure(),
+      test_vector1, WriteType::kWithResponse, base::BindLambdaForTesting([&] {
+        if (IsClassicWin()) {
+          EXPECT_EQ(test_vector1, last_write_value_);
+        }
+        loop1.Quit();
+      }),
       base::BindLambdaForTesting(
           [&](BluetoothGattService::GattErrorCode error_code) {
             ADD_FAILURE() << "unexpected error" << static_cast<int>(error_code);
             loop1.Quit();
           }));
-  EXPECT_EQ(test_vector1, last_write_value_);
+  if (!IsClassicWin()) {
+    EXPECT_EQ(test_vector1, last_write_value_);
+  }
 
   base::RunLoop loop2;
   std::vector<uint8_t> test_vector2;
   test_vector2.push_back(222);
   characteristic2_->WriteRemoteCharacteristic(
-      test_vector2, WriteType::kWithResponse, loop2.QuitClosure(),
+      test_vector2, WriteType::kWithResponse, base::BindLambdaForTesting([&] {
+        if (IsClassicWin()) {
+          EXPECT_EQ(test_vector2, last_write_value_);
+        }
+        loop2.Quit();
+      }),
       base::BindLambdaForTesting(
           [&](BluetoothGattService::GattErrorCode error_code) {
             ADD_FAILURE() << "unexpected error" << static_cast<int>(error_code);
             loop2.Quit();
           }));
-  EXPECT_EQ(test_vector2, last_write_value_);
+  if (!IsClassicWin()) {
+    EXPECT_EQ(test_vector2, last_write_value_);
+  }
 
   SimulateGattCharacteristicWrite(characteristic1_);
   loop1.Run();
@@ -1223,21 +1279,29 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   characteristic1_->DeprecatedWriteRemoteCharacteristic(
       test_vector1, GetCallback(Call::EXPECTED),
       GetGattErrorCallback(Call::NOT_EXPECTED));
-  EXPECT_EQ(test_vector1, last_write_value_);
+  if (!IsClassicWin())
+    EXPECT_EQ(test_vector1, last_write_value_);
 
   std::vector<uint8_t> test_vector2;
   test_vector2.push_back(222);
   characteristic2_->DeprecatedWriteRemoteCharacteristic(
       test_vector2, GetCallback(Call::EXPECTED),
       GetGattErrorCallback(Call::NOT_EXPECTED));
-  EXPECT_EQ(test_vector2, last_write_value_);
+  if (!IsClassicWin())
+    EXPECT_EQ(test_vector2, last_write_value_);
 
   EXPECT_EQ(0, callback_count_);
   EXPECT_EQ(0, error_callback_count_);
 
   SimulateGattCharacteristicWrite(characteristic1_);
+  base::RunLoop().RunUntilIdle();
+  if (IsClassicWin())
+    EXPECT_EQ(test_vector1, last_write_value_);
+
   SimulateGattCharacteristicWrite(characteristic2_);
   base::RunLoop().RunUntilIdle();
+  if (IsClassicWin())
+    EXPECT_EQ(test_vector2, last_write_value_);
 
   EXPECT_EQ(2, gatt_write_characteristic_attempts_);
   EXPECT_EQ(2, callback_count_);
@@ -2135,7 +2199,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 // Tests that a notification arriving during a pending read doesn't
 // cause a crash.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        Notification_During_ReadRemoteCharacteristic) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -2531,7 +2595,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 #endif
 // Tests multiple StartNotifySessions pending and then an error.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StartNotifySessionError_Multiple) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -2573,7 +2637,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 // Test that a GATT disconnect in a StartNotifications error callback will
 // behave correctly. Regression test for crbug.com/1107577.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StartNotifySessionDisconnectOnError) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -2645,7 +2709,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 #endif
 // Tests StartNotifySession completing before chrome objects are deleted.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StartNotifySession_BeforeDeleted) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -2740,6 +2804,42 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   }
 }
 
+#if BUILDFLAG(IS_WIN)
+// Tests StartNotifySession reentrant in start notify session error callback
+// and the reentrant start notify session error.
+TEST_P(BluetoothRemoteGattCharacteristicTestWin32Only,
+       StartNotifySession_Reentrant_Error_Error) {
+  ASSERT_NO_FATAL_FAILURE(
+      FakeCharacteristicBoilerplate(/* properties: NOTIFY */ 0x10));
+  SimulateGattDescriptor(
+      characteristic1_,
+      BluetoothGattDescriptor::ClientCharacteristicConfigurationUuid().value());
+  ASSERT_EQ(1u, characteristic1_->GetDescriptors().size());
+
+  SimulateGattNotifySessionStartError(
+      characteristic1_, BluetoothGattService::GattErrorCode::kUnknown);
+
+  characteristic1_->StartNotifySession(
+      GetReentrantStartNotifySessionSuccessCallback(Call::NOT_EXPECTED,
+                                                    characteristic1_),
+      GetReentrantStartNotifySessionErrorCallback(
+          Call::EXPECTED, characteristic1_, true /* error_in_reentrant */));
+  EXPECT_EQ(0, callback_count_);
+  SimulateGattNotifySessionStarted(characteristic1_);
+  base::RunLoop().RunUntilIdle();
+  ExpectedChangeNotifyValueAttempts(0);
+
+  // Simulate reentrant StartNotifySession request from
+  // BluetoothTestBase::ReentrantStartNotifySessionErrorCallback.
+  SimulateGattNotifySessionStarted(characteristic1_);
+  base::RunLoop().RunUntilIdle();
+  ExpectedChangeNotifyValueAttempts(0);
+  EXPECT_EQ(0, callback_count_);
+  EXPECT_EQ(2, error_callback_count_);
+  ASSERT_EQ(0u, notify_sessions_.size());
+}
+#endif
+
 #if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_APPLE)
 #define MAYBE_StopNotifySession StopNotifySession
 #else
@@ -2747,7 +2847,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 #endif
 // Tests StopNotifySession success on a characteristic that enabled Notify.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt, StopNotifySession) {
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly, StopNotifySession) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest, MAYBE_StopNotifySession) {
 #endif
@@ -2776,7 +2876,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest, MAYBE_StopNotifySession) {
 #endif
 // Tests that deleted sessions are stopped.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_SessionDeleted) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -2808,7 +2908,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 // Tests that deleting the sessions before the stop callbacks have been
 // invoked does not cause problems.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_SessionDeleted2) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -2944,7 +3044,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 #endif
 // Tests StopNotifySession success on a characteristic that enabled Indicate.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_OnIndicate) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -2977,7 +3077,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 // Tests StopNotifySession success on a characteristic that enabled Notify &
 // Indicate.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_OnNotifyAndIndicate) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -3008,7 +3108,8 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 #endif
 // Tests StopNotifySession error
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt, StopNotifySession_Error) {
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
+       StopNotifySession_Error) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest, MAYBE_StopNotifySession_Error) {
 #endif
@@ -3039,7 +3140,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest, MAYBE_StopNotifySession_Error) {
 #endif
 // Tests multiple StopNotifySession calls for a single session.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_Multiple1) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -3091,7 +3192,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 #endif
 // Tests multiple StartNotifySession calls and multiple StopNotifySession calls.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_Multiple2) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -3155,7 +3256,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 // Tests starting a new notify session before the previous stop request
 // resolves.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_StopStart) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -3210,7 +3311,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   DISABLED_StopNotifySession_StartStopStart
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_StartStopStart) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -3272,7 +3373,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 // Tests starting a new notify session before the previous stop requests
 // resolve.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_StopStopStart) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -3342,7 +3443,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   DISABLED_StopNotifySession_Reentrant_Success_Stop
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_Reentrant_Success_Stop) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -3393,7 +3494,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   DISABLED_StopNotifySession_Reentrant_Stop_StartSuccess
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_Reentrant_Stop_StartSuccess) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -3445,7 +3546,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   DISABLED_StopNotifySession_Reentrant_Stop_StartError
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        StopNotifySession_Reentrant_Stop_StartError) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -3584,8 +3685,13 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 // destroyed.
 // macOS: Not applicable: This can never happen if CBPeripheral delegate is set
 // to nil.
+#if BUILDFLAG(IS_WIN)
+TEST_P(BluetoothRemoteGattCharacteristicTestWin32Only,
+       GattCharacteristicValueChanged_AfterDeleted) {
+#else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
        MAYBE_GattCharacteristicValueChanged_AfterDeleted) {
+#endif
   ASSERT_NO_FATAL_FAILURE(StartNotifyBoilerplate(
       /* properties: NOTIFY */ 0x10, NotifyValueState::NOTIFY));
   TestBluetoothAdapterObserver observer(adapter_);
@@ -3611,7 +3717,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
   DISABLED_GattCharacteristicValueChanged_DisconnectDuring
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        GattCharacteristicValueChanged_DisconnectDuring) {
 #else
 TEST_F(BluetoothRemoteGattCharacteristicTest,
@@ -3856,7 +3962,7 @@ TEST_F(BluetoothRemoteGattCharacteristicTest,
 // a different thread.
 #if BUILDFLAG(IS_WIN)
 TEST_P(
-    BluetoothRemoteGattCharacteristicTestWinrt,
+    BluetoothRemoteGattCharacteristicTestWinrtOnly,
     WriteWithoutResponseOnlyCharacteristic_WriteRemoteCharacteristicDuringDisconnect) {
 #else
 TEST_F(
@@ -3896,7 +4002,7 @@ TEST_F(
 // a different thread.
 #if BUILDFLAG(IS_WIN)
 TEST_P(
-    BluetoothRemoteGattCharacteristicTestWinrt,
+    BluetoothRemoteGattCharacteristicTestWinrtOnly,
     WriteWithoutResponseOnlyCharacteristic_DeprecatedWriteRemoteCharacteristicDuringDisconnect) {
 #else
 TEST_F(
@@ -3926,7 +4032,7 @@ TEST_F(
   DISABLED_WriteWithoutResponseOnlyCharacteristic_CloseConnectionDuringDisconnect
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattCharacteristicTestWinrt,
+TEST_P(BluetoothRemoteGattCharacteristicTestWinrtOnly,
        WriteWithoutResponseOnlyCharacteristic_CloseConnectionDuringDisconnect) {
 #else
 TEST_F(
@@ -3964,7 +4070,7 @@ TEST_F(
 #endif
 #if BUILDFLAG(IS_WIN)
 TEST_P(
-    BluetoothRemoteGattCharacteristicTestWinrt,
+    BluetoothRemoteGattCharacteristicTestWinrtOnly,
     DeprecatedWriteWithoutResponseOnlyCharacteristic_CloseConnectionDuringDisconnect) {
 #else
 TEST_F(
@@ -4304,7 +4410,17 @@ TEST_F(BluetoothRemoteGattCharacteristicTest, ExtraDidDiscoverDescriptorsCall) {
 #if BUILDFLAG(IS_WIN)
 INSTANTIATE_TEST_SUITE_P(All,
                          BluetoothRemoteGattCharacteristicTestWinrt,
-                         ::testing::ValuesIn(kBluetoothTestWinrtParam));
+                         ::testing::ValuesIn(kBluetoothTestWinrtParamAll));
+
+INSTANTIATE_TEST_SUITE_P(
+    All,
+    BluetoothRemoteGattCharacteristicTestWin32Only,
+    ::testing::ValuesIn(kBluetoothTestWinrtParamWin32Only));
+
+INSTANTIATE_TEST_SUITE_P(
+    All,
+    BluetoothRemoteGattCharacteristicTestWinrtOnly,
+    ::testing::ValuesIn(kBluetoothTestWinrtParamWinrtOnly));
 #endif  // BUILDFLAG(IS_WIN)
 
 }  // namespace device
diff --git a/device/bluetooth/bluetooth_remote_gatt_descriptor_unittest.cc b/device/bluetooth/bluetooth_remote_gatt_descriptor_unittest.cc
index fe9430023fff1..aa358083b72c3 100644
--- a/device/bluetooth/bluetooth_remote_gatt_descriptor_unittest.cc
+++ b/device/bluetooth/bluetooth_remote_gatt_descriptor_unittest.cc
@@ -82,7 +82,7 @@ class BluetoothRemoteGattDescriptorTest :
 };
 
 #if BUILDFLAG(IS_WIN)
-using BluetoothRemoteGattDescriptorTestWinrt =
+using BluetoothRemoteGattDescriptorTestWinrtOnly =
     BluetoothRemoteGattDescriptorTest;
 #endif
 
@@ -92,7 +92,7 @@ using BluetoothRemoteGattDescriptorTestWinrt =
 #define MAYBE_GetIdentifier DISABLED_GetIdentifier
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt, GetIdentifier) {
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly, GetIdentifier) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_GetIdentifier) {
 #endif
@@ -181,7 +181,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_GetIdentifier) {
 #define MAYBE_GetUUID DISABLED_GetUUID
 #endif
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt, GetUUID) {
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly, GetUUID) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_GetUUID) {
 #endif
@@ -233,7 +233,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_GetUUID) {
 #endif
 // Tests ReadRemoteDescriptor and GetValue with empty value buffer.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt, ReadRemoteDescriptor_Empty) {
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly, ReadRemoteDescriptor_Empty) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_ReadRemoteDescriptor_Empty) {
 #endif
@@ -261,7 +261,8 @@ TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_ReadRemoteDescriptor_Empty) {
 #endif
 // Tests WriteRemoteDescriptor with empty value buffer.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt, WriteRemoteDescriptor_Empty) {
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly,
+       WriteRemoteDescriptor_Empty) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_WriteRemoteDescriptor_Empty) {
 #endif
@@ -342,7 +343,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest,
 #endif
 // Tests ReadRemoteDescriptor and GetValue with non-empty value buffer.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt, ReadRemoteDescriptor) {
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly, ReadRemoteDescriptor) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_ReadRemoteDescriptor) {
 #endif
@@ -373,7 +374,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_ReadRemoteDescriptor) {
 #endif
 // Tests WriteRemoteDescriptor with non-empty value buffer.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt, WriteRemoteDescriptor) {
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly, WriteRemoteDescriptor) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_WriteRemoteDescriptor) {
 #endif
@@ -398,7 +399,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_WriteRemoteDescriptor) {
 #endif
 // Tests ReadRemoteDescriptor and GetValue multiple times.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt, ReadRemoteDescriptor_Twice) {
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly, ReadRemoteDescriptor_Twice) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_ReadRemoteDescriptor_Twice) {
 #endif
@@ -438,7 +439,8 @@ TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_ReadRemoteDescriptor_Twice) {
 #endif
 // Tests WriteRemoteDescriptor multiple times.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt, WriteRemoteDescriptor_Twice) {
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly,
+       WriteRemoteDescriptor_Twice) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_WriteRemoteDescriptor_Twice) {
 #endif
@@ -478,7 +480,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_WriteRemoteDescriptor_Twice) {
 #endif
 // Tests ReadRemoteDescriptor on two descriptors.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt,
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly,
        ReadRemoteDescriptor_MultipleDescriptors) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest,
@@ -521,7 +523,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest,
 #endif
 // Tests WriteRemoteDescriptor on two descriptors.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt,
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly,
        WriteRemoteDescriptor_MultipleDescriptors) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest,
@@ -560,7 +562,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest,
 #endif
 // Tests ReadRemoteDescriptor asynchronous error.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt, ReadError) {
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly, ReadError) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_ReadError) {
 #endif
@@ -584,7 +586,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_ReadError) {
 #endif
 // Tests WriteRemoteDescriptor asynchronous error.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt, WriteError) {
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly, WriteError) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_WriteError) {
 #endif
@@ -679,7 +681,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest, MAYBE_WriteSynchronousError) {
 #endif
 // Tests ReadRemoteDescriptor error with a pending read operation.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt,
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly,
        ReadRemoteDescriptor_ReadPending) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest,
@@ -717,7 +719,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest,
 #endif
 // Tests WriteRemoteDescriptor error with a pending write operation.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt,
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly,
        WriteRemoteDescriptor_WritePending) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest,
@@ -756,7 +758,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest,
 #endif
 // Tests ReadRemoteDescriptor error with a pending write operation.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt,
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly,
        ReadRemoteDescriptor_WritePending) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest,
@@ -794,7 +796,7 @@ TEST_F(BluetoothRemoteGattDescriptorTest,
 #endif
 // Tests WriteRemoteDescriptor error with a pending Read operation.
 #if BUILDFLAG(IS_WIN)
-TEST_P(BluetoothRemoteGattDescriptorTestWinrt,
+TEST_P(BluetoothRemoteGattDescriptorTestWinrtOnly,
        WriteRemoteDescriptor_ReadPending) {
 #else
 TEST_F(BluetoothRemoteGattDescriptorTest,
@@ -908,9 +910,10 @@ TEST_F(BluetoothRemoteGattDescriptorTest, ReadRemoteDescriptor_NSNumber) {
 #endif  // BUILDFLAG(IS_APPLE)
 
 #if BUILDFLAG(IS_WIN)
-INSTANTIATE_TEST_SUITE_P(All,
-                         BluetoothRemoteGattDescriptorTestWinrt,
-                         ::testing::ValuesIn(kBluetoothTestWinrtParam));
+INSTANTIATE_TEST_SUITE_P(
+    All,
+    BluetoothRemoteGattDescriptorTestWinrtOnly,
+    ::testing::ValuesIn(kBluetoothTestWinrtParamWinrtOnly));
 #endif  // BUILDFLAG(IS_WIN)
 
 }  // namespace device
diff --git a/device/bluetooth/bluetooth_remote_gatt_service_unittest.cc b/device/bluetooth/bluetooth_remote_gatt_service_unittest.cc
index b9fe06b0f30e4..90b82dc5019c8 100644
--- a/device/bluetooth/bluetooth_remote_gatt_service_unittest.cc
+++ b/device/bluetooth/bluetooth_remote_gatt_service_unittest.cc
@@ -401,7 +401,12 @@ TEST_F(BluetoothRemoteGattServiceTest, MAYBE_SimulateGattServiceRemove) {
   std::string removed_service = service1->GetIdentifier();
   SimulateGattServiceRemoved(device->GetGattService(removed_service));
   base::RunLoop().RunUntilIdle();
-
+#if BUILDFLAG(IS_WIN)
+  if (!UsesNewBleImplementation()) {
+    // The GattServicesRemoved event is not implemented for WinRT.
+    EXPECT_EQ(1, observer.gatt_service_removed_count());
+  }
+#endif  // BUILDFLAG(IS_WIN)
   EXPECT_EQ(1u, device->GetGattServices().size());
   EXPECT_FALSE(device->GetGattService(removed_service));
   EXPECT_EQ(device->GetGattServices()[0], service2);
@@ -569,7 +574,7 @@ TEST_F(BluetoothRemoteGattServiceTest, ExtraDidDiscoverCharacteristicsCall) {
 #if BUILDFLAG(IS_WIN)
 INSTANTIATE_TEST_SUITE_P(All,
                          BluetoothRemoteGattServiceTestWinrt,
-                         ::testing::ValuesIn(kBluetoothTestWinrtParam));
+                         ::testing::ValuesIn(kBluetoothTestWinrtParamAll));
 #endif  // BUILDFLAG(IS_WIN)
 
 }  // namespace device
diff --git a/device/bluetooth/test/bluetooth_test_win.cc b/device/bluetooth/test/bluetooth_test_win.cc
index 3a217073a8cb0..28baa6f18e355 100644
--- a/device/bluetooth/test/bluetooth_test_win.cc
+++ b/device/bluetooth/test/bluetooth_test_win.cc
@@ -683,6 +683,12 @@ void BluetoothTestWin::FinishPendingTasks() {
 BluetoothTestWinrt::BluetoothTestWinrt() {
   std::vector<base::test::FeatureRef> enabled;
   std::vector<base::test::FeatureRef> disabled;
+  if (GetParam().new_ble_implementation_enabled) {
+    enabled.push_back(kNewBLEWinImplementation);
+    scoped_winrt_initializer_.emplace();
+  } else {
+    disabled.push_back(kNewBLEWinImplementation);
+  }
   if (GetParam().new_gatt_session_handling_enabled) {
     enabled.push_back(kNewBLEGattSessionHandling);
   } else {
@@ -700,16 +706,27 @@ BluetoothTestWinrt::~BluetoothTestWinrt() {
   notify_sessions_.clear();
 }
 
+bool BluetoothTestWinrt::UsesNewBleImplementation() const {
+  return GetParam().new_ble_implementation_enabled;
+}
 bool BluetoothTestWinrt::UsesNewGattSessionHandling() const {
+  // |kNewBLEGattSessionHandling| should have no effect if
+  // |kNewBLEWinImplementation| is off.
+  DCHECK(GetParam().new_ble_implementation_enabled);
   return GetParam().new_gatt_session_handling_enabled &&
          base::win::GetVersion() >= base::win::Version::WIN10_RS3;
 }
 
 bool BluetoothTestWinrt::UncachedGattDiscoveryForGattConnection() const {
   return GetParam().uncached_gatt_discovery_for_gatt_connection;
 }
 
 void BluetoothTestWinrt::InitWithDefaultAdapter() {
+  if (!UsesNewBleImplementation()) {
+    BluetoothTestWin::InitWithDefaultAdapter();
+    return;
+  }
+
   base::RunLoop run_loop;
   auto adapter = base::WrapRefCounted(new BluetoothAdapterWinrt());
   adapter->Initialize(run_loop.QuitClosure());
@@ -714,6 +731,11 @@ void BluetoothTestWinrt::InitWithDefaultAdapter() {
 }
 
 void BluetoothTestWinrt::InitWithoutDefaultAdapter() {
+  if (!UsesNewBleImplementation()) {
+    BluetoothTestWin::InitWithoutDefaultAdapter();
+    return;
+  }
+
   base::RunLoop run_loop;
   adapter_ = base::MakeRefCounted<TestBluetoothAdapterWinrt>(
       /*adapter=*/nullptr, /*device_information=*/nullptr,
@@ -722,6 +744,11 @@ void BluetoothTestWinrt::InitWithoutDefaultAdapter() {
 }
 
 void BluetoothTestWinrt::InitWithFakeAdapter() {
+  if (!UsesNewBleImplementation()) {
+    BluetoothTestWin::InitWithFakeAdapter();
+    return;
+  }
+
   base::RunLoop run_loop;
   adapter_ = base::MakeRefCounted<TestBluetoothAdapterWinrt>(
       Make<FakeBluetoothAdapterWinrt>(kTestAdapterAddress,
@@ -805,6 +832,10 @@ void BluetoothTestWinrt::SimulateAdapterPoweredOff() {
 
 BluetoothDevice* BluetoothTestWinrt::SimulateLowEnergyDevice(
     int device_ordinal) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateLowEnergyDevice(device_ordinal);
+  }
+
   LowEnergyDeviceData data = GetLowEnergyDeviceData(device_ordinal);
   static_cast<TestBluetoothAdapterWinrt*>(adapter_.get())
       ->watcher()
@@ -880,6 +911,10 @@ void BluetoothTestWinrt::SimulateAdvertisementError(
 }
 
 void BluetoothTestWinrt::SimulateGattConnection(BluetoothDevice* device) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattConnection(device);
+  }
+
   // Spin the message loop to make sure a device instance was obtained.
   base::RunLoop().RunUntilIdle();
   FakeBluetoothLEDeviceWinrt* const ble_device =
@@ -899,6 +934,10 @@ void BluetoothTestWinrt::SimulateGattConnection(BluetoothDevice* device) {
 
 void BluetoothTestWinrt::SimulateGattNameChange(BluetoothDevice* device,
                                                 const std::string& new_name) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattNameChange(device, new_name);
+  }
+
   auto* const ble_device =
       static_cast<TestBluetoothDeviceWinrt*>(device)->ble_device();
   DCHECK(ble_device);
@@ -907,6 +946,9 @@ void BluetoothTestWinrt::SimulateGattNameChange(BluetoothDevice* device,
 
 void BluetoothTestWinrt::SimulateStatusChangeToDisconnect(
     BluetoothDevice* device) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateStatusChangeToDisconnect(device);
+  }
   // Spin the message loop to make sure a device instance was obtained.
   base::RunLoop().RunUntilIdle();
   auto* const ble_device =
@@ -958,6 +1000,11 @@ void BluetoothTestWinrt::SimulateGattServicesDiscovered(
     BluetoothDevice* device,
     const std::vector<std::string>& uuids,
     const std::vector<std::string>& blocked_uuids) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattServicesDiscovered(device, uuids,
+                                                            blocked_uuids);
+  }
+
   auto* const ble_device =
       static_cast<TestBluetoothDeviceWinrt*>(device)->ble_device();
   DCHECK(ble_device);
@@ -965,6 +1012,10 @@ void BluetoothTestWinrt::SimulateGattServicesDiscovered(
 }
 
 void BluetoothTestWinrt::SimulateGattServicesChanged(BluetoothDevice* device) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattServicesChanged(device);
+  }
+
   auto* const ble_device =
       static_cast<TestBluetoothDeviceWinrt*>(device)->ble_device();
   DCHECK(ble_device);
@@ -973,6 +1024,10 @@ void BluetoothTestWinrt::SimulateGattServicesChanged(BluetoothDevice* device) {
 
 void BluetoothTestWinrt::SimulateGattServiceRemoved(
     BluetoothRemoteGattService* service) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattServiceRemoved(service);
+  }
+
   auto* const ble_device =
       static_cast<TestBluetoothDeviceWinrt*>(service->GetDevice())
           ->ble_device();
@@ -982,6 +1037,10 @@ void BluetoothTestWinrt::SimulateGattServiceRemoved(
 
 void BluetoothTestWinrt::SimulateGattServicesDiscoveryError(
     BluetoothDevice* device) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattServicesDiscoveryError(device);
+  }
+
   auto* const ble_device =
       static_cast<TestBluetoothDeviceWinrt*>(device)->ble_device();
   DCHECK(ble_device);
@@ -992,6 +1051,11 @@ void BluetoothTestWinrt::SimulateGattCharacteristic(
     BluetoothRemoteGattService* service,
     const std::string& uuid,
     int properties) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattCharacteristic(service, uuid,
+                                                        properties);
+  }
+
   auto* const ble_device =
       static_cast<TestBluetoothDeviceWinrt*>(service->GetDevice())
           ->ble_device();
@@ -1001,6 +1065,10 @@ void BluetoothTestWinrt::SimulateGattCharacteristic(
 
 void BluetoothTestWinrt::SimulateGattNotifySessionStarted(
     BluetoothRemoteGattCharacteristic* characteristic) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattNotifySessionStarted(characteristic);
+  }
+
   static_cast<FakeGattCharacteristicWinrt*>(
       static_cast<BluetoothRemoteGattCharacteristicWinrt*>(characteristic)
           ->GetCharacteristicForTesting())
@@ -1010,6 +1078,11 @@ void BluetoothTestWinrt::SimulateGattNotifySessionStarted(
 void BluetoothTestWinrt::SimulateGattNotifySessionStartError(
     BluetoothRemoteGattCharacteristic* characteristic,
     BluetoothGattService::GattErrorCode error_code) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattNotifySessionStartError(characteristic,
+                                                                 error_code);
+  }
+
   static_cast<FakeGattCharacteristicWinrt*>(
       static_cast<BluetoothRemoteGattCharacteristicWinrt*>(characteristic)
           ->GetCharacteristicForTesting())
@@ -1036,6 +1109,11 @@ void BluetoothTestWinrt::SimulateGattNotifySessionStopError(
 void BluetoothTestWinrt::SimulateGattCharacteristicChanged(
     BluetoothRemoteGattCharacteristic* characteristic,
     const std::vector<uint8_t>& value) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattCharacteristicChanged(characteristic,
+                                                               value);
+  }
+
   static_cast<FakeGattCharacteristicWinrt*>(
       static_cast<BluetoothRemoteGattCharacteristicWinrt*>(characteristic)
           ->GetCharacteristicForTesting())
@@ -1045,6 +1123,11 @@ void BluetoothTestWinrt::SimulateGattCharacteristicChanged(
 void BluetoothTestWinrt::SimulateGattCharacteristicRead(
     BluetoothRemoteGattCharacteristic* characteristic,
     const std::vector<uint8_t>& value) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattCharacteristicRead(characteristic,
+                                                            value);
+  }
+
   static_cast<FakeGattCharacteristicWinrt*>(
       static_cast<BluetoothRemoteGattCharacteristicWinrt*>(characteristic)
           ->GetCharacteristicForTesting())
@@ -1054,6 +1137,11 @@ void BluetoothTestWinrt::SimulateGattCharacteristicRead(
 void BluetoothTestWinrt::SimulateGattCharacteristicReadError(
     BluetoothRemoteGattCharacteristic* characteristic,
     BluetoothGattService::GattErrorCode error_code) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattCharacteristicReadError(characteristic,
+                                                                 error_code);
+  }
+
   static_cast<FakeGattCharacteristicWinrt*>(
       static_cast<BluetoothRemoteGattCharacteristicWinrt*>(characteristic)
           ->GetCharacteristicForTesting())
@@ -1062,6 +1150,10 @@ void BluetoothTestWinrt::SimulateGattCharacteristicReadError(
 
 void BluetoothTestWinrt::SimulateGattCharacteristicWrite(
     BluetoothRemoteGattCharacteristic* characteristic) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattCharacteristicWrite(characteristic);
+  }
+
   static_cast<FakeGattCharacteristicWinrt*>(
       static_cast<BluetoothRemoteGattCharacteristicWinrt*>(characteristic)
           ->GetCharacteristicForTesting())
@@ -1071,6 +1163,11 @@ void BluetoothTestWinrt::SimulateGattCharacteristicWrite(
 void BluetoothTestWinrt::SimulateGattCharacteristicWriteError(
     BluetoothRemoteGattCharacteristic* characteristic,
     BluetoothGattService::GattErrorCode error_code) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattCharacteristicWriteError(
+        characteristic, error_code);
+  }
+
   static_cast<FakeGattCharacteristicWinrt*>(
       static_cast<BluetoothRemoteGattCharacteristicWinrt*>(characteristic)
           ->GetCharacteristicForTesting())
@@ -1080,6 +1177,10 @@ void BluetoothTestWinrt::SimulateGattCharacteristicWriteError(
 void BluetoothTestWinrt::SimulateGattDescriptor(
     BluetoothRemoteGattCharacteristic* characteristic,
     const std::string& uuid) {
+  if (!UsesNewBleImplementation()) {
+    return BluetoothTestWin::SimulateGattDescriptor(characteristic, uuid);
+  }
+
   auto* const ble_device = static_cast<TestBluetoothDeviceWinrt*>(
                                characteristic->GetService()->GetDevice())
                                ->ble_device();
@@ -1123,7 +1224,8 @@ void BluetoothTestWinrt::SimulateGattDescriptorWriteError(
 }
 
 void BluetoothTestWinrt::DeleteDevice(BluetoothDevice* device) {
-  BluetoothTestBase::DeleteDevice(device);
+  (!UsesNewBleImplementation()) ? BluetoothTestWin::DeleteDevice(device)
+                                : BluetoothTestBase::DeleteDevice(device);
 }
 
 void BluetoothTestWinrt::OnFakeBluetoothDeviceConnectGattAttempt() {
diff --git a/device/bluetooth/test/bluetooth_test_win.h b/device/bluetooth/test/bluetooth_test_win.h
index bac65663329f7..230caa8ee7226 100644
--- a/device/bluetooth/test/bluetooth_test_win.h
+++ b/device/bluetooth/test/bluetooth_test_win.h
@@ -114,41 +114,68 @@ class BluetoothTestWin : public BluetoothTestBase,
 typedef BluetoothTestWin BluetoothTest;
 
 struct BluetoothTestWinrtParam {
+  // The feature state of |kNewBLEWinImplementation|.
+  bool new_ble_implementation_enabled;
   // The feature state of |kNewBLEGattSessionHandling|.
   bool new_gatt_session_handling_enabled;
   // The feature state of |kUncachedGattDiscoveryForGattConnection|.
   bool uncached_gatt_discovery_for_gatt_connection;
 
   friend std::ostream& operator<<(std::ostream& os,
                                   const BluetoothTestWinrtParam& p) {
-    return os << "{new_gatt_session_handling_enabled="
+    return os << "{new_ble_implementation_enabled="
+              << p.new_ble_implementation_enabled
+              << ", new_gatt_session_handling_enabled="
               << p.new_gatt_session_handling_enabled << "}"
               << "{uncached_gatt_discovery_for_gatt_connection="
               << p.uncached_gatt_discovery_for_gatt_connection << "}";
   }
 };
 
-constexpr BluetoothTestWinrtParam kBluetoothTestWinrtParam[] = {
-    {/*new_gatt_session_handling_enabled=*/true,
-     /*uncached_gatt_discovery_for_gatt_connection=*/true},
-    {/*new_gatt_session_handling_enabled=*/true,
-     /*uncached_gatt_discovery_for_gatt_connection=*/false},
-    {/*new_gatt_session_handling_enabled=*/false,
-     /*uncached_gatt_discovery_for_gatt_connection=*/true},
-    {/*new_gatt_session_handling_enabled=*/false,
-     /*uncached_gatt_discovery_for_gatt_connection=*/false},
+constexpr BluetoothTestWinrtParam kBluetoothTestWinrtParamAll[] = {
+    {false,/*new_gatt_session_handling_enabled=*/true,
+     /*uncached_gatt_discovery_for_gatt_connection=*/true},
+    {false,/*new_gatt_session_handling_enabled=*/true,
+     /*uncached_gatt_discovery_for_gatt_connection=*/false},
+    {false,/*new_gatt_session_handling_enabled=*/false,
+     /*uncached_gatt_discovery_for_gatt_connection=*/true},
+    {false,/*new_gatt_session_handling_enabled=*/false,
+     /*uncached_gatt_discovery_for_gatt_connection=*/false},
+    {true,/*new_gatt_session_handling_enabled=*/true,
+     /*uncached_gatt_discovery_for_gatt_connection=*/true},
+    {true,/*new_gatt_session_handling_enabled=*/true,
+     /*uncached_gatt_discovery_for_gatt_connection=*/false},
+    {true,/*new_gatt_session_handling_enabled=*/false,
+     /*uncached_gatt_discovery_for_gatt_connection=*/true},
+    {true,/*new_gatt_session_handling_enabled=*/false,
+     /*uncached_gatt_discovery_for_gatt_connection=*/false},
 };
 
-// This test suite represents tests that are parameterized on Windows. This
-// requires declaring tests in the following way:
-//
-// TEST_P(BluetoothTestWinrt, YourTestName).
+constexpr BluetoothTestWinrtParam kBluetoothTestWinrtParamWinrtOnly[] = {
+    {true, false},
+    {true, true},
+};
+
+constexpr BluetoothTestWinrtParam kBluetoothTestWinrtParamWin32Only[] = {
+    {false, false},
+    {false, true},
+};
+
+// This test suite represents tests that should run with the new BLE
+// implementation both enabled and disabled. This requires declaring tests
+// in the following way: TEST_P(BluetoothTestWinrt, YourTestName).
 //
 // Test suites inheriting from this class should be instantiated as
 //
 // INSTANTIATE_TEST_SUITE_P(
 //     All, FooTestSuiteWinrt,
-//     ::testing::ValuesIn(kBluetoothTestWinrtParam>));
+//     ::testing::ValuesIn(
+//         <kBluetoothTestWinrtParamWin32Only |
+//          kBluetoothTestWinrtParamWinrtOnly |
+//          kBluetoothTestWinrtParamAll>));
+//
+// depending on whether they should run only the old or new implementation or
+// both.
 class BluetoothTestWinrt
     : public BluetoothTestWin,
       public ::testing::WithParamInterface<BluetoothTestWinrtParam> {
@@ -150,6 +171,7 @@ class BluetoothTestWinrt
 
   ~BluetoothTestWinrt() override;
 
+  bool UsesNewBleImplementation() const;
   bool UsesNewGattSessionHandling() const;
   bool UncachedGattDiscoveryForGattConnection() const;
 
@@ -251,10 +273,12 @@ class BluetoothTestWinrt
 
  private:
   base::test::ScopedFeatureList scoped_feature_list_;
-  base::win::ScopedWinrtInitializer scoped_winrt_initializer_;
+  absl::optional<base::win::ScopedWinrtInitializer> scoped_winrt_initializer_;
   int gatt_discovery_attempts_with_uncached_mode_ = 0;
 };
 
+using BluetoothTestWinrtOnly = BluetoothTestWinrt;
+
 }  // namespace device
 
 #endif  // DEVICE_BLUETOOTH_TEST_BLUETOOTH_TEST_WIN_H_
