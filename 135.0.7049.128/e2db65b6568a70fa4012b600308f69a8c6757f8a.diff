diff --git a/ui/base/l10n/l10n_util_win.cc b/ui/base/l10n/l10n_util_win.cc
index 473e196a4b8c5..4f1bac3a6ccc9 100644
--- a/ui/base/l10n/l10n_util_win.cc
+++ b/ui/base/l10n/l10n_util_win.cc
@@ -44,6 +44,14 @@ base::LazyInstance<OverrideLocaleHolder>::DestructorAtExit
 
 namespace l10n_util {
 
+int GetExtendedStyles() {
+  return !base::i18n::IsRTL() ? 0 : WS_EX_LAYOUTRTL | WS_EX_RTLREADING;
+}
+
+DWORD GetExtendedTooltipStyles() {
+  return base::i18n::IsRTL() ? WS_EX_LAYOUTRTL : 0;
+}
+
 void HWNDSetRTLLayout(HWND hwnd) {
   LONG ex_style = ::GetWindowLong(hwnd, GWL_EXSTYLE);
 
diff --git a/ui/base/l10n/l10n_util_win.h b/ui/base/l10n/l10n_util_win.h
index 4fd7e90387191..34cdf0609a471 100644
--- a/ui/base/l10n/l10n_util_win.h
+++ b/ui/base/l10n/l10n_util_win.h
@@ -18,6 +18,17 @@ struct FontAdjustment;
 
 namespace l10n_util {
 
+// Returns the locale-dependent extended window styles.
+// This function is used for adding locale-dependent extended window styles
+// (e.g. WS_EX_LAYOUTRTL, WS_EX_RTLREADING, etc.) when creating a window.
+// Callers should OR this value into their extended style value when creating
+// a window.
+COMPONENT_EXPORT(UI_BASE) int GetExtendedStyles();
+
+// TODO(xji):
+// This is a temporary name, it will eventually replace GetExtendedStyles
+COMPONENT_EXPORT(UI_BASE) DWORD GetExtendedTooltipStyles();
+
 // Give an HWND, this function sets the WS_EX_LAYOUTRTL extended style for the
 // underlying window. When this style is set, the UI for the window is going to
 // be mirrored. This is generally done for the UI of right-to-left languages
diff --git a/ui/views/widget/widget.h b/ui/views/widget/widget.h
index 42c7ccb7a26f0..30bb719f6036c 100644
--- a/ui/views/widget/widget.h
+++ b/ui/views/widget/widget.h
@@ -321,6 +321,8 @@ class VIEWS_EXPORT Widget : public internal::NativeWidgetDelegate,
     // See Widget class comment above.
     Ownership ownership;
 
+    bool mirror_origin_in_rtl = false;
+
     ShadowType shadow_type = ShadowType::kDefault;
 
     // A hint about the size of the shadow if the type is ShadowType::kDrop. May
diff --git a/ui/views/widget/widget_hwnd_utils.cc b/ui/views/widget/widget_hwnd_utils.cc
index f28c1d1fb5581..1dd3450bb5f93 100644
--- a/ui/views/widget/widget_hwnd_utils.cc
+++ b/ui/views/widget/widget_hwnd_utils.cc
@@ -47,6 +47,8 @@ void CalculateWindowStylesFromInitParams(
   if (params.EffectiveZOrderLevel() != ui::ZOrderLevel::kNormal) {
     *ex_style |= WS_EX_TOPMOST;
   }
+  if (params.mirror_origin_in_rtl)
+    *ex_style |= l10n_util::GetExtendedTooltipStyles();
   if (params.shadow_type == Widget::InitParams::ShadowType::kDrop) {
     *class_style |= CS_DROPSHADOW;
   }
