diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 0a30e2daef3db..cf05e05ccbcaa 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -675,6 +675,13 @@ const Experiment kExperiments[] = {
      flag_descriptions::kAutofillEnableCardBenefitsForBmoDescription, kOsAll,
      FEATURE_VALUE_TYPE(autofill::features::kAutofillEnableCardBenefitsForBmo)},
 
+  {
+    "enable-captive-portal-detection",
+    "Enable captive portal detection.",
+    "Check for captive portals and open a new tab at the login page if one is found.",
+    kOsMac | kOsWin | kOsLinux | kOsCrOS,
+    SINGLE_VALUE_TYPE(switches::kCaptivePortalDetection)
+  },
 #if BUILDFLAG(IS_WIN)
     {"windows-system-tracing", flag_descriptions::kWindowsSystemTracingName,
      flag_descriptions::kWindowsSystemTracingDescription, kOsWin,
diff --git a/components/captive_portal/content/captive_portal_service.cc b/components/captive_portal/content/captive_portal_service.cc
index e449ae06b48e8..e48ef44e17735 100644
--- a/components/captive_portal/content/captive_portal_service.cc
+++ b/components/captive_portal/content/captive_portal_service.cc
@@ -7,12 +7,14 @@
 #include <memory>
 
 #include "base/check_op.h"
+#include "base/command_line.h"
 #include "base/functional/bind.h"
 #include "base/functional/callback_helpers.h"
 #include "base/metrics/histogram_macros.h"
 #include "base/notreached.h"
 #include "base/time/tick_clock.h"
 #include "build/build_config.h"
+#include "chrome/common/chrome_switches.h"
 #include "components/captive_portal/core/captive_portal_types.h"
 #include "components/embedder_support/pref_names.h"
 #include "components/prefs/pref_service.h"
@@ -239,7 +241,9 @@ void CaptivePortalService::UpdateEnabledState() {
   DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
   bool enabled_before = enabled_;
   enabled_ = testing_state_ != DISABLED_FOR_TESTING &&
-             resolve_errors_with_web_service_.GetValue();
+             resolve_errors_with_web_service_.GetValue() &&
+             base::CommandLine::ForCurrentProcess()->HasSwitch(
+                 switches::kCaptivePortalDetection);
 
   if (enabled_before == enabled_)
     return;
diff --git a/chrome/common/chrome_switches.cc b/chrome/common/chrome_switches.cc
index 7864b300669d5..488824ad2e99c 100644
--- a/chrome/common/chrome_switches.cc
+++ b/chrome/common/chrome_switches.cc
@@ -134,6 +134,10 @@ const char kAutomationReinitializeOnChannelError[] =
 constexpr char kBypassAccountAlreadyUsedByAnotherProfileCheck[] =
     "bypass-account-already-used-by-another-profile-check";
 
+// This enables automatic captive portal checking on certain network errors.
+// If a captive portal is detected, a login tab will be opened.
+const char kCaptivePortalDetection[]        = "enable-captive-portal-detection";
+
 // How often (in seconds) to check for updates. Should only be used for testing
 // purposes.
 const char kCheckForUpdateIntervalSec[]     = "check-for-update-interval";
diff --git a/chrome/common/chrome_switches.h b/chrome/common/chrome_switches.h
index 987920f8d02ad..734d58f4119f5 100644
--- a/chrome/common/chrome_switches.h
+++ b/chrome/common/chrome_switches.h
@@ -51,6 +51,7 @@ extern const char kAutoLaunchAtStartup[];
 extern const char kAutoSelectTabCaptureSourceByTitle[];
 extern const char kAutoSelectWindowCaptureSourceByTitle[];
 extern const char kBypassAccountAlreadyUsedByAnotherProfileCheck[];
+extern const char kCaptivePortalDetection[];
 extern const char kCheckForUpdateIntervalSec[];
 extern const char kCipherSuiteBlacklist[];
 extern const char kCrashOnHangThreads[];
