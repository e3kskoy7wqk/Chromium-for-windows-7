diff --git a/third_party/blink/common/features.cc b/third_party/blink/common/features.cc
index 6d7bca87bfb3b..56472d4afd2fe 100644
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -1380,6 +1380,11 @@ BASE_FEATURE(kPreloadSystemFonts,
 const base::FeatureParam<std::string> kPreloadSystemFontsTargets{
     &kPreloadSystemFonts, "preload_system_fonts_targets", "[]"};
 
+BASE_FEATURE_PARAM(bool,
+                   kPreloadSystemFontsFromPage,
+                   &kPreloadSystemFonts,
+                   "preload_system_fonts_from_page",
+                   false);
 BASE_FEATURE_PARAM(int,
                    kPreloadSystemFontsRequiredMemoryGB,
                    &kPreloadSystemFonts,
diff --git a/third_party/blink/public/common/features.h b/third_party/blink/public/common/features.h
index 0e80ae8a330e2..d7e6e9f3b4d53 100644
--- a/third_party/blink/public/common/features.h
+++ b/third_party/blink/public/common/features.h
@@ -934,6 +934,10 @@ BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kPreloadSystemFonts);
 BLINK_COMMON_EXPORT extern const base::FeatureParam<std::string>
     kPreloadSystemFontsTargets;
 
+BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE_PARAM(
+    bool,
+    kPreloadSystemFontsFromPage);
+
 BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE_PARAM(
     int,
     kPreloadSystemFontsRequiredMemoryGB);
diff --git a/third_party/blink/renderer/core/exported/web_view_impl.cc b/third_party/blink/renderer/core/exported/web_view_impl.cc
index 952d182bf322e..ff49a74872396 100644
--- a/third_party/blink/renderer/core/exported/web_view_impl.cc
+++ b/third_party/blink/renderer/core/exported/web_view_impl.cc
@@ -477,17 +477,6 @@ void ForEachFrameWidgetControlledByView(
   }
 }
 
-void MaybePreloadSystemFonts(Page* page) {
-  static bool is_first_run = true;
-  if (!is_first_run) {
-    return;
-  }
-  is_first_run = false;
-
-  page->GetAgentGroupScheduler().DefaultTaskRunner()->PostTask(
-      FROM_HERE, WTF::BindOnce([]() { FontCache::MaybePreloadSystemFonts(); }));
-}
-
 }  // namespace
 
 // WebView ----------------------------------------------------------------
@@ -3564,8 +3553,6 @@ void WebViewImpl::UpdateRendererPreferences(
     UpdateUseOverlayScrollbar(renderer_preferences_.use_overlay_scrollbar);
   }
 #endif
-
-  MaybePreloadSystemFonts(GetPage());
 }
 
 void WebViewImpl::SetHistoryIndexAndLength(int32_t history_index,
diff --git a/third_party/blink/renderer/core/page/page.cc b/third_party/blink/renderer/core/page/page.cc
index ff650710bce5f..9e3f1b818d939 100644
--- a/third_party/blink/renderer/core/page/page.cc
+++ b/third_party/blink/renderer/core/page/page.cc
@@ -279,6 +279,13 @@ Page::Page(base::PassKey<Page>,
                                !color_provider_colors->IsEmpty()
                            ? *color_provider_colors
                            : ColorProviderColorMaps::CreateDefault());
+  if (is_ordinary_) {
+    static const bool preload_system_fonts_from_page =
+        features::kPreloadSystemFontsFromPage.Get();
+    if (preload_system_fonts_from_page) {
+      FontCache::MaybePreloadSystemFonts();
+    }
+  }
 }
 
 Page::~Page() {
diff --git a/third_party/blink/renderer/platform/fonts/font_global_context.cc b/third_party/blink/renderer/platform/fonts/font_global_context.cc
index 0bc096be75be6..1abc5f9949a20 100644
--- a/third_party/blink/renderer/platform/fonts/font_global_context.cc
+++ b/third_party/blink/renderer/platform/fonts/font_global_context.cc
@@ -5,6 +5,7 @@
 #include "third_party/blink/renderer/platform/fonts/font_global_context.h"
 
 #include "base/memory/ptr_util.h"
+#include "third_party/blink/public/common/features.h"
 #include "third_party/blink/renderer/platform/fonts/font_cache.h"
 #include "third_party/blink/renderer/platform/fonts/font_unique_name_lookup.h"
 #include "third_party/blink/renderer/platform/fonts/shaping/harfbuzz_face.h"
@@ -97,6 +98,11 @@ void FontGlobalContext::Init() {
   if (auto* name_lookup = FontGlobalContext::Get().GetFontUniqueNameLookup())
     name_lookup->Init();
   HarfBuzzFace::Init();
+  // If `kPreloadSystemFontsFromPage` feature param returns true,
+  // 'PreloadSystemFonts' is triggered from Page instead of here.
+  if (!features::kPreloadSystemFontsFromPage.Get()) {
+    FontCache::MaybePreloadSystemFonts();
+  }
 }
 
 }  // namespace blink
