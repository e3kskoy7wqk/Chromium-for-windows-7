

diff --git a/base/win/default_apps_util.cc b/base/win/default_apps_util.cc
index 76ef576d35987..795d7f435ec18 100644
--- a/base/win/default_apps_util.cc
+++ b/base/win/default_apps_util.cc
@@ -33,6 +33,10 @@ std::wstring GetTargetForDefaultAppsSettings(std::wstring_view protocol) {
 
 namespace base::win {
 
+bool CanLaunchDefaultAppsSettingsModernDialog() {
+  return GetVersion() >= Version::WIN8;
+}
+
 bool LaunchDefaultAppsSettingsModernDialog(std::wstring_view protocol) {
   // The appModelId looks arbitrary but it is the same in Win8 and Win10. There
   // is no easy way to retrieve the appModelId from the registry.
@@ -40,6 +44,9 @@ bool LaunchDefaultAppsSettingsModernDialog(std::wstring_view protocol) {
       L"windows.immersivecontrolpanel_cw5n1h2txyewy"
       L"!microsoft.windows.immersivecontrolpanel";
 
+  if (!CanLaunchDefaultAppsSettingsModernDialog())
+    return false;
+
   Microsoft::WRL::ComPtr<IApplicationActivationManager> activator;
   HRESULT hr =
       ::CoCreateInstance(CLSID_ApplicationActivationManager, nullptr,
diff --git a/base/win/default_apps_util.h b/base/win/default_apps_util.h
index 1634f549d6378..ed92c3cc1863a 100644
--- a/base/win/default_apps_util.h
+++ b/base/win/default_apps_util.h
@@ -11,6 +11,10 @@
 
 namespace base::win {
 
+// Returns true if the OS has a default apps settings dialog. This method
+// returns false on Win7.
+BASE_EXPORT bool CanLaunchDefaultAppsSettingsModernDialog();
+
 // Launches the Windows 'settings' modern app with the 'default apps' view
 // focused. On Windows 10, if `protocol` is not empty, it also highlights
 // the `protocol` in the dialog. Returns true if the default apps dialog was
diff --git a/chrome/browser/ui/webui/app_management/app_management_page_handler_base.cc b/chrome/browser/ui/webui/app_management/app_management_page_handler_base.cc
index af77dd2368514..0c40a538c06eb 100644
--- a/chrome/browser/ui/webui/app_management/app_management_page_handler_base.cc
+++ b/chrome/browser/ui/webui/app_management/app_management_page_handler_base.cc
@@ -95,7 +95,7 @@ bool ShouldHideStoragePermission(const std::string app_id) {
 // will be shown instead.
 bool CanShowDefaultAppAssociationsUi() {
 #if BUILDFLAG(IS_WIN)
-  return true;
+  return base::win::CanLaunchDefaultAppsSettingsModernDialog();
 #else
   return false;
 #endif
