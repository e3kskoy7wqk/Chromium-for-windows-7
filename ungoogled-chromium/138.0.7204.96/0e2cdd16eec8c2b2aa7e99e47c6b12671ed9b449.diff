

diff --git a/chrome/browser/win/conflicts/incompatible_applications_browsertest.cc b/chrome/browser/win/conflicts/incompatible_applications_browsertest.cc
index 8f0472c72b555..a9360bf859052 100644
--- a/chrome/browser/win/conflicts/incompatible_applications_browsertest.cc
+++ b/chrome/browser/win/conflicts/incompatible_applications_browsertest.cc
@@ -16,6 +16,7 @@
 #include "base/threading/thread_restrictions.h"
 #include "base/win/registry.h"
 #include "base/win/win_util.h"
+#include "base/win/windows_version.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/win/conflicts/incompatible_applications_updater.h"
 #include "chrome/browser/win/conflicts/installed_applications.h"
@@ -199,6 +200,9 @@ constexpr wchar_t IncompatibleApplicationsBrowserTest::kApplicationName[];
 // page is shown after a browser crash.
 IN_PROC_BROWSER_TEST_F(IncompatibleApplicationsBrowserTest,
                        InjectIncompatibleDLL) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   // Create the observer early so the change is guaranteed to be observed.
   auto incompatible_applications_observer =
       std::make_unique<IncompatibleApplicationsObserver>();
diff --git a/chrome/browser/win/conflicts/incompatible_applications_updater.cc b/chrome/browser/win/conflicts/incompatible_applications_updater.cc
index 49dd22d2292e6..249c5a478d779 100644
--- a/chrome/browser/win/conflicts/incompatible_applications_updater.cc
+++ b/chrome/browser/win/conflicts/incompatible_applications_updater.cc
@@ -15,6 +15,7 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/values.h"
 #include "base/win/registry.h"
+#include "base/win/windows_version.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/win/conflicts/module_database.h"
 #include "chrome/browser/win/conflicts/module_info.h"
@@ -258,8 +259,9 @@ void IncompatibleApplicationsUpdater::RegisterLocalStatePrefs(
 
 // static
 bool IncompatibleApplicationsUpdater::IsWarningEnabled() {
-  return base::FeatureList::IsEnabled(
-      features::kIncompatibleApplicationsWarning);
+  return base::win::GetVersion() >= base::win::Version::WIN10 &&
+         base::FeatureList::IsEnabled(
+             features::kIncompatibleApplicationsWarning);
 }
 
 // static
diff --git a/chrome/browser/win/conflicts/incompatible_applications_updater_unittest.cc b/chrome/browser/win/conflicts/incompatible_applications_updater_unittest.cc
index 71894b8c92508..30e9639dc624c 100644
--- a/chrome/browser/win/conflicts/incompatible_applications_updater_unittest.cc
+++ b/chrome/browser/win/conflicts/incompatible_applications_updater_unittest.cc
@@ -13,6 +13,7 @@
 #include "base/test/scoped_feature_list.h"
 #include "base/test/test_reg_util_win.h"
 #include "base/win/registry.h"
+#include "base/win/windows_version.h"
 #include "chrome/browser/win/conflicts/module_info.h"
 #include "chrome/browser/win/conflicts/module_list_filter.h"
 #include "chrome/common/chrome_features.h"
@@ -188,6 +189,9 @@ class IncompatibleApplicationsUpdaterTest : public testing::Test,
 // Tests that when the Local State cache is empty, no incompatible applications
 // are returned.
 TEST_F(IncompatibleApplicationsUpdaterTest, EmptyCache) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   EXPECT_FALSE(IncompatibleApplicationsUpdater::HasCachedApplications());
   EXPECT_TRUE(IncompatibleApplicationsUpdater::GetCachedApplications().empty());
 }
@@ -195,6 +199,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest, EmptyCache) {
 // IncompatibleApplicationsUpdater doesn't do anything when there is no
 // registered installed applications.
 TEST_F(IncompatibleApplicationsUpdaterTest, NoIncompatibleApplications) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   auto incompatible_applications_updater =
       CreateIncompatibleApplicationsUpdater();
 
@@ -209,6 +216,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest, NoIncompatibleApplications) {
 }
 
 TEST_F(IncompatibleApplicationsUpdaterTest, NoTiedApplications) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   auto incompatible_applications_updater =
       CreateIncompatibleApplicationsUpdater();
 
@@ -229,6 +239,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest, NoTiedApplications) {
 }
 
 TEST_F(IncompatibleApplicationsUpdaterTest, OneIncompatibility) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   AddIncompatibleApplication(dll1_, L"Foo", Option::ADD_REGISTRY_ENTRY);
 
   auto incompatible_applications_updater =
@@ -252,6 +265,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest, OneIncompatibility) {
 }
 
 TEST_F(IncompatibleApplicationsUpdaterTest, SameModuleMultipleApplications) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   AddIncompatibleApplication(dll1_, L"Foo", Option::ADD_REGISTRY_ENTRY);
   AddIncompatibleApplication(dll1_, L"Bar", Option::ADD_REGISTRY_ENTRY);
 
@@ -276,6 +292,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest, SameModuleMultipleApplications) {
 
 TEST_F(IncompatibleApplicationsUpdaterTest,
        MultipleCallsToOnModuleDatabaseIdle) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   AddIncompatibleApplication(dll1_, L"Foo", Option::ADD_REGISTRY_ENTRY);
   AddIncompatibleApplication(dll2_, L"Bar", Option::ADD_REGISTRY_ENTRY);
 
@@ -315,6 +334,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest,
 // the list isn't tied to the lifetime of the IncompatibleApplicationsUpdater
 // instance. It is assumed that the Local State file works as intended.
 TEST_F(IncompatibleApplicationsUpdaterTest, PersistsThroughRestarts) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   AddIncompatibleApplication(dll1_, L"Foo", Option::ADD_REGISTRY_ENTRY);
 
   auto incompatible_applications_updater =
@@ -336,6 +358,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest, PersistsThroughRestarts) {
 
 // Tests that applications that do not have a registry entry are removed.
 TEST_F(IncompatibleApplicationsUpdaterTest, StaleEntriesRemoved) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   AddIncompatibleApplication(dll1_, L"Foo", Option::ADD_REGISTRY_ENTRY);
   AddIncompatibleApplication(dll2_, L"Bar", Option::NO_REGISTRY_ENTRY);
 
@@ -358,6 +383,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest, StaleEntriesRemoved) {
 }
 
 TEST_F(IncompatibleApplicationsUpdaterTest, IgnoreNotLoadedModules) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   AddIncompatibleApplication(dll1_, L"Foo", Option::ADD_REGISTRY_ENTRY);
 
   auto incompatible_applications_updater =
@@ -383,6 +411,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest, IgnoreNotLoadedModules) {
 // Tests that modules with a matching certificate subject are allowlisted.
 TEST_F(IncompatibleApplicationsUpdaterTest,
        allowlistMatchingCertificateSubject) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   AddIncompatibleApplication(dll1_, L"Foo", Option::ADD_REGISTRY_ENTRY);
 
   auto incompatible_applications_updater =
@@ -407,6 +438,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest,
 
 // Registered modules are defined as either a shell extension or an IME.
 TEST_F(IncompatibleApplicationsUpdaterTest, IgnoreRegisteredModules) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   AddIncompatibleApplication(dll1_, L"Shell Extension",
                              Option::ADD_REGISTRY_ENTRY);
   AddIncompatibleApplication(dll2_, L"Input Method Editor",
@@ -446,6 +480,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest, IgnoreRegisteredModules) {
 }
 
 TEST_F(IncompatibleApplicationsUpdaterTest, IgnoreModulesAddedToTheBlocklist) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   AddIncompatibleApplication(dll1_, L"Blocklisted Application",
                              Option::ADD_REGISTRY_ENTRY);
 
@@ -469,6 +506,9 @@ TEST_F(IncompatibleApplicationsUpdaterTest, IgnoreModulesAddedToTheBlocklist) {
 }
 
 TEST_F(IncompatibleApplicationsUpdaterTest, DisableModuleAnalysis) {
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   AddIncompatibleApplication(dll1_, L"Foo", Option::ADD_REGISTRY_ENTRY);
 
   auto incompatible_applications_updater =
diff --git a/chrome/browser/win/conflicts/module_blocklist_cache_updater.cc b/chrome/browser/win/conflicts/module_blocklist_cache_updater.cc
index 96de4b6f752fa..432158edd4490 100644
--- a/chrome/browser/win/conflicts/module_blocklist_cache_updater.cc
+++ b/chrome/browser/win/conflicts/module_blocklist_cache_updater.cc
@@ -20,6 +20,7 @@
 #include "base/task/thread_pool.h"
 #include "base/time/time.h"
 #include "base/win/registry.h"
+#include "base/win/windows_version.h"
 #include "chrome/browser/win/conflicts/module_blocklist_cache_util.h"
 #include "chrome/browser/win/conflicts/module_database.h"
 #include "chrome/browser/win/conflicts/module_info_util.h"
@@ -172,7 +173,8 @@ ModuleBlocklistCacheUpdater::~ModuleBlocklistCacheUpdater() {
 
 // static
 bool ModuleBlocklistCacheUpdater::IsBlockingEnabled() {
-  return base::FeatureList::IsEnabled(features::kThirdPartyModulesBlocking);
+  return base::win::GetVersion() >= base::win::Version::WIN8 &&
+         base::FeatureList::IsEnabled(features::kThirdPartyModulesBlocking);
 }
 
 // static
diff --git a/chrome/browser/win/conflicts/third_party_blocking_browsertest.cc b/chrome/browser/win/conflicts/third_party_blocking_browsertest.cc
index 6cf4b875c805f..0d43b794fff01 100644
--- a/chrome/browser/win/conflicts/third_party_blocking_browsertest.cc
+++ b/chrome/browser/win/conflicts/third_party_blocking_browsertest.cc
@@ -14,6 +14,7 @@
 #include "base/test/scoped_feature_list.h"
 #include "base/test/test_reg_util_win.h"
 #include "base/win/registry.h"
+#include "base/win/windows_version.h"
 #include "chrome/browser/win/conflicts/module_blocklist_cache_updater.h"
 #include "chrome/browser/win/conflicts/module_blocklist_cache_util.h"
 #include "chrome/browser/win/conflicts/module_database.h"
@@ -158,6 +159,9 @@ class ThirdPartyBlockingBrowserTest : public InProcessBrowserTest {
 //       browser launch.
 IN_PROC_BROWSER_TEST_F(ThirdPartyBlockingBrowserTest,
                        CreateModuleBlocklistCache) {
+  if (base::win::GetVersion() < base::win::Version::WIN8)
+    return;
+
   // Create the observer early so the change is guaranteed to be observed.
   ThirdPartyRegistryKeyObserver third_party_registry_key_observer;
   ASSERT_TRUE(third_party_registry_key_observer.StartWatching());
diff --git a/chrome/browser/win/conflicts/third_party_conflicts_manager_unittest.cc b/chrome/browser/win/conflicts/third_party_conflicts_manager_unittest.cc
index 61d90b6d1a5e2..468d3bc638ed1 100644
--- a/chrome/browser/win/conflicts/third_party_conflicts_manager_unittest.cc
+++ b/chrome/browser/win/conflicts/third_party_conflicts_manager_unittest.cc
@@ -15,6 +15,7 @@
 #include "base/path_service.h"
 #include "base/run_loop.h"
 #include "base/test/scoped_feature_list.h"
+#include "base/win/windows_version.h"
 #include "chrome/browser/win/conflicts/module_info.h"
 #include "chrome/browser/win/conflicts/proto/module_list.pb.h"
 #include "chrome/common/chrome_features.h"
@@ -126,8 +127,11 @@ TEST_F(ThirdPartyConflictsManagerTest, InitializeUpdaters) {
 
   ASSERT_TRUE(final_state().has_value());
 
-  EXPECT_EQ(final_state().value(),
-            ThirdPartyConflictsManager::State::kWarningAndBlockingInitialized);
+  const auto kExpectedFinalState =
+      base::win::GetVersion() >= base::win::Version::WIN10
+          ? ThirdPartyConflictsManager::State::kWarningAndBlockingInitialized
+          : ThirdPartyConflictsManager::State::kBlockingInitialized;
+  EXPECT_EQ(final_state().value(), kExpectedFinalState);
 }
 
 TEST_F(ThirdPartyConflictsManagerTest, InvalidModuleList) {
diff --git a/chrome/browser/win/parental_controls.cc b/chrome/browser/win/parental_controls.cc
index 3ec0d8c92bd0a..1496bf8047422 100644
--- a/chrome/browser/win/parental_controls.cc
+++ b/chrome/browser/win/parental_controls.cc
@@ -24,6 +24,7 @@
 #include "base/win/registry.h"
 #include "base/win/win_util.h"
 #include "base/win/windows_types.h"
+#include "base/win/windows_version.h"
 
 namespace {
 
@@ -136,7 +137,8 @@ class WinParentalControlsValue {
 
     // Parental controls APIs are not fully supported in Win10 and beyond, so
     // check registry properties for restictions.
-    UpdateParentalControlsFromRegistry(&controls);
+    if (base::win::GetVersion() >= base::win::Version::WIN10)
+      UpdateParentalControlsFromRegistry(&controls);
 
     return controls;
   }
diff --git a/chrome/browser/win/titlebar_config.cc b/chrome/browser/win/titlebar_config.cc
index edefb9090e369..d9c5f6503dba3 100644
--- a/chrome/browser/win/titlebar_config.cc
+++ b/chrome/browser/win/titlebar_config.cc
@@ -31,7 +31,8 @@ bool ShouldAlwaysUseSystemTitlebar() {
       base::CommandLine::ForCurrentProcess()->HasSwitch(
           switches::kDisableWindows10CustomTitlebar);
 
-  return custom_titlebar_disabled;
+  return custom_titlebar_disabled ||
+         base::win::GetVersion() < base::win::Version::WIN10;
 }
 
 bool ShouldBrowserUseMicaTitlebar(BrowserView* browser_view) {
