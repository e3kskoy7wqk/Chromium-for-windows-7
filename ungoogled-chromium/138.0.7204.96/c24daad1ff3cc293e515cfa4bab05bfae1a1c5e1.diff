

diff --git a/ui/color/win/accent_color_observer.cc b/ui/color/win/accent_color_observer.cc
index 59a9bf26962fc..b14a41048b269 100644
--- a/ui/color/win/accent_color_observer.cc
+++ b/ui/color/win/accent_color_observer.cc
@@ -8,6 +8,7 @@
 
 #include "base/no_destructor.h"
 #include "base/task/sequenced_task_runner.h"
+#include "base/win/windows_version.h"
 #include "skia/ext/skia_utils_win.h"
 #include "ui/gfx/color_utils.h"
 
@@ -20,12 +21,13 @@ AccentColorObserver* AccentColorObserver::Get() {
 }
 
 AccentColorObserver::AccentColorObserver() {
-  dwm_key_ = std::make_unique<base::win::RegKey>(
-      HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\DWM", KEY_READ);
-  if (dwm_key_->Valid()) {
-    OnDwmKeyUpdated();
-  } else {
-    dwm_key_.reset();
+  if (base::win::GetVersion() >= base::win::Version::WIN8) {
+    dwm_key_ = std::make_unique<base::win::RegKey>(
+        HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\DWM", KEY_READ);
+    if (dwm_key_->Valid())
+      OnDwmKeyUpdated();
+    else
+      dwm_key_.reset();
   }
 }
 
@@ -78,22 +80,24 @@ void AccentColorObserver::OnDwmKeyUpdated() {
 
   accent_color_ = std::nullopt;
   accent_color_inactive_ = std::nullopt;
-  DWORD accent_color = 0;
-  if (dwm_key_->ReadValueDW(L"AccentColor", &accent_color) == ERROR_SUCCESS) {
-    accent_color_ = skia::COLORREFToSkColor(accent_color);
-    DWORD accent_color_inactive = 0;
-    if (dwm_key_->ReadValueDW(L"AccentColorInactive", &accent_color_inactive) ==
-        ERROR_SUCCESS) {
-      accent_color_inactive_ = skia::COLORREFToSkColor(accent_color_inactive);
+  if (base::win::GetVersion() >= base::win::Version::WIN10) {
+    DWORD accent_color = 0;
+    if (dwm_key_->ReadValueDW(L"AccentColor", &accent_color) == ERROR_SUCCESS) {
+      accent_color_ = skia::COLORREFToSkColor(accent_color);
+      DWORD accent_color_inactive = 0;
+      if (dwm_key_->ReadValueDW(L"AccentColorInactive", &accent_color_inactive) ==
+          ERROR_SUCCESS) {
+        accent_color_inactive_ = skia::COLORREFToSkColor(accent_color_inactive);
+      }
     }
-  }
 
-  DWORD color_prevalence;
-  use_dwm_frame_color_ =
-      accent_color_.has_value() &&
-      (dwm_key_->ReadValueDW(L"ColorPrevalence", &color_prevalence) ==
-       ERROR_SUCCESS) &&
-      color_prevalence == 1;
+    DWORD color_prevalence;
+    use_dwm_frame_color_ =
+        accent_color_.has_value() &&
+        (dwm_key_->ReadValueDW(L"ColorPrevalence", &color_prevalence) ==
+         ERROR_SUCCESS) &&
+        color_prevalence == 1;
+  }
 
   callbacks_.Notify();
 
diff --git a/ui/display/win/uwp_text_scale_factor.cc b/ui/display/win/uwp_text_scale_factor.cc
index 2d2d18c212bca..02b20a1b172db 100644
--- a/ui/display/win/uwp_text_scale_factor.cc
+++ b/ui/display/win/uwp_text_scale_factor.cc
@@ -19,8 +17,10 @@
 #include "base/win/core_winrt_util.h"
 #include "base/win/scoped_com_initializer.h"
 #include "base/win/scoped_hstring.h"
+#include "base/win/windows_version.h"
 
-namespace display::win {
+namespace display {
+namespace win {
 
 namespace {
 
@@ -89,6 +89,11 @@ class UwpTextScaleFactorImpl : public UwpTextScaleFactor {
  public:
   UwpTextScaleFactorImpl()
       : text_scale_factor_changed_token_(kInvalidEventRegistrationToken) {
+    // There's no point in doing this initialization if we're earlier than
+    // Windows 10, since UWP is a Win10 feature.
+    if (base::win::GetVersion() < base::win::Version::WIN10)
+      return;
+
     // We want to bracket all use of our COM object with COM initialization
     // in order to be sure we don't leak COM listeners into the OS. This may
     // extend the lifetime of COM on this thread but we do not expect it to be
@@ -228,4 +233,5 @@ void UwpTextScaleFactor::Observer::OnUwpTextScaleFactorCleanup(
   source->RemoveObserver(this);
 }
 
-}  // namespace display::win
+}  // namespace win
+}  // namespace display
diff --git a/ui/gfx/font_fallback_unittest.cc b/ui/gfx/font_fallback_unittest.cc
index 31426271cba44..639088dfa96e3 100644
--- a/ui/gfx/font_fallback_unittest.cc
+++ b/ui/gfx/font_fallback_unittest.cc
@@ -19,6 +19,10 @@
 #include "ui/gfx/platform_font.h"
 #include "ui/gfx/test/font_fallback_test_data.h"
 
+#if BUILDFLAG(IS_WIN)
+#include "base/win/windows_version.h"
+#endif
+
 namespace gfx {
 
 namespace {
@@ -166,6 +170,15 @@ TEST_P(GetFallbackFontTest, GetFallbackFont) {
                          base_font_option_.weight);
   }
 
+#if BUILDFLAG(IS_WIN)
+  // Skip testing this call to GetFallbackFont on older windows versions. Some
+  // fonts only got introduced on windows 10 and the test will fail on previous
+  // versions.
+  const bool is_win10 = base::win::GetVersion() >= base::win::Version::WIN10;
+  if (test_case_.is_win10 && !is_win10)
+    return;
+#endif
+
   // Retrieve the name of the current script.
   script_name_ = uscript_getName(test_case_.script);
 
diff --git a/ui/gfx/font_fallback_win_unittest.cc b/ui/gfx/font_fallback_win_unittest.cc
index 880bc893a0838..76a2f76f4045e 100644
--- a/ui/gfx/font_fallback_win_unittest.cc
+++ b/ui/gfx/font_fallback_win_unittest.cc
@@ -6,4 +6,5 @@
 #include "base/test/task_environment.h"
+#include "base/win/windows_version.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace gfx {
@@ -105,6 +106,10 @@ TEST_F(FontFallbackWinTest, NulTerminatedStringPiece) {
 }
 
 TEST_F(FontFallbackWinTest, CJKLocaleFallback) {
+  // The uniscribe fallback used by win7 does not support locale.
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    return;
+
   // Han unification is an effort to map multiple character sets of the CJK
   // languages into a single set of unified characters. Han characters are a
   // common feature of written Chinese (hanzi), Japanese (kanji), and Korean
diff --git a/ui/gfx/render_text.cc b/ui/gfx/render_text.cc
index 6f5682607d98f..6cbc67f692366 100644
--- a/ui/gfx/render_text.cc
+++ b/ui/gfx/render_text.cc
@@ -45,6 +45,10 @@
 #include "ui/gfx/text_utils.h"
 #include "ui/gfx/utf16_indexing.h"
 
+#if BUILDFLAG(IS_WIN)
+#include "base/win/windows_version.h"
+#endif
+
 namespace gfx {
 
 namespace {
@@ -256,23 +260,25 @@ UChar32 ReplaceControlCharacter(UChar32 codepoint) {
     // Support Microsoft defined PUA on Windows.
     // see:
     // https://docs.microsoft.com/en-us/windows/uwp/design/style/segoe-ui-symbol-font
-    switch (codepoint) {
-      case 0xF093:  // ButtonA
-      case 0xF094:  // ButtonB
-      case 0xF095:  // ButtonY
-      case 0xF096:  // ButtonX
-      case 0xF108:  // LeftStick
-      case 0xF109:  // RightStick
-      case 0xF10A:  // TriggerLeft
-      case 0xF10B:  // TriggerRight
-      case 0xF10C:  // BumperLeft
-      case 0xF10D:  // BumperRight
-      case 0xF10E:  // Dpad
-      case 0xEECA:  // ButtonView2
-      case 0xEDE3:  // ButtonMenu
-        return codepoint;
-      default:
-        break;
+    if (base::win::GetVersion() >= base::win::Version::WIN10) {
+      switch (codepoint) {
+        case 0xF093:  // ButtonA
+        case 0xF094:  // ButtonB
+        case 0xF095:  // ButtonY
+        case 0xF096:  // ButtonX
+        case 0xF108:  // LeftStick
+        case 0xF109:  // RightStick
+        case 0xF10A:  // TriggerLeft
+        case 0xF10B:  // TriggerRight
+        case 0xF10C:  // BumperLeft
+        case 0xF10D:  // BumperRight
+        case 0xF10E:  // Dpad
+        case 0xEECA:  // ButtonView2
+        case 0xEDE3:  // ButtonMenu
+          return codepoint;
+        default:
+          break;
+      }
     }
 #endif
     const int8_t codepoint_category = u_charType(codepoint);
diff --git a/ui/gfx/render_text_unittest.cc b/ui/gfx/render_text_unittest.cc
index 3a3815a837a5f..8175dc403b475 100644
--- a/ui/gfx/render_text_unittest.cc
+++ b/ui/gfx/render_text_unittest.cc
@@ -61,6 +61,8 @@
 
 #if BUILDFLAG(IS_WIN)
 #include <windows.h>
+
+#include "base/win/windows_version.h"
 #endif
 
 #if BUILDFLAG(IS_APPLE)
@@ -3526,8 +3528,7 @@ TEST_F(RenderTextTest, GetDisplayTextDirection) {
     for (size_t j = 0; j < std::size(cases); j++) {
       render_text->SetText(cases[j].text);
       render_text->SetDirectionalityMode(DIRECTIONALITY_FROM_TEXT);
-      EXPECT_EQ(render_text->GetDisplayTextDirection(),
-                cases[j].text_direction);
+      EXPECT_EQ(render_text->GetDisplayTextDirection(),cases[j].text_direction);
       render_text->SetDirectionalityMode(DIRECTIONALITY_FORCE_LTR);
       EXPECT_EQ(render_text->GetDisplayTextDirection(),
                 base::i18n::LEFT_TO_RIGHT);
@@ -6518,7 +6519,11 @@ TEST_F(RenderTextTest, MicrosoftSpecificPrivateUseCharacterReplacement) {
     RenderText* render_text = GetRenderText();
     render_text->SetText(codepoint);
 #if BUILDFLAG(IS_WIN)
-    EXPECT_EQ(codepoint, render_text->GetDisplayText());
+    if (base::win::GetVersion() >= base::win::Version::WIN10) {
+      EXPECT_EQ(codepoint, render_text->GetDisplayText());
+    } else {
+      EXPECT_EQ(u"\uFFFD", render_text->GetDisplayText());
+    }
 #else
     EXPECT_EQ(u"\uFFFD", render_text->GetDisplayText());
 #endif
@@ -7004,8 +7009,11 @@ TEST_F(RenderTextTest, HarfBuzz_ShapeRunsWithMultipleFonts) {
   EXPECT_EQ("[0->2][3][4->6]", GetRunListStructureString());
 
 #if BUILDFLAG(IS_WIN)
-  const std::vector<std::string> expected_fonts = {"Segoe UI Emoji", "Segoe UI",
-                                                   "Segoe UI Symbol"};
+  std::vector<std::string> expected_fonts;
+  if (base::win::GetVersion() < base::win::Version::WIN10)
+    expected_fonts = {"Segoe UI", "Segoe UI", "Segoe UI Symbol"};
+  else
+    expected_fonts = {"Segoe UI Emoji", "Segoe UI", "Segoe UI Symbol"};
 
   std::vector<std::string> mapped_fonts;
   for (const auto& font_span : GetFontSpans())
diff --git a/ui/gfx/test/font_fallback_test_data.cc b/ui/gfx/test/font_fallback_test_data.cc
index 1087cd15173e5..b968b878f28fa 100644
--- a/ui/gfx/test/font_fallback_test_data.cc
+++ b/ui/gfx/test/font_fallback_test_data.cc
@@ -10,6 +10,10 @@
 
 namespace gfx {
 
+#if BUILDFLAG(IS_WIN)
+constexpr bool kWin10Only = true;
+#endif
+
 FallbackFontTestCase::FallbackFontTestCase() = default;
 FallbackFontTestCase::FallbackFontTestCase(const FallbackFontTestCase& other) =
     default;
@@ -18,11 +22,13 @@ FallbackFontTestCase::FallbackFontTestCase(
     UScriptCode script_arg,
     std::string language_tag_arg,
     std::u16string text_arg,
-    std::vector<std::string> fallback_fonts_arg)
+    std::vector<std::string> fallback_fonts_arg,
+    bool is_win10_arg)
     : script(script_arg),
       language_tag(language_tag_arg),
       text(text_arg),
-      fallback_fonts(fallback_fonts_arg) {}
+      fallback_fonts(fallback_fonts_arg),
+      is_win10(is_win10_arg) {}
 
 FallbackFontTestCase::~FallbackFontTestCase() = default;
 
@@ -33,7 +39,7 @@ FallbackFontTestCase::~FallbackFontTestCase() = default;
 // TODO(drott): Some of the test cases lack a valid language tag as it's unclear
 // which language in particular would be expressed with the respective ancient
 // script. Ideally we'd find a meaningful language tag for those.
-const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
+std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
     {USCRIPT_ARABIC,
      "ar",
      u"\u062A\u062D",
@@ -44,31 +50,55 @@ const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
      {"Segoe UI", "Tahoma", "Sylfaen", "Times New Roman"}},
     {USCRIPT_BENGALI, "bn", u"\u09B8\u09AE", {"Nirmala UI", "Vrinda"}},
     {USCRIPT_BRAILLE, "en-us-brai", u"\u2870\u2871", {"Segoe UI Symbol"}},
-    {USCRIPT_BUGINESE, "bug", u"\u1A00\u1A01", {"Leelawadee UI"}},
+    {USCRIPT_BUGINESE, "bug", u"\u1A00\u1A01", {"Leelawadee UI"}, kWin10Only},
     {USCRIPT_CANADIAN_ABORIGINAL,
      "cans",
      u"\u1410\u1411",
      {"Gadugi", "Euphemia"}},
 
-    {USCRIPT_CARIAN, "xcr", u"\U000102A0\U000102A1", {"Segoe UI Historic"}},
+    {USCRIPT_CARIAN,
+     "xcr",
+     u"\U000102A0\U000102A1",
+     {"Segoe UI Historic"},
+     kWin10Only},
 
     {USCRIPT_CHEROKEE,
      "chr",
      u"\u13A1\u13A2",
      {"Gadugi", "Plantagenet Cherokee"}},
 
-    {USCRIPT_COPTIC, "copt", u"\u2C81\u2C82", {"Segoe UI Historic"}},
+    {USCRIPT_COPTIC,
+     "copt",
+     u"\u2C81\u2C82",
+     {"Segoe UI Historic"},
+     kWin10Only},
 
-    {USCRIPT_CUNEIFORM, "akk", u"\U00012000\U0001200C", {"Segoe UI Historic"}},
+    {USCRIPT_CUNEIFORM,
+     "akk",
+     u"\U00012000\U0001200C",
+     {"Segoe UI Historic"},
+     kWin10Only},
 
-    {USCRIPT_CYPRIOT, "ecy", u"\U00010800\U00010801", {"Segoe UI Historic"}},
+    {USCRIPT_CYPRIOT,
+     "ecy",
+     u"\U00010800\U00010801",
+     {"Segoe UI Historic"},
+     kWin10Only},
 
     {USCRIPT_CYRILLIC, "ru", u"\u0410\u0411\u0412", {"Times New Roman"}},
 
-    {USCRIPT_DESERET, "en", u"\U00010400\U00010401", {"Segoe UI Symbol"}},
+    {USCRIPT_DESERET,
+     "en",
+     u"\U00010400\U00010401",
+     {"Segoe UI Symbol"},
+     kWin10Only},
 
     {USCRIPT_ETHIOPIC, "am", u"\u1201\u1202", {"Ebrima", "Nyala"}},
-    {USCRIPT_GEORGIAN, "ka", u"\u10A0\u10A1", {"Sylfaen", "Segoe UI"}},
+    {USCRIPT_GEORGIAN,
+     "ka",
+     u"\u10A0\u10A1",
+     {"Sylfaen", "Segoe UI"},
+     kWin10Only},
     {USCRIPT_GREEK, "el", u"\u0391\u0392", {"Times New Roman"}},
     {USCRIPT_GURMUKHI, "pa", u"\u0A21\u0A22", {"Raavi", "Nirmala UI"}},
     {USCRIPT_HAN,
@@ -88,7 +118,11 @@ const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
      u"\u6211",
      {"Microsoft JhengHei", "Microsoft JhengHei UI"}},
     {USCRIPT_HAN, "ja", u"\u6211", {"Meiryo UI", "Yu Gothic UI", "Yu Gothic"}},
-    {USCRIPT_HANGUL, "ko", u"\u1100\u1101", {"Malgun Gothic", "Gulim"}},
+    {USCRIPT_HANGUL,
+     "ko",
+     u"\u1100\u1101",
+     {"Malgun Gothic", "Gulim"},
+     kWin10Only},
     {USCRIPT_HEBREW,
      "he",
      u"\u05D1\u05D2",
@@ -101,39 +135,57 @@ const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
     {USCRIPT_IMPERIAL_ARAMAIC,
      "arc",
      u"\U00010841\U00010842",
-     {"Segoe UI Historic"}},
+     {"Segoe UI Historic"},
+     kWin10Only},
 
     {USCRIPT_INSCRIPTIONAL_PAHLAVI,
      "pal",
      u"\U00010B61\U00010B62",
-     {"Segoe UI Historic"}},
+     {"Segoe UI Historic"},
+     kWin10Only},
 
     {USCRIPT_INSCRIPTIONAL_PARTHIAN,
      "xpr",
      u"\U00010B41\U00010B42",
-     {"Segoe UI Historic"}},
+     {"Segoe UI Historic"},
+     kWin10Only},
 
-    {USCRIPT_JAVANESE, "jv", u"\uA991\uA992", {"Javanese Text"}},
-    {USCRIPT_KHAROSHTHI, "sa", u"\U00010A10\U00010A11", {"Segoe UI Historic"}},
+    {USCRIPT_JAVANESE, "jv", u"\uA991\uA992", {"Javanese Text"}, kWin10Only},
+    {USCRIPT_KANNADA, "kn", u"\u0CA1\u0CA2", {"Nirmala UI", "Tunga"}},
+
+    {USCRIPT_KHAROSHTHI,
+     "sa",
+     u"\U00010A10\U00010A11",
+     {"Segoe UI Historic"},
+     kWin10Only},
 
     {USCRIPT_LAO,
      "lo",
      u"\u0ED0\u0ED1",
      {"Lao UI", "Leelawadee UI", "Segoe UI"}},
-    {USCRIPT_LISU, "lis", u"\uA4D0\uA4D1", {"Segoe UI"}},
+    {USCRIPT_LISU, "lis", u"\uA4D0\uA4D1", {"Segoe UI"}, kWin10Only},
 
-    {USCRIPT_LYCIAN, "xlc", u"\U00010281\U00010282", {"Segoe UI Historic"}},
+    {USCRIPT_LYCIAN,
+     "xlc",
+     u"\U00010281\U00010282",
+     {"Segoe UI Historic"},
+     kWin10Only},
 
-    {USCRIPT_LYDIAN, "xld", u"\U00010921\U00010922", {"Segoe UI Historic"}},
+    {USCRIPT_LYDIAN,
+     "xld",
+     u"\U00010921\U00010922",
+     {"Segoe UI Historic"},
+     kWin10Only},
 
     {USCRIPT_MALAYALAM, "ml", u"\u0D21\u0D22", {"Kartika", "Nirmala UI"}},
 
     {USCRIPT_MEROITIC_CURSIVE,
      "",
      u"\U000109A1\U000109A2",
-     {"Segoe UI Historic"}},
+     {"Segoe UI Historic"},
+     kWin10Only},
 
-    {USCRIPT_MYANMAR, "my", u"\u1000\u1001", {"Myanmar Text"}},
+    {USCRIPT_MYANMAR, "my", u"\u1000\u1001", {"Myanmar Text"}, kWin10Only},
     {USCRIPT_NEW_TAI_LUE, "", u"\u1981\u1982", {"Microsoft New Tai Lue"}},
     {USCRIPT_NKO, "nko", u"\u07C1\u07C2", {"Ebrima", "Segoe UI"}},
 
@@ -142,7 +194,7 @@ const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
      u"\u1680\u1681",
      {"Segoe UI Symbol", "Segoe UI Historic"}},
 
-    {USCRIPT_OL_CHIKI, "", u"\u1C51\u1C52", {"Nirmala UI"}},
+    {USCRIPT_OL_CHIKI, "", u"\u1C51\u1C52", {"Nirmala UI"}, kWin10Only},
 
     {USCRIPT_OLD_ITALIC,
      "",
@@ -152,12 +204,14 @@ const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
     {USCRIPT_OLD_PERSIAN,
      "peo",
      u"\U000103A1\U000103A2",
-     {"Segoe UI Historic"}},
+     {"Segoe UI Historic"},
+     kWin10Only},
 
     {USCRIPT_OLD_SOUTH_ARABIAN,
      "",
      u"\U00010A61\U00010A62",
-     {"Segoe UI Historic"}},
+     {"Segoe UI Historic"},
+     kWin10Only},
 
     {USCRIPT_ORIYA, "or", u"\u0B21\u0B22", {"Kalinga", "Nirmala UI"}},
     {USCRIPT_PHAGS_PA, "", u"\uA841\uA842", {"Microsoft PhagsPa"}},
@@ -170,11 +224,16 @@ const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
     {USCRIPT_SHAVIAN,
      "",
      u"\U00010451\U00010452",
-     {"Segoe UI", "Segoe UI Historic"}},
+     {"Segoe UI", "Segoe UI Historic"},
+     kWin10Only},
 
     {USCRIPT_SINHALA, "si", u"\u0D91\u0D92", {"Iskoola Pota", "Nirmala UI"}},
 
-    {USCRIPT_SORA_SOMPENG, "", u"\U000110D1\U000110D2", {"Nirmala UI"}},
+    {USCRIPT_SORA_SOMPENG,
+     "",
+     u"\U000110D1\U000110D2",
+     {"Nirmala UI"},
+     kWin10Only},
 
     {USCRIPT_SYRIAC,
      "syr",
@@ -188,7 +247,8 @@ const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
     {USCRIPT_THAI,
      "th",
      u"\u0e01\u0e02",
-     {"Tahoma", "Leelawadee UI", "Leelawadee"}},
+     {"Tahoma", "Leelawadee UI", "Leelawadee"},
+     kWin10Only},
     {USCRIPT_TIBETAN, "bo", u"\u0F01\u0F02", {"Microsoft Himalaya"}},
     {USCRIPT_TIFINAGH, "", u"\u2D31\u2D32", {"Ebrima"}},
     {USCRIPT_VAI, "vai", u"\uA501\uA502", {"Ebrima"}},
@@ -200,7 +260,7 @@ const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
 // On linux, font-config configuration and fonts are mock. The config
 // can be found in '${build}/etc/fonts/fonts.conf' and the test fonts
 // can be found in '${build}/test_fonts/*'.
-const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
+std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
     {USCRIPT_BENGALI, "bn", u"\u09B8\u09AE", {"Mukti Narrow"}},
     {USCRIPT_DEVANAGARI, "hi", u"\u0905\u0906", {"Lohit Devanagari"}},
     {USCRIPT_GURMUKHI, "pa", u"\u0A21\u0A22", {"Lohit Gurmukhi"}},
@@ -213,7 +273,7 @@ const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {
 #else
 
 // No fallback font tests are defined on that platform.
-const std::vector<FallbackFontTestCase> kGetFontFallbackTests = {};
+std::vector<FallbackFontTestCase> kGetFontFallbackTests = {};
 
 #endif
 
diff --git a/ui/gfx/test/font_fallback_test_data.h b/ui/gfx/test/font_fallback_test_data.h
index 24bf19f56e8fe..c4bf426c939dd 100644
--- a/ui/gfx/test/font_fallback_test_data.h
+++ b/ui/gfx/test/font_fallback_test_data.h
@@ -18,16 +18,18 @@ struct FallbackFontTestCase {
   FallbackFontTestCase(UScriptCode script_arg,
                        std::string language_tag_arg,
                        std::u16string text_arg,
-                       std::vector<std::string> fallback_fonts_arg);
+                       std::vector<std::string> fallback_fonts_arg,
+                       bool is_win10_arg = false);
   FallbackFontTestCase(const FallbackFontTestCase& other);
   ~FallbackFontTestCase();
   UScriptCode script;
   std::string language_tag;
   std::u16string text;
   std::vector<std::string> fallback_fonts;
+  bool is_win10 = false;
 };
 
-extern const std::vector<FallbackFontTestCase> kGetFontFallbackTests;
+extern std::vector<FallbackFontTestCase> kGetFontFallbackTests;
 
 }  // namespace gfx
 
diff --git a/ui/gfx/win/direct_write.cc b/ui/gfx/win/direct_write.cc
index 2791f20a8005b..cc63949a1144d 100644
--- a/ui/gfx/win/direct_write.cc
+++ b/ui/gfx/win/direct_write.cc
@@ -9,9 +9,11 @@
 
 #include "base/debug/alias.h"
+#include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
 #include "base/notreached.h"
 #include "base/strings/utf_string_conversions.h"
 #include "base/trace_event/trace_event.h"
+#include "base/win/windows_version.h"
 #include "skia/ext/font_utils.h"
 #include "third_party/skia/include/core/SkFontMgr.h"
 #include "third_party/skia/include/ports/SkTypeface_win.h"
@@ -59,11 +61,37 @@ void InitializeDirectWrite() {
   CHECK(!!factory);
   SetDirectWriteFactory(factory.Get());
 
+  // The skia call to create a new DirectWrite font manager instance can fail
+  // if we are unable to get the system font collection from the DirectWrite
+  // factory. The GetSystemFontCollection method in the IDWriteFactory
+  // interface fails with E_INVALIDARG on certain Windows 7 gold versions
+  // (6.1.7600.*).
   sk_sp<SkFontMgr> direct_write_font_mgr =
       SkFontMgr_New_DirectWrite(factory.Get());
-  if (!direct_write_font_mgr) {
-    direct_write_font_mgr = SkFontMgr_New_GDI();
+  int iteration = 0;
+  if (!direct_write_font_mgr &&
+      base::win::GetVersion() == base::win::Version::WIN7) {
+    // Windows (win7_rtm) may fail to map the service sections
+    // (crbug.com/956064).
+    constexpr int kMaxRetries = 5;
+    constexpr base::TimeDelta kRetrySleepTime = base::Microseconds(500);
+    while (iteration < kMaxRetries) {
+      base::PlatformThread::Sleep(kRetrySleepTime);
+      direct_write_font_mgr = SkFontMgr_New_DirectWrite(factory.Get());
+      if (direct_write_font_mgr)
+        break;
+      ++iteration;
+    }
   }
+  if (!direct_write_font_mgr)
+    iteration = -1;
+  base::UmaHistogramSparse("DirectWrite.Fonts.Gfx.InitializeLoopCount",
+                           iteration);
+  // TODO(crbug.com/956064): Move to a CHECK when the cause of the crash is
+  // fixed and remove the if statement that fallback to GDI font manager.
+  DCHECK(!!direct_write_font_mgr);
+  if (!direct_write_font_mgr)
+    direct_write_font_mgr = SkFontMgr_New_GDI();
 
   // Override the default skia font manager. This must be called before any
   // use of the skia font manager is done (e.g. before any call to
diff --git a/ui/gl/direct_composition_support.cc b/ui/gl/direct_composition_support.cc
index 66a50d6a49ba5..3613d2af9d853 100644
--- a/ui/gl/direct_composition_support.cc
+++ b/ui/gl/direct_composition_support.cc
@@ -902,7 +902,9 @@ bool DirectCompositionSwapChainTearingEnabled() {
 }
 
 bool DXGIWaitableSwapChainEnabled() {
-  return base::FeatureList::IsEnabled(features::kDXGIWaitableSwapChain);
+  // Waitable swap chains were first enabled in Win 8.1/DXGI 1.3
+  return (base::win::GetVersion() >= base::win::Version::WIN8_1) &&
+         base::FeatureList::IsEnabled(features::kDXGIWaitableSwapChain);
 }
 
 UINT GetDXGIWaitableSwapChainMaxQueuedFrames() {
diff --git a/ui/native_theme/caption_style_win.cc b/ui/native_theme/caption_style_win.cc
index 6ca68629a23e1..8d6499fc72a8d 100644
--- a/ui/native_theme/caption_style_win.cc
+++ b/ui/native_theme/caption_style_win.cc
@@ -14,6 +14,7 @@
 #include "base/numerics/safe_conversions.h"
 #include "base/trace_event/trace_event.h"
 #include "base/win/core_winrt_util.h"
+#include "base/win/windows_version.h"
 #include "skia/ext/skia_utils_win.h"
 #include "ui/base/ui_base_features.h"
 #include "ui/gfx/color_utils.h"
@@ -278,6 +279,9 @@ std::optional<CaptionStyle> InitializeFromSystemSettings() {
 }  // namespace
 
 std::optional<CaptionStyle> CaptionStyle::FromSystemSettings() {
-  return InitializeFromSystemSettings();
+  if (base::win::GetVersion() >= base::win::Version::WIN10) {
+    return InitializeFromSystemSettings();
+  }
+  return std::nullopt;
 }
 
diff --git a/ui/native_theme/caption_style_win_unittest.cc b/ui/native_theme/caption_style_win_unittest.cc
index 12a49ef8b23b1..2d6a7f639052f 100644
--- a/ui/native_theme/caption_style_win_unittest.cc
+++ b/ui/native_theme/caption_style_win_unittest.cc
@@ -6,31 +6,34 @@
 
 #include "base/test/scoped_feature_list.h"
 #include "base/win/scoped_com_initializer.h"
+#include "base/win/windows_version.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "ui/base/ui_base_features.h"
 
 namespace ui {
 
 // Test to ensure closed caption styling from system settings can be obtained
-// (we obtain a CaptionStyle).
+// (we obtain a CaptionStyle) on Windows 10.
 TEST(CaptionStyleWinTest, TestWinCaptionStyle) {
   base::test::ScopedFeatureList scoped_feature_list;
 
-  base::win::ScopedCOMInitializer com_initializer;
-  ASSERT_TRUE(com_initializer.Succeeded());
+  if (base::win::GetVersion() >= base::win::Version::WIN10) {
+    base::win::ScopedCOMInitializer com_initializer;
+    ASSERT_TRUE(com_initializer.Succeeded());
 
-  std::optional<ui::CaptionStyle> caption_style =
-      ui::CaptionStyle::FromSystemSettings();
-  // On Windows out of the box, all caption style properties are set to
-  // Default. In which case, each of these should be empty.
-  ASSERT_TRUE(caption_style.has_value());
-  EXPECT_TRUE(caption_style->background_color.empty());
-  EXPECT_TRUE(caption_style->font_family.empty());
-  EXPECT_TRUE(caption_style->font_variant.empty());
-  EXPECT_TRUE(caption_style->text_color.empty());
-  EXPECT_TRUE(caption_style->text_shadow.empty());
-  EXPECT_TRUE(caption_style->text_size.empty());
-  EXPECT_TRUE(caption_style->window_color.empty());
+    std::optional<ui::CaptionStyle> caption_style =
+        ui::CaptionStyle::FromSystemSettings();
+    // On Windows out of the box, all caption style properties are set to
+    // Default. In which case, each of these should be empty.
+    ASSERT_TRUE(caption_style.has_value());
+    EXPECT_TRUE(caption_style->background_color.empty());
+    EXPECT_TRUE(caption_style->font_family.empty());
+    EXPECT_TRUE(caption_style->font_variant.empty());
+    EXPECT_TRUE(caption_style->text_color.empty());
+    EXPECT_TRUE(caption_style->text_shadow.empty());
+    EXPECT_TRUE(caption_style->text_size.empty());
+    EXPECT_TRUE(caption_style->window_color.empty());
+  }
 }
 
 }  // namespace ui
diff --git a/ui/shell_dialogs/select_file_dialog_win_unittest.cc b/ui/shell_dialogs/select_file_dialog_win_unittest.cc
index f1bc86dbcdcfa..4e1345591e2de 100644
--- a/ui/shell_dialogs/select_file_dialog_win_unittest.cc
+++ b/ui/shell_dialogs/select_file_dialog_win_unittest.cc
@@ -21,6 +21,7 @@
 #include "base/test/test_timeouts.h"
 #include "base/threading/platform_thread.h"
 #include "base/win/scoped_com_initializer.h"
+#include "base/win/windows_version.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/shell_dialogs/select_file_dialog.h"
@@ -199,6 +200,10 @@ class SelectFileDialogWinTest : public ::testing::Test,
 };
 
 TEST_F(SelectFileDialogWinTest, CancelAllDialogs) {
+  // TODO(crbug.com/1265379): Flaky on Windows 7.
+  if (base::win::GetVersion() <= base::win::Version::WIN7)
+    GTEST_SKIP() << "Skipping test for Windows 7";
+
   // Intentionally not testing SELECT_UPLOAD_FOLDER because the dialog is
   // customized for that case.
   struct {
diff --git a/ui/snapshot/snapshot_aura_unittest.cc b/ui/snapshot/snapshot_aura_unittest.cc
index 879612d0590d5..9a3d2e2d67171 100644
--- a/ui/snapshot/snapshot_aura_unittest.cc
+++ b/ui/snapshot/snapshot_aura_unittest.cc
@@ -212,10 +212,10 @@ TEST_F(SnapshotAuraTest, MAYBE_FullScreenWindow) {
         // BUILDFLAG(IS_FUCHSIA)
 
 #if BUILDFLAG(IS_WIN)
-  // TODO(crbug.com/41393300): Make work on Windows.
-  if (::testing::internal::AlwaysTrue()) {
-    GTEST_SKIP();
-  }
+  // TODO(crbug.com/41393300): Make work on Win10.
+  base::win::Version version = base::win::GetVersion();
+  if (version >= base::win::Version::WIN10)
+    return;
 #endif
   SetupTestWindow(root_window()->bounds());
   WaitForDraw();
@@ -228,10 +228,10 @@ TEST_F(SnapshotAuraTest, MAYBE_FullScreenWindow) {
 
 TEST_F(SnapshotAuraTest, PartialBounds) {
 #if BUILDFLAG(IS_WIN)
-  // TODO(crbug.com/41393300): Make work on Windows.
-  if (::testing::internal::AlwaysTrue()) {
-    GTEST_SKIP();
-  }
+  // TODO(crbug.com/41393300): Make work on Win10.
+  base::win::Version version = base::win::GetVersion();
+  if (version >= base::win::Version::WIN10)
+    return;
 #endif
   gfx::Rect test_bounds(100, 100, 300, 200);
   SetupTestWindow(test_bounds);
@@ -244,10 +244,10 @@ TEST_F(SnapshotAuraTest, PartialBounds) {
 
 TEST_F(SnapshotAuraTest, Rotated) {
 #if BUILDFLAG(IS_WIN)
-  // TODO(crbug.com/41393300): Make work on Windows.
-  if (::testing::internal::AlwaysTrue()) {
-    GTEST_SKIP();
-  }
+  // TODO(crbug.com/41393300): Make work on Win10.
+  base::win::Version version = base::win::GetVersion();
+  if (version >= base::win::Version::WIN10)
+    return;
 #endif
   test_screen()->SetDisplayRotation(display::Display::ROTATE_90);
 
@@ -262,10 +262,10 @@ TEST_F(SnapshotAuraTest, Rotated) {
 
 TEST_F(SnapshotAuraTest, UIScale) {
 #if BUILDFLAG(IS_WIN)
-  // TODO(crbug.com/41393300): Make work on Windows.
-  if (::testing::internal::AlwaysTrue()) {
-    GTEST_SKIP();
-  }
+  // TODO(crbug.com/41393300): Make work on Win10.
+  base::win::Version version = base::win::GetVersion();
+  if (version >= base::win::Version::WIN10)
+    return;
 #endif
   const float kUIScale = 0.5f;
   test_screen()->SetUIScale(kUIScale);
@@ -286,10 +286,10 @@ TEST_F(SnapshotAuraTest, UIScale) {
 
 TEST_F(SnapshotAuraTest, DeviceScaleFactor) {
 #if BUILDFLAG(IS_WIN)
-  // TODO(crbug.com/41393300): Make work on Windows.
-  if (::testing::internal::AlwaysTrue()) {
-    GTEST_SKIP();
-  }
+  // TODO(crbug.com/41393300): Make work on Win10.
+  base::win::Version version = base::win::GetVersion();
+  if (version >= base::win::Version::WIN10)
+    return;
 #endif
   test_screen()->SetDeviceScaleFactor(2.0f);
 
@@ -309,10 +309,10 @@ TEST_F(SnapshotAuraTest, DeviceScaleFactor) {
 
 TEST_F(SnapshotAuraTest, RotateAndUIScale) {
 #if BUILDFLAG(IS_WIN)
-  // TODO(crbug.com/41393300): Make work on Windows.
-  if (::testing::internal::AlwaysTrue()) {
-    GTEST_SKIP();
-  }
+  // TODO(crbug.com/41393300): Make work on Win10.
+  base::win::Version version = base::win::GetVersion();
+  if (version >= base::win::Version::WIN10)
+    return;
 #endif
   const float kUIScale = 0.5f;
   test_screen()->SetUIScale(kUIScale);
@@ -334,10 +334,10 @@ TEST_F(SnapshotAuraTest, RotateAndUIScale) {
 
 TEST_F(SnapshotAuraTest, RotateAndUIScaleAndScaleFactor) {
 #if BUILDFLAG(IS_WIN)
-  // TODO(crbug.com/41393300): Make work on Windows.
-  if (::testing::internal::AlwaysTrue()) {
-    GTEST_SKIP();
-  }
+  // TODO(crbug.com/41393300): Make work on Win10.
+  base::win::Version version = base::win::GetVersion();
+  if (version >= base::win::Version::WIN10)
+    return;
 #endif
   test_screen()->SetDeviceScaleFactor(2.0f);
   const float kUIScale = 0.5f;
diff --git a/ui/snapshot/snapshot_win.cc b/ui/snapshot/snapshot_win.cc
index 1a871173aa04e..f6401e1d2151b 100644
--- a/ui/snapshot/snapshot_win.cc
+++ b/ui/snapshot/snapshot_win.cc
@@ -18,6 +18,18 @@
 #include "ui/gfx/geometry/skia_conversions.h"
 #include "ui/gfx/geometry/transform.h"
 #include "ui/gfx/image/image.h"
+#include "ui/snapshot/snapshot_aura.h"
+
+namespace {
+
+// Windows 8.1 is the first version that supports PW_RENDERFULLCONTENT.
+// Without that flag PrintWindow may not correctly capture what's actually
+// onscreen.
+bool UseAuraSnapshot() {
+  return (base::win::GetVersion() < base::win::Version::WIN8_1);
+}
+
+}  // namespace
 
 namespace ui {
 
@@ -101,6 +113,10 @@ void GrabNativeWindowSnapshot(gfx::NativeWindow native_window,
 void GrabWindowSnapshot(gfx::NativeWindow window,
                         const gfx::Rect& source_rect,
                         GrabSnapshotImageCallback callback) {
+  if (UseAuraSnapshot()) {
+    GrabWindowSnapshotAura(window, source_rect, std::move(callback));
+    return;
+  }
   gfx::Image image;
   GrabNativeWindowSnapshot(window, source_rect, &image);
   std::move(callback).Run(image);
@@ -109,6 +125,10 @@ void GrabWindowSnapshot(gfx::NativeWindow window,
 void GrabViewSnapshot(gfx::NativeView view,
                       const gfx::Rect& source_rect,
                       GrabSnapshotImageCallback callback) {
+  if (UseAuraSnapshot()) {
+    GrabWindowSnapshotAura(view, source_rect, std::move(callback));
+    return;
+  }
   gfx::Image image;
   GrabNativeWindowSnapshot(view, source_rect, &image);
   std::move(callback).Run(image);
