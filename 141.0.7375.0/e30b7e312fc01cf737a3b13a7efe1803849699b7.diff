

diff --git a/base/BUILD.gn b/base/BUILD.gn
index 181ecfcb67c21..7ebcc036bf122 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -1836,6 +1836,8 @@ component("base") {
       "win/event_trace_controller.h",
       "win/event_trace_provider.cc",
       "win/event_trace_provider.h",
+      "win/hstring_compare.cc",
+      "win/hstring_compare.h",
       "win/hardware_check.cc",
       "win/hardware_check.h",
       "win/hstring_reference.cc",
@@ -3636,6 +3638,7 @@ test("base_unittests") {
       "win/event_trace_controller_unittest.cc",
       "win/event_trace_provider_unittest.cc",
       "win/hardware_check_unittest.cc",
+      "win/hstring_compare_unittest.cc",
       "win/hstring_reference_unittest.cc",
       "win/i18n_unittest.cc",
       "win/map_unittest.cc",
@@ -3675,10 +3678,7 @@ test("base_unittests") {
       sources += [ "win/cet_shadow_stack_unittest.cc" ]
     }
 
-    libs = [
-      "ntdll.lib",
-      "onecore.lib",
-    ]
+    libs = [ "ntdll.lib" ]
   }
 
   if (is_linux || is_chromeos) {
diff --git a/base/win/hstring_compare.cc b/base/win/hstring_compare.cc
new file mode 100644
index 0000000000000..c2f21067a7918
--- /dev/null
+++ b/base/win/hstring_compare.cc
@@ -0,0 +1,34 @@
+// Copyright 2019 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/win/hstring_compare.h"
+
+#include <winstring.h>
+
+#include "base/native_library.h"
+
+namespace base::win {
+
+HRESULT HStringCompare(HSTRING string1, HSTRING string2, INT32* result) {
+  using CompareStringFunc = decltype(&::WindowsCompareStringOrdinal);
+
+  static const auto compare_string_func = []() -> CompareStringFunc {
+    NativeLibraryLoadError load_error;
+    NativeLibrary combase_module =
+        PinSystemLibrary(FILE_PATH_LITERAL("combase.dll"), &load_error);
+    if (load_error.code)
+      return nullptr;
+
+    return reinterpret_cast<CompareStringFunc>(
+        GetFunctionPointerFromNativeLibrary(combase_module,
+                                            "WindowsCompareStringOrdinal"));
+  }();
+
+  if (!compare_string_func)
+    return E_FAIL;
+
+  return compare_string_func(string1, string2, result);
+}
+
+}  // namespace base::win
diff --git a/base/win/hstring_compare.h b/base/win/hstring_compare.h
new file mode 100644
index 0000000000000..fe247aa260174
--- /dev/null
+++ b/base/win/hstring_compare.h
@@ -0,0 +1,28 @@
+// Copyright 2019 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_WIN_HSTRING_COMPARE_H_
+#define BASE_WIN_HSTRING_COMPARE_H_
+
+#include <hstring.h>
+
+#include "base/base_export.h"
+
+namespace base {
+namespace win {
+
+// HStringCompare provides a delayloaded version of WindowsCompareStringOrdinal
+// function, which compares HSTRING values.
+//
+// Note that it requires certain functions that are only available on Windows 8
+// and later, and that these functions need to be delayloaded to avoid breaking
+// Chrome on Windows 7.
+BASE_EXPORT HRESULT HStringCompare(HSTRING string1,
+                                   HSTRING string2,
+                                   INT32* result);
+
+}  // namespace win
+}  // namespace base
+
+#endif  // BASE_WIN_HSTRING_COMPARE_H_
diff --git a/base/win/hstring_compare_unittest.cc b/base/win/hstring_compare_unittest.cc
new file mode 100644
index 0000000000000..d737240f1b5ab
--- /dev/null
+++ b/base/win/hstring_compare_unittest.cc
@@ -0,0 +1,46 @@
+// Copyright 2019 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/win/hstring_compare.h"
+
+#include "base/win/hstring_reference.h"
+#include "testing/gtest/include/gtest/gtest.h"
+
+namespace base::win {
+
+namespace {
+
+constexpr wchar_t kTestString12[] = L"12";
+constexpr wchar_t kTestString123[] = L"123";
+constexpr wchar_t kTestString1234[] = L"1234";
+
+}  // namespace
+
+TEST(HStringCompareTest, FirstStringBeforeSecondString) {
+  const HStringReference string12(kTestString12);
+  const HStringReference string123(kTestString123);
+  INT32 result;
+  HRESULT hr = HStringCompare(string12.Get(), string123.Get(), &result);
+  EXPECT_HRESULT_SUCCEEDED(hr);
+  EXPECT_EQ(-1, result);
+}
+
+TEST(HStringCompareTest, StringsEqual) {
+  const HStringReference string123(kTestString123);
+  INT32 result;
+  HRESULT hr = HStringCompare(string123.Get(), string123.Get(), &result);
+  EXPECT_HRESULT_SUCCEEDED(hr);
+  EXPECT_EQ(0, result);
+}
+
+TEST(HStringCompareTest, FirstStringAfterSecondString) {
+  const HStringReference string123(kTestString123);
+  const HStringReference string1234(kTestString1234);
+  INT32 result;
+  HRESULT hr = HStringCompare(string1234.Get(), string123.Get(), &result);
+  EXPECT_HRESULT_SUCCEEDED(hr);
+  EXPECT_EQ(1, result);
+}
+
+}  // namespace base::win
diff --git a/base/win/winrt_foundation_helpers.h b/base/win/winrt_foundation_helpers.h
index 2f17e685e61f4..2b764b946fb7b 100644
--- a/base/win/winrt_foundation_helpers.h
+++ b/base/win/winrt_foundation_helpers.h
@@ -12,11 +12,13 @@
 #include <optional>
 #include <vector>
 
-#include "base/check.h"
+#include "base/win/hstring_compare.h"
 
 // This file provides helpers for WinRT types.
 
-namespace base::win::internal {
+namespace base {
+namespace win {
+namespace internal {
 
 // Template tricks needed to dispatch to the correct implementation.
 //
@@ -101,15 +103,14 @@ HRESULT CopyN(
     typename std::vector<Microsoft::WRL::ComPtr<T>>::const_iterator first,
     unsigned count,
     T** result) {
-  for (unsigned i = 0; i < count; ++i) {
+  for (unsigned i = 0; i < count; ++i)
     CopyTo(*first++, result++);
-  }
   return S_OK;
 }
 
 inline bool IsEqual(const HSTRING& lhs, const HSTRING& rhs) {
   INT32 result;
-  HRESULT hr = ::WindowsCompareStringOrdinal(lhs, rhs, &result);
+  HRESULT hr = HStringCompare(lhs, rhs, &result);
   DCHECK(SUCCEEDED(hr));
   return result == 0;
 }
@@ -127,7 +128,7 @@ bool IsEqual(const Microsoft::WRL::ComPtr<T>& com_ptr, const T* ptr) {
 struct Less {
   bool operator()(const HSTRING& lhs, const HSTRING& rhs) const {
     INT32 result;
-    HRESULT hr = ::WindowsCompareStringOrdinal(lhs, rhs, &result);
+    HRESULT hr = HStringCompare(lhs, rhs, &result);
     DCHECK(SUCCEEDED(hr));
     return result < 0;
   }
@@ -144,6 +145,8 @@ struct Less {
   }
 };
 
-}  // namespace base::win::internal
+}  // namespace internal
+}  // namespace win
+}  // namespace base
 
 #endif  // BASE_WIN_WINRT_FOUNDATION_HELPERS_H_
