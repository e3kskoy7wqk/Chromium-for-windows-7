diff --git a/third_party/microsoft_dxheaders/src/include/directx/d3d12.h b/third_party/microsoft_dxheaders/src/include/directx/d3d12.h
index 4adbaf6..23e316b 100644
--- a/third_party/microsoft_dxheaders/src/include/directx/d3d12.h
+++ b/third_party/microsoft_dxheaders/src/include/directx/d3d12.h
@@ -493,13 +493,6 @@ typedef interface ID3D12Tools1 ID3D12Tools1;
 #endif 	/* __ID3D12Tools1_FWD_DEFINED__ */
 
 
-#ifndef __ID3D12Tools2_FWD_DEFINED__
-#define __ID3D12Tools2_FWD_DEFINED__
-typedef interface ID3D12Tools2 ID3D12Tools2;
-
-#endif 	/* __ID3D12Tools2_FWD_DEFINED__ */
-
-
 #ifndef __ID3D12PageableTools_FWD_DEFINED__
 #define __ID3D12PageableTools_FWD_DEFINED__
 typedef interface ID3D12PageableTools ID3D12PageableTools;
@@ -514,13 +507,6 @@ typedef interface ID3D12DeviceTools ID3D12DeviceTools;
 #endif 	/* __ID3D12DeviceTools_FWD_DEFINED__ */
 
 
-#ifndef __ID3D12DeviceTools1_FWD_DEFINED__
-#define __ID3D12DeviceTools1_FWD_DEFINED__
-typedef interface ID3D12DeviceTools1 ID3D12DeviceTools1;
-
-#endif 	/* __ID3D12DeviceTools1_FWD_DEFINED__ */
-
-
 #ifndef __ID3D12SDKConfiguration_FWD_DEFINED__
 #define __ID3D12SDKConfiguration_FWD_DEFINED__
 typedef interface ID3D12SDKConfiguration ID3D12SDKConfiguration;
@@ -1144,7 +1130,7 @@ extern "C"{
 
 #define	D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT	( 15 )
 
-#define	D3D12_PREVIEW_SDK_VERSION	( 717 )
+#define	D3D12_PREVIEW_SDK_VERSION	( 716 )
 
 #define	D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT	( 16 )
 
@@ -1277,7 +1263,7 @@ extern "C"{
 
 #define	D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT	( 2 )
 
-#define	D3D12_SDK_VERSION	( 616 )
+#define	D3D12_SDK_VERSION	( 615 )
 
 #define	D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES	( 32 )
 
@@ -1375,10 +1361,6 @@ extern "C"{
 
 #define	D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT	( 512 )
 
-#define	D3D12_TIGHT_ALIGNMENT_MIN_COMMITTED_RESOURCE_ALIGNEMNT	( 4096 )
-
-#define	D3D12_TIGHT_ALIGNMENT_MIN_PLACED_RESOURCE_ALIGNEMNT	( 8 )
-
 #define	D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES	( 65536 )
 
 #define	D3D12_TRACKED_WORKLOAD_MAX_INSTANCES	( 32 )
@@ -2371,7 +2353,6 @@ enum D3D12_FEATURE
         D3D12_FEATURE_PLACED_RESOURCE_SUPPORT_INFO	= 51,
         D3D12_FEATURE_HARDWARE_COPY	= 52,
         D3D12_FEATURE_D3D12_OPTIONS21	= 53,
-        D3D12_FEATURE_APPLICATION_SPECIFIC_DRIVER_STATE	= 56,
         D3D12_FEATURE_BYTECODE_BYPASS_HASH_SUPPORTED	= 57
     } 	D3D12_FEATURE;
 
@@ -2745,8 +2726,7 @@ enum D3D12_RAYTRACING_TIER
     {
         D3D12_RAYTRACING_TIER_NOT_SUPPORTED	= 0,
         D3D12_RAYTRACING_TIER_1_0	= 10,
-        D3D12_RAYTRACING_TIER_1_1	= 11,
-        D3D12_RAYTRACING_TIER_1_2	= 12
+        D3D12_RAYTRACING_TIER_1_1	= 11
     } 	D3D12_RAYTRACING_TIER;
 
 typedef struct D3D12_FEATURE_DATA_D3D12_OPTIONS5
@@ -2944,11 +2924,6 @@ typedef struct D3D12_FEATURE_DATA_HARDWARE_COPY
     _Out_  BOOL Supported;
     } 	D3D12_FEATURE_DATA_HARDWARE_COPY;
 
-typedef struct D3D12_FEATURE_DATA_APPLICATION_SPECIFIC_DRIVER_STATE
-    {
-    _Out_  BOOL Supported;
-    } 	D3D12_FEATURE_DATA_APPLICATION_SPECIFIC_DRIVER_STATE;
-
 typedef struct D3D12_FEATURE_DATA_BYTECODE_BYPASS_HASH_SUPPORTED
     {
     _Out_  BOOL Supported;
@@ -14409,8 +14384,7 @@ enum D3D12_RAYTRACING_PIPELINE_FLAGS
     {
         D3D12_RAYTRACING_PIPELINE_FLAG_NONE	= 0,
         D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES	= 0x100,
-        D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES	= 0x200,
-        D3D12_RAYTRACING_PIPELINE_FLAG_ALLOW_OPACITY_MICROMAPS	= 0x400
+        D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES	= 0x200
     } 	D3D12_RAYTRACING_PIPELINE_FLAGS;
 
 DEFINE_ENUM_FLAG_OPERATORS( D3D12_RAYTRACING_PIPELINE_FLAGS )
@@ -14564,8 +14538,7 @@ typedef
 enum D3D12_RAYTRACING_GEOMETRY_TYPE
     {
         D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES	= 0,
-        D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS	= ( D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES + 1 ) ,
-        D3D12_RAYTRACING_GEOMETRY_TYPE_OMM_TRIANGLES	= ( D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS + 1 ) 
+        D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS	= ( D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES + 1 ) 
     } 	D3D12_RAYTRACING_GEOMETRY_TYPE;
 
 typedef 
@@ -14575,9 +14548,7 @@ enum D3D12_RAYTRACING_INSTANCE_FLAGS
         D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE	= 0x1,
         D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE	= 0x2,
         D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE	= 0x4,
-        D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE	= 0x8,
-        D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OMM_2_STATE	= 0x10,
-        D3D12_RAYTRACING_INSTANCE_FLAG_DISABLE_OMMS	= 0x20
+        D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE	= 0x8
     } 	D3D12_RAYTRACING_INSTANCE_FLAGS;
 
 DEFINE_ENUM_FLAG_OPERATORS( D3D12_RAYTRACING_INSTANCE_FLAGS )
@@ -14627,51 +14598,6 @@ typedef struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
     D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE AABBs;
     } 	D3D12_RAYTRACING_GEOMETRY_AABBS_DESC;
 
-typedef 
-enum D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX
-    {
-        D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT	= -1,
-        D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE	= -2,
-        D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT	= -3,
-        D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE	= -4
-    } 	D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX;
-
-typedef 
-enum D3D12_RAYTRACING_OPACITY_MICROMAP_STATE
-    {
-        D3D12_RAYTRACING_OPACITY_MICROMAP_STATE_TRANSPARENT	= 0,
-        D3D12_RAYTRACING_OPACITY_MICROMAP_STATE_OPAQUE	= 1,
-        D3D12_RAYTRACING_OPACITY_MICROMAP_STATE_UNKNOWN_TRANSPARENT	= 2,
-        D3D12_RAYTRACING_OPACITY_MICROMAP_STATE_UNKNOWN_OPAQUE	= 3
-    } 	D3D12_RAYTRACING_OPACITY_MICROMAP_STATE;
-
-typedef 
-enum D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT
-    {
-        D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT_OC1_2_STATE	= 0x1,
-        D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT_OC1_4_STATE	= 0x2
-    } 	D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT;
-
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_DESC
-{
-    UINT ByteOffset;
-    UINT SubdivisionLevel : 16;
-    D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT Format : 16;
-} D3D12_RAYTRACING_OPACITY_MICROMAP_DESC;
-typedef struct D3D12_RAYTRACING_GEOMETRY_OMM_LINKAGE_DESC
-    {
-    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE OpacityMicromapIndexBuffer;
-    DXGI_FORMAT OpacityMicromapIndexFormat;
-    UINT OpacityMicromapBaseLocation;
-    D3D12_GPU_VIRTUAL_ADDRESS OpacityMicromapArray;
-    } 	D3D12_RAYTRACING_GEOMETRY_OMM_LINKAGE_DESC;
-
-typedef struct D3D12_RAYTRACING_GEOMETRY_OMM_TRIANGLES_DESC
-    {
-    const D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC *pTriangles;
-    const D3D12_RAYTRACING_GEOMETRY_OMM_LINKAGE_DESC *pOmmLinkage;
-    } 	D3D12_RAYTRACING_GEOMETRY_OMM_TRIANGLES_DESC;
-
 typedef 
 enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
     {
@@ -14681,9 +14607,7 @@ enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
         D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE	= 0x4,
         D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD	= 0x8,
         D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY	= 0x10,
-        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE	= 0x20,
-        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_OMM_UPDATE	= 0x40,
-        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_DISABLE_OMMS	= 0x80
+        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE	= 0x20
     } 	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS;
 
 DEFINE_ENUM_FLAG_OPERATORS( D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS )
@@ -14701,8 +14625,7 @@ typedef
 enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
     {
         D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL	= 0,
-        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL	= 0x1,
-        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_OPACITY_MICROMAP_ARRAY	= 0x2
+        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL	= 0x1
     } 	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE;
 
 typedef 
@@ -14747,20 +14670,12 @@ typedef struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION
 // depending on Type field, NumDescs above is followed by either:
 //       D3D12_RAY_TRACING_INSTANCE_DESC InstanceDescs[NumDescs]
 //    or D3D12_RAY_TRACING_GEOMETRY_DESC GeometryDescs[NumDescs].
-//    or D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_DESC (NumDescs == 1 in this case).
-//
-// For D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_DESC, the pOmmHistogram pointer becomes a GPUVA instead of CPU pointer
-//
 // There is 4 bytes of padding between GeometryDesc structs in the array so alignment is natural when viewed by CPU.
 
 typedef struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
     {
     UINT64 SerializedSizeInBytes;
-    union 
-        {
-        UINT64 NumBottomLevelAccelerationStructurePointers;
-        UINT64 NumBottomLevelAccelerationStructureHeaderAndPointerListPairs;
-        } 	;
+    UINT64 NumBottomLevelAccelerationStructurePointers;
     } 	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC;
 
 typedef struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
@@ -14772,8 +14687,7 @@ typedef struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
 typedef 
 enum D3D12_SERIALIZED_DATA_TYPE
     {
-        D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE	= 0,
-        D3D12_SERIALIZED_DATA_APPLICATION_SPECIFIC_DRIVER_STATE	= 0x1
+        D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE	= 0
     } 	D3D12_SERIALIZED_DATA_TYPE;
 
 typedef 
@@ -14794,39 +14708,6 @@ typedef struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
     UINT64 NumBottomLevelAccelerationStructurePointersAfterHeader;
     } 	D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER;
 
-typedef 
-enum D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE
-    {
-        D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE_NONE	= 0,
-        D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE_BOTTOM_LEVEL_POINTERS	= 0,
-        D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE_BLOCKS	= 0xffffffff
-    } 	D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE;
-
-typedef struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER1
-    {
-    D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER DriverMatchingIdentifier;
-    UINT64 SerializedSizeInBytesIncludingHeader;
-    UINT64 DeserializedSizeInBytes;
-    union 
-        {
-        UINT NumBottomLevelAccelerationStructurePointersAfterHeader;
-        UINT NumBlocks;
-        } 	;
-    D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE HeaderPostambleType;
-    } 	D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER1;
-
-typedef 
-enum D3D12_SERIALIZED_BLOCK_TYPE
-    {
-        D3D12_RAYTRACING_SERIALIZED_BLOCK_TYPE_OPACITY_MICROMAPS	= 0
-    } 	D3D12_RAYTRACING_SERIALIZED_BLOCK_TYPE;
-
-typedef struct D3D12_RAYTRACING_SERIALIZED_BLOCK
-    {
-    D3D12_RAYTRACING_SERIALIZED_BLOCK_TYPE Type;
-    UINT64 NumBlockPointersAfterHeader;
-    } 	D3D12_RAYTRACING_SERIALIZED_BLOCK;
-
 typedef struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
     {
     UINT64 CurrentSizeInBytes;
@@ -14850,25 +14731,9 @@ typedef struct D3D12_RAYTRACING_GEOMETRY_DESC
         {
         D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC Triangles;
         D3D12_RAYTRACING_GEOMETRY_AABBS_DESC AABBs;
-        D3D12_RAYTRACING_GEOMETRY_OMM_TRIANGLES_DESC OmmTriangles;
         } 	;
     } 	D3D12_RAYTRACING_GEOMETRY_DESC;
 
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_HISTOGRAM_ENTRY
-    {
-    UINT Count;
-    UINT SubdivisionLevel;
-    D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT Format;
-    } 	D3D12_RAYTRACING_OPACITY_MICROMAP_HISTOGRAM_ENTRY;
-
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_DESC
-    {
-    UINT NumOmmHistogramEntries;
-    const D3D12_RAYTRACING_OPACITY_MICROMAP_HISTOGRAM_ENTRY *pOmmHistogram;
-    D3D12_GPU_VIRTUAL_ADDRESS InputBuffer;
-    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE PerOmmDescs;
-    } 	D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_DESC;
-
 typedef struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
     {
     D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
@@ -14880,7 +14745,6 @@ typedef struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
         D3D12_GPU_VIRTUAL_ADDRESS InstanceDescs;
         const D3D12_RAYTRACING_GEOMETRY_DESC *pGeometryDescs;
         const D3D12_RAYTRACING_GEOMETRY_DESC *const *ppGeometryDescs;
-        const D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_DESC *pOpacityMicromapArrayDesc;
         } 	;
     } 	D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS;
 
@@ -14899,29 +14763,6 @@ typedef struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
     UINT64 UpdateScratchDataSizeInBytes;
     } 	D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO;
 
-typedef 
-enum D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TYPE
-    {
-        D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_CURRENT_SIZE	= 0,
-        D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TOOLS_VISUALIZATION	= 0x1
-    } 	D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TYPE;
-
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_DESC
-    {
-    D3D12_GPU_VIRTUAL_ADDRESS DestBuffer;
-    D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TYPE InfoType;
-    } 	D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_DESC;
-
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_CURRENT_SIZE_DESC
-    {
-    UINT64 CurrentSizeInBytes;
-    } 	D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_CURRENT_SIZE_DESC;
-
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
-    {
-    UINT64 DecodedSizeInBytes;
-    } 	D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC;
-
 typedef 
 enum D3D12_RAY_FLAGS
     {
@@ -14935,8 +14776,7 @@ enum D3D12_RAY_FLAGS
         D3D12_RAY_FLAG_CULL_OPAQUE	= 0x40,
         D3D12_RAY_FLAG_CULL_NON_OPAQUE	= 0x80,
         D3D12_RAY_FLAG_SKIP_TRIANGLES	= 0x100,
-        D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES	= 0x200,
-        D3D12_RAY_FLAG_FORCE_OMM_2_STATE	= 0x400
+        D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES	= 0x200
     } 	D3D12_RAY_FLAGS;
 
 DEFINE_ENUM_FLAG_OPERATORS( D3D12_RAY_FLAGS )
@@ -28946,124 +28786,6 @@ EXTERN_C const IID IID_ID3D12Tools1;
 #endif 	/* __ID3D12Tools1_INTERFACE_DEFINED__ */
 
 
-#ifndef __ID3D12Tools2_INTERFACE_DEFINED__
-#define __ID3D12Tools2_INTERFACE_DEFINED__
-
-/* interface ID3D12Tools2 */
-/* [unique][local][object][uuid] */ 
-
-
-EXTERN_C const IID IID_ID3D12Tools2;
-
-#if defined(__cplusplus) && !defined(CINTERFACE)
-    
-    MIDL_INTERFACE("01d393c5-c9b0-42a1-958c-c26b02d4d097")
-    ID3D12Tools2 : public ID3D12Tools1
-    {
-    public:
-        virtual HRESULT STDMETHODCALLTYPE SetApplicationSpecificDriverState( 
-            _In_  IUnknown *pAdapter,
-            _In_opt_  ID3DBlob *pBlob) = 0;
-        
-    };
-    
-    
-#else 	/* C style interface */
-
-    typedef struct ID3D12Tools2Vtbl
-    {
-        BEGIN_INTERFACE
-        
-        DECLSPEC_XFGVIRT(IUnknown, QueryInterface)
-        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
-            ID3D12Tools2 * This,
-            REFIID riid,
-            _COM_Outptr_  void **ppvObject);
-        
-        DECLSPEC_XFGVIRT(IUnknown, AddRef)
-        ULONG ( STDMETHODCALLTYPE *AddRef )( 
-            ID3D12Tools2 * This);
-        
-        DECLSPEC_XFGVIRT(IUnknown, Release)
-        ULONG ( STDMETHODCALLTYPE *Release )( 
-            ID3D12Tools2 * This);
-        
-        DECLSPEC_XFGVIRT(ID3D12Tools, EnableShaderInstrumentation)
-        void ( STDMETHODCALLTYPE *EnableShaderInstrumentation )( 
-            ID3D12Tools2 * This,
-            BOOL bEnable);
-        
-        DECLSPEC_XFGVIRT(ID3D12Tools, ShaderInstrumentationEnabled)
-        BOOL ( STDMETHODCALLTYPE *ShaderInstrumentationEnabled )( 
-            ID3D12Tools2 * This);
-        
-        DECLSPEC_XFGVIRT(ID3D12Tools1, ReserveGPUVARangesAtCreate)
-        HRESULT ( STDMETHODCALLTYPE *ReserveGPUVARangesAtCreate )( 
-            ID3D12Tools2 * This,
-            _In_reads_(uiNumRanges)  D3D12_GPU_VIRTUAL_ADDRESS_RANGE *pRanges,
-            _In_  UINT uiNumRanges);
-        
-        DECLSPEC_XFGVIRT(ID3D12Tools1, ClearReservedGPUVARangesList)
-        void ( STDMETHODCALLTYPE *ClearReservedGPUVARangesList )( 
-            ID3D12Tools2 * This);
-        
-        DECLSPEC_XFGVIRT(ID3D12Tools2, SetApplicationSpecificDriverState)
-        HRESULT ( STDMETHODCALLTYPE *SetApplicationSpecificDriverState )( 
-            ID3D12Tools2 * This,
-            _In_  IUnknown *pAdapter,
-            _In_opt_  ID3DBlob *pBlob);
-        
-        END_INTERFACE
-    } ID3D12Tools2Vtbl;
-
-    interface ID3D12Tools2
-    {
-        CONST_VTBL struct ID3D12Tools2Vtbl *lpVtbl;
-    };
-
-    
-
-#ifdef COBJMACROS
-
-
-#define ID3D12Tools2_QueryInterface(This,riid,ppvObject)	\
-    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
-
-#define ID3D12Tools2_AddRef(This)	\
-    ( (This)->lpVtbl -> AddRef(This) ) 
-
-#define ID3D12Tools2_Release(This)	\
-    ( (This)->lpVtbl -> Release(This) ) 
-
-
-#define ID3D12Tools2_EnableShaderInstrumentation(This,bEnable)	\
-    ( (This)->lpVtbl -> EnableShaderInstrumentation(This,bEnable) ) 
-
-#define ID3D12Tools2_ShaderInstrumentationEnabled(This)	\
-    ( (This)->lpVtbl -> ShaderInstrumentationEnabled(This) ) 
-
-
-#define ID3D12Tools2_ReserveGPUVARangesAtCreate(This,pRanges,uiNumRanges)	\
-    ( (This)->lpVtbl -> ReserveGPUVARangesAtCreate(This,pRanges,uiNumRanges) ) 
-
-#define ID3D12Tools2_ClearReservedGPUVARangesList(This)	\
-    ( (This)->lpVtbl -> ClearReservedGPUVARangesList(This) ) 
-
-
-#define ID3D12Tools2_SetApplicationSpecificDriverState(This,pAdapter,pBlob)	\
-    ( (This)->lpVtbl -> SetApplicationSpecificDriverState(This,pAdapter,pBlob) ) 
-
-#endif /* COBJMACROS */
-
-
-#endif 	/* C style interface */
-
-
-
-
-#endif 	/* __ID3D12Tools2_INTERFACE_DEFINED__ */
-
-
 #ifndef __ID3D12PageableTools_INTERFACE_DEFINED__
 #define __ID3D12PageableTools_INTERFACE_DEFINED__
 
@@ -29230,125 +28952,7 @@ EXTERN_C const IID IID_ID3D12DeviceTools;
 #endif 	/* __ID3D12DeviceTools_INTERFACE_DEFINED__ */
 
 
-/* interface __MIDL_itf_d3d12_0000_0066 */
-/* [local] */ 
-
-typedef 
-enum D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_STATUS
-    {
-        D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_UNKNOWN	= 1,
-        D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_USED	= 2,
-        D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_IGNORED	= 3,
-        D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_NOT_SPECIFIED	= 4
-    } 	D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_STATUS;
-
-
-
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0066_v0_0_c_ifspec;
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0066_v0_0_s_ifspec;
-
-#ifndef __ID3D12DeviceTools1_INTERFACE_DEFINED__
-#define __ID3D12DeviceTools1_INTERFACE_DEFINED__
-
-/* interface ID3D12DeviceTools1 */
-/* [unique][local][object][uuid] */ 
-
-
-EXTERN_C const IID IID_ID3D12DeviceTools1;
-
-#if defined(__cplusplus) && !defined(CINTERFACE)
-    
-    MIDL_INTERFACE("e30e9fc7-e641-4d6e-8a81-9dd9206ec47a")
-    ID3D12DeviceTools1 : public ID3D12DeviceTools
-    {
-    public:
-        virtual HRESULT STDMETHODCALLTYPE GetApplicationSpecificDriverState( 
-            _COM_Outptr_  ID3DBlob **ppBlob) = 0;
-        
-        virtual D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_STATUS STDMETHODCALLTYPE GetApplicationSpecificDriverBlobStatus( void) = 0;
-        
-    };
-    
-    
-#else 	/* C style interface */
-
-    typedef struct ID3D12DeviceTools1Vtbl
-    {
-        BEGIN_INTERFACE
-        
-        DECLSPEC_XFGVIRT(IUnknown, QueryInterface)
-        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
-            ID3D12DeviceTools1 * This,
-            REFIID riid,
-            _COM_Outptr_  void **ppvObject);
-        
-        DECLSPEC_XFGVIRT(IUnknown, AddRef)
-        ULONG ( STDMETHODCALLTYPE *AddRef )( 
-            ID3D12DeviceTools1 * This);
-        
-        DECLSPEC_XFGVIRT(IUnknown, Release)
-        ULONG ( STDMETHODCALLTYPE *Release )( 
-            ID3D12DeviceTools1 * This);
-        
-        DECLSPEC_XFGVIRT(ID3D12DeviceTools, SetNextAllocationAddress)
-        void ( STDMETHODCALLTYPE *SetNextAllocationAddress )( 
-            ID3D12DeviceTools1 * This,
-            _In_  D3D12_GPU_VIRTUAL_ADDRESS nextAllocationVirtualAddress);
-        
-        DECLSPEC_XFGVIRT(ID3D12DeviceTools1, GetApplicationSpecificDriverState)
-        HRESULT ( STDMETHODCALLTYPE *GetApplicationSpecificDriverState )( 
-            ID3D12DeviceTools1 * This,
-            _COM_Outptr_  ID3DBlob **ppBlob);
-        
-        DECLSPEC_XFGVIRT(ID3D12DeviceTools1, GetApplicationSpecificDriverBlobStatus)
-        D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_STATUS ( STDMETHODCALLTYPE *GetApplicationSpecificDriverBlobStatus )( 
-            ID3D12DeviceTools1 * This);
-        
-        END_INTERFACE
-    } ID3D12DeviceTools1Vtbl;
-
-    interface ID3D12DeviceTools1
-    {
-        CONST_VTBL struct ID3D12DeviceTools1Vtbl *lpVtbl;
-    };
-
-    
-
-#ifdef COBJMACROS
-
-
-#define ID3D12DeviceTools1_QueryInterface(This,riid,ppvObject)	\
-    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
-
-#define ID3D12DeviceTools1_AddRef(This)	\
-    ( (This)->lpVtbl -> AddRef(This) ) 
-
-#define ID3D12DeviceTools1_Release(This)	\
-    ( (This)->lpVtbl -> Release(This) ) 
-
-
-#define ID3D12DeviceTools1_SetNextAllocationAddress(This,nextAllocationVirtualAddress)	\
-    ( (This)->lpVtbl -> SetNextAllocationAddress(This,nextAllocationVirtualAddress) ) 
-
-
-#define ID3D12DeviceTools1_GetApplicationSpecificDriverState(This,ppBlob)	\
-    ( (This)->lpVtbl -> GetApplicationSpecificDriverState(This,ppBlob) ) 
-
-#define ID3D12DeviceTools1_GetApplicationSpecificDriverBlobStatus(This)	\
-    ( (This)->lpVtbl -> GetApplicationSpecificDriverBlobStatus(This) ) 
-
-#endif /* COBJMACROS */
-
-
-#endif 	/* C style interface */
-
-
-
-
-#endif 	/* __ID3D12DeviceTools1_INTERFACE_DEFINED__ */
-
-
-/* interface __MIDL_itf_d3d12_0000_0067 */
+/* interface __MIDL_itf_d3d12_0000_0065 */
 /* [local] */ 
 
 typedef struct D3D12_SUBRESOURCE_DATA
@@ -29499,8 +29103,8 @@ HRESULT WINAPI D3D12GetInterface( _In_ REFCLSID rclsid, _In_ REFIID riid, _COM_O
 
 
 
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0067_v0_0_c_ifspec;
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0067_v0_0_s_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0065_v0_0_c_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0065_v0_0_s_ifspec;
 
 #ifndef __ID3D12SDKConfiguration_INTERFACE_DEFINED__
 #define __ID3D12SDKConfiguration_INTERFACE_DEFINED__
@@ -29695,7 +29299,7 @@ EXTERN_C const IID IID_ID3D12SDKConfiguration1;
 #endif 	/* __ID3D12SDKConfiguration1_INTERFACE_DEFINED__ */
 
 
-/* interface __MIDL_itf_d3d12_0000_0069 */
+/* interface __MIDL_itf_d3d12_0000_0067 */
 /* [local] */ 
 
 typedef 
@@ -29710,8 +29314,8 @@ enum D3D12_DEVICE_FACTORY_FLAGS
 DEFINE_ENUM_FLAG_OPERATORS( D3D12_DEVICE_FACTORY_FLAGS )
 
 
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0069_v0_0_c_ifspec;
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0069_v0_0_s_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0067_v0_0_c_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0067_v0_0_s_ifspec;
 
 #ifndef __ID3D12DeviceFactory_INTERFACE_DEFINED__
 #define __ID3D12DeviceFactory_INTERFACE_DEFINED__
@@ -29872,7 +29476,7 @@ EXTERN_C const IID IID_ID3D12DeviceFactory;
 #endif 	/* __ID3D12DeviceFactory_INTERFACE_DEFINED__ */
 
 
-/* interface __MIDL_itf_d3d12_0000_0070 */
+/* interface __MIDL_itf_d3d12_0000_0068 */
 /* [local] */ 
 
 typedef 
@@ -29903,8 +29507,8 @@ typedef struct D3D12_DEVICE_CONFIGURATION_DESC
 
 
 
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0070_v0_0_c_ifspec;
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0070_v0_0_s_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0068_v0_0_c_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0068_v0_0_s_ifspec;
 
 #ifndef __ID3D12DeviceConfiguration_INTERFACE_DEFINED__
 #define __ID3D12DeviceConfiguration_INTERFACE_DEFINED__
@@ -30192,7 +29796,7 @@ EXTERN_C const IID IID_ID3D12DeviceConfiguration1;
 #endif 	/* __ID3D12DeviceConfiguration1_INTERFACE_DEFINED__ */
 
 
-/* interface __MIDL_itf_d3d12_0000_0072 */
+/* interface __MIDL_itf_d3d12_0000_0070 */
 /* [local] */ 
 
 typedef 
@@ -30232,8 +29836,8 @@ enum D3D12_SHADING_RATE_COMBINER
 
 
 
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0072_v0_0_c_ifspec;
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0072_v0_0_s_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0070_v0_0_c_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0070_v0_0_s_ifspec;
 
 #ifndef __ID3D12GraphicsCommandList5_INTERFACE_DEFINED__
 #define __ID3D12GraphicsCommandList5_INTERFACE_DEFINED__
@@ -31068,7 +30672,7 @@ EXTERN_C const IID IID_ID3D12GraphicsCommandList5;
 #endif 	/* __ID3D12GraphicsCommandList5_INTERFACE_DEFINED__ */
 
 
-/* interface __MIDL_itf_d3d12_0000_0073 */
+/* interface __MIDL_itf_d3d12_0000_0071 */
 /* [local] */ 
 
 typedef struct D3D12_DISPATCH_MESH_ARGUMENTS
@@ -31080,8 +30684,8 @@ typedef struct D3D12_DISPATCH_MESH_ARGUMENTS
 
 
 
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0073_v0_0_c_ifspec;
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0073_v0_0_s_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0071_v0_0_c_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0071_v0_0_s_ifspec;
 
 #ifndef __ID3D12GraphicsCommandList6_INTERFACE_DEFINED__
 #define __ID3D12GraphicsCommandList6_INTERFACE_DEFINED__
@@ -35659,7 +35263,7 @@ EXTERN_C const IID IID_ID3D12GBVDiagnostics;
 #endif 	/* __ID3D12GBVDiagnostics_INTERFACE_DEFINED__ */
 
 
-/* interface __MIDL_itf_d3d12_0000_0080 */
+/* interface __MIDL_itf_d3d12_0000_0078 */
 /* [local] */ 
 
 #endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES) */
@@ -35727,10 +35331,8 @@ DEFINE_GUID(IID_ID3D12Device14,0x5f6e592d,0xd895,0x44c2,0x8e,0x4a,0x88,0xad,0x49
 DEFINE_GUID(IID_ID3D12VirtualizationGuestDevice,0xbc66d368,0x7373,0x4943,0x87,0x57,0xfc,0x87,0xdc,0x79,0xe4,0x76);
 DEFINE_GUID(IID_ID3D12Tools,0x7071e1f0,0xe84b,0x4b33,0x97,0x4f,0x12,0xfa,0x49,0xde,0x65,0xc5);
 DEFINE_GUID(IID_ID3D12Tools1,0xe4fbc019,0xdd3c,0x43e1,0x8f,0x32,0x7f,0x64,0x95,0x75,0xf0,0xa0);
-DEFINE_GUID(IID_ID3D12Tools2,0x01d393c5,0xc9b0,0x42a1,0x95,0x8c,0xc2,0x6b,0x02,0xd4,0xd0,0x97);
 DEFINE_GUID(IID_ID3D12PageableTools,0x8f1359db,0xd8d1,0x42f9,0xb5,0xcf,0x79,0xf4,0xcb,0xad,0x0d,0x3d);
 DEFINE_GUID(IID_ID3D12DeviceTools,0x2ea68e9c,0x19c3,0x4e47,0xa1,0x09,0x6c,0xda,0xdf,0xf0,0xac,0xa9);
-DEFINE_GUID(IID_ID3D12DeviceTools1,0xe30e9fc7,0xe641,0x4d6e,0x8a,0x81,0x9d,0xd9,0x20,0x6e,0xc4,0x7a);
 DEFINE_GUID(IID_ID3D12SDKConfiguration,0xe9eb5314,0x33aa,0x42b2,0xa7,0x18,0xd7,0x7f,0x58,0xb1,0xf1,0xc7);
 DEFINE_GUID(IID_ID3D12SDKConfiguration1,0x8aaf9303,0xad25,0x48b9,0x9a,0x57,0xd9,0xc3,0x7e,0x00,0x9d,0x9f);
 DEFINE_GUID(IID_ID3D12DeviceFactory,0x61f307d3,0xd34e,0x4e7c,0x83,0x74,0x3b,0xa4,0xde,0x23,0xcc,0xcb);
@@ -35746,8 +35348,8 @@ DEFINE_GUID(IID_ID3D12DSRDeviceFactory,0xf343d1a0,0xafe3,0x439f,0xb1,0x3d,0xcd,0
 DEFINE_GUID(IID_ID3D12GBVDiagnostics,0x597985ab,0x9b75,0x4dbb,0xbe,0x23,0x07,0x61,0x19,0x5b,0xeb,0xee);
 
 
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0080_v0_0_c_ifspec;
-extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0080_v0_0_s_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0078_v0_0_c_ifspec;
+extern RPC_IF_HANDLE __MIDL_itf_d3d12_0000_0078_v0_0_s_ifspec;
 
 /* Additional Prototypes for ALL interfaces */
 
diff --git a/third_party/microsoft_dxheaders/src/include/directx/d3d12.idl b/third_party/microsoft_dxheaders/src/include/directx/d3d12.idl
index 020a581..5970bb5 100644
--- a/third_party/microsoft_dxheaders/src/include/directx/d3d12.idl
+++ b/third_party/microsoft_dxheaders/src/include/directx/d3d12.idl
@@ -293,7 +293,7 @@ const UINT D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = 0xffffffff;
 const UINT D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = 0xfffffff8;
 const UINT D3D12_PACKED_TILE = 0xffffffff;
 const UINT D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
-const UINT D3D12_PREVIEW_SDK_VERSION = 717;
+const UINT D3D12_PREVIEW_SDK_VERSION = 716;
 const UINT D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
 const UINT D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1;
 const UINT D3D12_PS_CS_UAV_REGISTER_COUNT = 8;
@@ -361,7 +361,7 @@ const UINT D3D12_REQ_TEXTURECUBE_DIMENSION = 16384;
 const UINT D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
 const UINT D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 0xffffffff;
 const UINT D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT = 2;
-const UINT D3D12_SDK_VERSION = 616;
+const UINT D3D12_SDK_VERSION = 615;
 const UINT D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES = 32;
 const UINT D3D12_SHADER_MAJOR_VERSION = 5;
 const UINT D3D12_SHADER_MAX_INSTANCES = 65535;
@@ -414,8 +414,6 @@ const UINT D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
 const UINT D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
 const UINT D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256;
 const UINT D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512;
-const UINT D3D12_TIGHT_ALIGNMENT_MIN_COMMITTED_RESOURCE_ALIGNEMNT = 4096;
-const UINT D3D12_TIGHT_ALIGNMENT_MIN_PLACED_RESOURCE_ALIGNEMNT = 8;
 const UINT D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
 const UINT D3D12_TRACKED_WORKLOAD_MAX_INSTANCES = 32;
 const UINT D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096;
@@ -1046,7 +1044,6 @@ typedef enum D3D12_FEATURE
     D3D12_FEATURE_PLACED_RESOURCE_SUPPORT_INFO          = 51,
     D3D12_FEATURE_HARDWARE_COPY                         = 52,
     D3D12_FEATURE_D3D12_OPTIONS21                       = 53,
-    D3D12_FEATURE_APPLICATION_SPECIFIC_DRIVER_STATE     = 56,
     D3D12_FEATURE_BYTECODE_BYPASS_HASH_SUPPORTED        = 57,
 } D3D12_FEATURE;
 
@@ -1426,7 +1423,6 @@ typedef enum D3D12_RAYTRACING_TIER
     D3D12_RAYTRACING_TIER_NOT_SUPPORTED = 0,
     D3D12_RAYTRACING_TIER_1_0 = 10,
     D3D12_RAYTRACING_TIER_1_1 = 11,
-    D3D12_RAYTRACING_TIER_1_2 = 12,
 } D3D12_RAYTRACING_TIER;
 
 // D3D12_FEATURE_D3D12_OPTIONS5
@@ -1642,10 +1638,6 @@ typedef struct D3D12_FEATURE_DATA_HARDWARE_COPY
     [annotation("_Out_")] BOOL Supported;
 } D3D12_FEATURE_DATA_HARDWARE_COPY;
 
-typedef struct D3D12_FEATURE_DATA_APPLICATION_SPECIFIC_DRIVER_STATE
-{
-    [annotation("_Out_")] BOOL Supported;
-} D3D12_FEATURE_DATA_APPLICATION_SPECIFIC_DRIVER_STATE;
 
 typedef struct D3D12_FEATURE_DATA_BYTECODE_BYPASS_HASH_SUPPORTED
 {
@@ -4587,8 +4579,7 @@ typedef enum D3D12_RAYTRACING_PIPELINE_FLAGS
     D3D12_RAYTRACING_PIPELINE_FLAG_NONE                         = 0x0,
     D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES               = 0x100,
     D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES   = 0x200,
-    D3D12_RAYTRACING_PIPELINE_FLAG_ALLOW_OPACITY_MICROMAPS      = 0x400,
-} D3D12_RAYTRACING_PIPELINE_FLAGS;
+} D3D12_RAYTRACING_PIPELINE_FLAGS; 
 cpp_quote("DEFINE_ENUM_FLAG_OPERATORS( D3D12_RAYTRACING_PIPELINE_FLAGS )")
 
 typedef struct D3D12_RAYTRACING_PIPELINE_CONFIG1
@@ -4736,7 +4727,6 @@ typedef enum D3D12_RAYTRACING_GEOMETRY_TYPE
 {
     D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES,
     D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS,
-    D3D12_RAYTRACING_GEOMETRY_TYPE_OMM_TRIANGLES
 } D3D12_RAYTRACING_GEOMETRY_TYPE;
 
 typedef enum D3D12_RAYTRACING_INSTANCE_FLAGS
@@ -4745,9 +4735,7 @@ typedef enum D3D12_RAYTRACING_INSTANCE_FLAGS
     D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 0x1,
     D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 0x2,
     D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 0x4,
-    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 0x8,
-    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OMM_2_STATE = 0x10,
-    D3D12_RAYTRACING_INSTANCE_FLAG_DISABLE_OMMS = 0x20
+    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 0x8
 } D3D12_RAYTRACING_INSTANCE_FLAGS;
 cpp_quote("DEFINE_ENUM_FLAG_OPERATORS( D3D12_RAYTRACING_INSTANCE_FLAGS )")
 
@@ -4797,49 +4785,6 @@ typedef struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
     D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE    AABBs;
 } D3D12_RAYTRACING_GEOMETRY_AABBS_DESC;
 
-typedef enum D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX
-{
-    D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT = -1,
-    D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE = -2,
-    D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT = -3,
-    D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE = -4,
-} D3D12_RAYTRACING_OPACITY_MICROMAP_SPECIAL_INDEX;
-
-typedef enum D3D12_RAYTRACING_OPACITY_MICROMAP_STATE
-{
-    D3D12_RAYTRACING_OPACITY_MICROMAP_STATE_TRANSPARENT = 0,
-    D3D12_RAYTRACING_OPACITY_MICROMAP_STATE_OPAQUE = 1,
-    D3D12_RAYTRACING_OPACITY_MICROMAP_STATE_UNKNOWN_TRANSPARENT = 2,
-    D3D12_RAYTRACING_OPACITY_MICROMAP_STATE_UNKNOWN_OPAQUE = 3,
-} D3D12_RAYTRACING_OPACITY_MICROMAP_STATE;
-
-typedef enum D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT
-{
-    D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT_OC1_2_STATE = 0x1,
-    D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT_OC1_4_STATE = 0x2,
-} D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT;
-
-cpp_quote("typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_DESC")
-cpp_quote("{")
-cpp_quote("    UINT ByteOffset;")
-cpp_quote("    UINT SubdivisionLevel : 16;")
-cpp_quote("    D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT Format : 16;")
-cpp_quote("} D3D12_RAYTRACING_OPACITY_MICROMAP_DESC;")
-
-typedef struct D3D12_RAYTRACING_GEOMETRY_OMM_LINKAGE_DESC
-{
-    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE OpacityMicromapIndexBuffer;
-    DXGI_FORMAT OpacityMicromapIndexFormat;
-    UINT OpacityMicromapBaseLocation;
-    D3D12_GPU_VIRTUAL_ADDRESS OpacityMicromapArray;
-} D3D12_RAYTRACING_GEOMETRY_OMM_LINKAGE_DESC;
-
-typedef struct D3D12_RAYTRACING_GEOMETRY_OMM_TRIANGLES_DESC
-{
-    const D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC* pTriangles;
-    const D3D12_RAYTRACING_GEOMETRY_OMM_LINKAGE_DESC* pOmmLinkage;
-} D3D12_RAYTRACING_GEOMETRY_OMM_TRIANGLES_DESC;
-
 typedef enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
 {
     D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0x00,
@@ -4849,8 +4794,6 @@ typedef enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
     D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 0x08,
     D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 0x10,
     D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 0x20,
-    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_OMM_UPDATE = 0x40,
-    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_DISABLE_OMMS = 0x80,
 } D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS;
 cpp_quote("DEFINE_ENUM_FLAG_OPERATORS( D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS )")
 
@@ -4866,8 +4809,7 @@ typedef enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE
 typedef enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
 {
     D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0x0,
-    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 0x1,
-    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_OPACITY_MICROMAP_ARRAY = 0x2,
+    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 0x1
 } D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE;
 
 typedef enum D3D12_ELEMENTS_LAYOUT
@@ -4909,21 +4851,13 @@ cpp_quote("// Regarding D3D12_BUILD_RAY_TRACING_ACCELERATION_STRUCTURE_TOOLS_VIS
 cpp_quote("// depending on Type field, NumDescs above is followed by either:")
 cpp_quote("//       D3D12_RAY_TRACING_INSTANCE_DESC InstanceDescs[NumDescs]")
 cpp_quote("//    or D3D12_RAY_TRACING_GEOMETRY_DESC GeometryDescs[NumDescs].")
-cpp_quote("//    or D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_DESC (NumDescs == 1 in this case).")
-cpp_quote("//")
-cpp_quote("// For D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_DESC, the pOmmHistogram pointer becomes a GPUVA instead of CPU pointer")
-cpp_quote("//")
 cpp_quote("// There is 4 bytes of padding between GeometryDesc structs in the array so alignment is natural when viewed by CPU.")
 cpp_quote("")
 
 typedef struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
 {
     UINT64 SerializedSizeInBytes;
-    union
-    {
-        UINT64 NumBottomLevelAccelerationStructurePointers;
-        UINT64 NumBottomLevelAccelerationStructureHeaderAndPointerListPairs;
-    };
+    UINT64 NumBottomLevelAccelerationStructurePointers;
 } D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC;
 
 typedef struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
@@ -4935,7 +4869,6 @@ typedef struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
 typedef enum D3D12_SERIALIZED_DATA_TYPE
 {
     D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0x0,
-    D3D12_SERIALIZED_DATA_APPLICATION_SPECIFIC_DRIVER_STATE = 0x1,
 } D3D12_SERIALIZED_DATA_TYPE;
 
 typedef enum D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
@@ -4955,37 +4888,6 @@ typedef struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
     UINT64 NumBottomLevelAccelerationStructurePointersAfterHeader;
 } D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER;
 
-typedef enum D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE
-{
-    D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE_NONE = 0,
-    D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE_BOTTOM_LEVEL_POINTERS = 0,
-    D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE_BLOCKS = 0xffffffff
-} D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE;
-
-typedef struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER1
-{
-    D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER DriverMatchingIdentifier;
-    UINT64 SerializedSizeInBytesIncludingHeader;
-    UINT64 DeserializedSizeInBytes;
-    union
-    {
-        UINT NumBottomLevelAccelerationStructurePointersAfterHeader;
-        UINT NumBlocks;
-    };
-    D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER_POSTAMBLE_TYPE HeaderPostambleType;
-} D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER1;
-
-typedef enum D3D12_SERIALIZED_BLOCK_TYPE
-{
-    D3D12_RAYTRACING_SERIALIZED_BLOCK_TYPE_OPACITY_MICROMAPS = 0x0,
-} D3D12_RAYTRACING_SERIALIZED_BLOCK_TYPE;
-
-typedef struct D3D12_RAYTRACING_SERIALIZED_BLOCK
-{
-    D3D12_RAYTRACING_SERIALIZED_BLOCK_TYPE Type;
-    UINT64 NumBlockPointersAfterHeader;
-} D3D12_RAYTRACING_SERIALIZED_BLOCK;
-
 typedef struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
 {
     UINT64 CurrentSizeInBytes;
@@ -5007,27 +4909,11 @@ typedef struct D3D12_RAYTRACING_GEOMETRY_DESC
     D3D12_RAYTRACING_GEOMETRY_FLAGS   Flags;
     union
     {
-        D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC        Triangles;
-        D3D12_RAYTRACING_GEOMETRY_AABBS_DESC            AABBs;
-        D3D12_RAYTRACING_GEOMETRY_OMM_TRIANGLES_DESC    OmmTriangles;
+        D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC  Triangles;
+        D3D12_RAYTRACING_GEOMETRY_AABBS_DESC      AABBs;
     };
 } D3D12_RAYTRACING_GEOMETRY_DESC;
 
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_HISTOGRAM_ENTRY
-{
-    UINT Count;
-    UINT SubdivisionLevel;
-    D3D12_RAYTRACING_OPACITY_MICROMAP_FORMAT Format;
-} D3D12_RAYTRACING_OPACITY_MICROMAP_HISTOGRAM_ENTRY;
-
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_DESC
-{
-    UINT NumOmmHistogramEntries;
-    const D3D12_RAYTRACING_OPACITY_MICROMAP_HISTOGRAM_ENTRY* pOmmHistogram;
-    D3D12_GPU_VIRTUAL_ADDRESS InputBuffer;
-    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE PerOmmDescs;
-} D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_DESC;
-
 typedef struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
 {
     D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
@@ -5039,7 +4925,6 @@ typedef struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
         D3D12_GPU_VIRTUAL_ADDRESS InstanceDescs;
         const D3D12_RAYTRACING_GEOMETRY_DESC* pGeometryDescs;
         const D3D12_RAYTRACING_GEOMETRY_DESC*const* ppGeometryDescs;
-        const D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_DESC* pOpacityMicromapArrayDesc;
     };
 } D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS;
 
@@ -5058,28 +4943,6 @@ typedef struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
     UINT64 UpdateScratchDataSizeInBytes;
 } D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO;
 
-typedef enum D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TYPE
-{
-    D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_CURRENT_SIZE = 0x0,
-    D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TOOLS_VISUALIZATION = 0x1,
-} D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TYPE;
-
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_DESC
-{
-    D3D12_GPU_VIRTUAL_ADDRESS DestBuffer;
-    D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TYPE InfoType;
-} D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_DESC;
-
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_CURRENT_SIZE_DESC
-{
-    UINT64 CurrentSizeInBytes;
-} D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_CURRENT_SIZE_DESC;
-
-typedef struct D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
-{
-    UINT64 DecodedSizeInBytes;
-} D3D12_RAYTRACING_OPACITY_MICROMAP_ARRAY_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC;
-
 typedef enum D3D12_RAY_FLAGS
 {
     D3D12_RAY_FLAG_NONE                            = 0x00,
@@ -5093,7 +4956,6 @@ typedef enum D3D12_RAY_FLAGS
     D3D12_RAY_FLAG_CULL_NON_OPAQUE                 = 0x80,
     D3D12_RAY_FLAG_SKIP_TRIANGLES                  = 0x100,
     D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES      = 0x200,
-    D3D12_RAY_FLAG_FORCE_OMM_2_STATE               = 0x400,
 } D3D12_RAY_FLAGS; 
 cpp_quote( "DEFINE_ENUM_FLAG_OPERATORS( D3D12_RAY_FLAGS )" )
 
@@ -6228,7 +6090,6 @@ interface ID3D12Device14 : ID3D12Device13
 };
 
 
-
 [uuid(bc66d368-7373-4943-8757-fc87dc79e476), object, local, pointer_default(unique)]
 interface ID3D12VirtualizationGuestDevice
     : IUnknown
@@ -6264,14 +6125,6 @@ interface ID3D12Tools1
     void ClearReservedGPUVARangesList();
 }
 
-[uuid(01d393c5-c9b0-42a1-958c-c26b02d4d097), object, local, pointer_default(unique)]
-interface ID3D12Tools2
-    : ID3D12Tools1
-{
-    HRESULT SetApplicationSpecificDriverState(
-        [annotation("_In_")] IUnknown* pAdapter,
-        [annotation("_In_opt_")] ID3DBlob* pBlob);
-};
 
 [uuid(8f1359db-d8d1-42f9-b5cf-79f4cbad0d3d), object, local, pointer_default(unique)]
 interface ID3D12PageableTools
@@ -6289,23 +6142,6 @@ interface ID3D12DeviceTools
         [annotation("_In_")] D3D12_GPU_VIRTUAL_ADDRESS nextAllocationVirtualAddress);
 }
 
-typedef enum D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_STATUS
-{
-    D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_UNKNOWN = 1,
-    D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_USED = 2,
-    D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_IGNORED = 3,
-    D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_NOT_SPECIFIED = 4,
-} D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_STATUS;
-
-[uuid(e30e9fc7-e641-4d6e-8a81-9dd9206ec47a), object, local, pointer_default(unique)]
-interface ID3D12DeviceTools1
-    : ID3D12DeviceTools
-{
-    HRESULT GetApplicationSpecificDriverState(
-        [annotation("_COM_Outptr_")]  ID3DBlob** ppBlob);
-    D3D12_APPLICATION_SPECIFIC_DRIVER_BLOB_STATUS GetApplicationSpecificDriverBlobStatus();
-}
-
 
 typedef struct D3D12_SUBRESOURCE_DATA
 {
@@ -6784,10 +6620,8 @@ cpp_quote( "DEFINE_GUID(IID_ID3D12Device14,0x5f6e592d,0xd895,0x44c2,0x8e,0x4a,0x
 cpp_quote( "DEFINE_GUID(IID_ID3D12VirtualizationGuestDevice,0xbc66d368,0x7373,0x4943,0x87,0x57,0xfc,0x87,0xdc,0x79,0xe4,0x76);" )
 cpp_quote( "DEFINE_GUID(IID_ID3D12Tools,0x7071e1f0,0xe84b,0x4b33,0x97,0x4f,0x12,0xfa,0x49,0xde,0x65,0xc5);" )
 cpp_quote( "DEFINE_GUID(IID_ID3D12Tools1,0xe4fbc019,0xdd3c,0x43e1,0x8f,0x32,0x7f,0x64,0x95,0x75,0xf0,0xa0);" )
-cpp_quote( "DEFINE_GUID(IID_ID3D12Tools2,0x01d393c5,0xc9b0,0x42a1,0x95,0x8c,0xc2,0x6b,0x02,0xd4,0xd0,0x97);" )
 cpp_quote( "DEFINE_GUID(IID_ID3D12PageableTools,0x8f1359db,0xd8d1,0x42f9,0xb5,0xcf,0x79,0xf4,0xcb,0xad,0x0d,0x3d);" )
 cpp_quote( "DEFINE_GUID(IID_ID3D12DeviceTools,0x2ea68e9c,0x19c3,0x4e47,0xa1,0x09,0x6c,0xda,0xdf,0xf0,0xac,0xa9);" )
-cpp_quote( "DEFINE_GUID(IID_ID3D12DeviceTools1,0xe30e9fc7,0xe641,0x4d6e,0x8a,0x81,0x9d,0xd9,0x20,0x6e,0xc4,0x7a);" )
 cpp_quote( "DEFINE_GUID(IID_ID3D12SDKConfiguration,0xe9eb5314,0x33aa,0x42b2,0xa7,0x18,0xd7,0x7f,0x58,0xb1,0xf1,0xc7);" )
 cpp_quote( "DEFINE_GUID(IID_ID3D12SDKConfiguration1,0x8aaf9303,0xad25,0x48b9,0x9a,0x57,0xd9,0xc3,0x7e,0x00,0x9d,0x9f);" )
 cpp_quote( "DEFINE_GUID(IID_ID3D12DeviceFactory,0x61f307d3,0xd34e,0x4e7c,0x83,0x74,0x3b,0xa4,0xde,0x23,0xcc,0xcb);" )
diff --git a/third_party/microsoft_dxheaders/src/include/directx/d3d12sdklayers.h b/third_party/microsoft_dxheaders/src/include/directx/d3d12sdklayers.h
index 12c1fc3..a78b0fd 100644
--- a/third_party/microsoft_dxheaders/src/include/directx/d3d12sdklayers.h
+++ b/third_party/microsoft_dxheaders/src/include/directx/d3d12sdklayers.h
@@ -3359,9 +3359,7 @@ enum D3D12_MESSAGE_ID
         D3D12_MESSAGE_ID_APPLICATION_SPECIFIC_DRIVER_STATE_NOT_SUPPORTED	= 1421,
         D3D12_MESSAGE_ID_RENDER_TARGET_OR_DEPTH_STENCIL_RESOUCE_NOT_INITIALIZED	= 1422,
         D3D12_MESSAGE_ID_BYTECODE_VALIDATION_ERROR	= 1423,
-        D3D12_MESSAGE_ID_FENCE_ZERO_WAIT	= 1424,
-        D3D12_MESSAGE_ID_NON_COMMON_RESOURCE_IN_COPY_QUEUE	= 1425,
-        D3D12_MESSAGE_ID_D3D12_MESSAGES_END	= ( D3D12_MESSAGE_ID_NON_COMMON_RESOURCE_IN_COPY_QUEUE + 1 ) 
+        D3D12_MESSAGE_ID_D3D12_MESSAGES_END	= ( D3D12_MESSAGE_ID_BYTECODE_VALIDATION_ERROR + 1 ) 
     } 	D3D12_MESSAGE_ID;
 
 typedef struct D3D12_MESSAGE
diff --git a/third_party/microsoft_dxheaders/src/include/directx/d3d12sdklayers.idl b/third_party/microsoft_dxheaders/src/include/directx/d3d12sdklayers.idl
index db6c2cb..f5b4474 100644
--- a/third_party/microsoft_dxheaders/src/include/directx/d3d12sdklayers.idl
+++ b/third_party/microsoft_dxheaders/src/include/directx/d3d12sdklayers.idl
@@ -1508,8 +1508,6 @@ typedef enum D3D12_MESSAGE_ID {
     D3D12_MESSAGE_ID_APPLICATION_SPECIFIC_DRIVER_STATE_NOT_SUPPORTED = 1421,
     D3D12_MESSAGE_ID_RENDER_TARGET_OR_DEPTH_STENCIL_RESOUCE_NOT_INITIALIZED = 1422,
     D3D12_MESSAGE_ID_BYTECODE_VALIDATION_ERROR = 1423,
-    D3D12_MESSAGE_ID_FENCE_ZERO_WAIT = 1424,
-    D3D12_MESSAGE_ID_NON_COMMON_RESOURCE_IN_COPY_QUEUE = 1425,
     D3D12_MESSAGE_ID_D3D12_MESSAGES_END  
 } D3D12_MESSAGE_ID;
 
diff --git a/third_party/microsoft_dxheaders/src/include/directx/d3d12video.h b/third_party/microsoft_dxheaders/src/include/directx/d3d12video.h
index 8bb3a22..5848f07 100644
--- a/third_party/microsoft_dxheaders/src/include/directx/d3d12video.h
+++ b/third_party/microsoft_dxheaders/src/include/directx/d3d12video.h
@@ -7566,8 +7566,7 @@ enum D3D12_VIDEO_ENCODER_VALIDATION_FLAGS
         D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_DATA_NOT_SUPPORTED	= 0x1000,
         D3D12_VIDEO_ENCODER_VALIDATION_FLAG_QPMAP_NOT_SUPPORTED	= 0x2000,
         D3D12_VIDEO_ENCODER_VALIDATION_FLAG_DIRTY_REGIONS_NOT_SUPPORTED	= 0x4000,
-        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_MOTION_SEARCH_NOT_SUPPORTED	= 0x8000,
-        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_FRAME_ANALYSIS_NOT_SUPPORTED	= 0x10000
+        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_MOTION_SEARCH_NOT_SUPPORTED	= 0x8000
     } 	D3D12_VIDEO_ENCODER_VALIDATION_FLAGS;
 
 DEFINE_ENUM_FLAG_OPERATORS(D3D12_VIDEO_ENCODER_VALIDATION_FLAGS)
diff --git a/third_party/microsoft_dxheaders/src/include/directx/d3d12video.idl b/third_party/microsoft_dxheaders/src/include/directx/d3d12video.idl
index 0770b04..b0322f8 100644
--- a/third_party/microsoft_dxheaders/src/include/directx/d3d12video.idl
+++ b/third_party/microsoft_dxheaders/src/include/directx/d3d12video.idl
@@ -2628,7 +2628,6 @@ typedef enum D3D12_VIDEO_ENCODER_VALIDATION_FLAGS
     D3D12_VIDEO_ENCODER_VALIDATION_FLAG_QPMAP_NOT_SUPPORTED = 0x2000,
     D3D12_VIDEO_ENCODER_VALIDATION_FLAG_DIRTY_REGIONS_NOT_SUPPORTED = 0x4000,
     D3D12_VIDEO_ENCODER_VALIDATION_FLAG_MOTION_SEARCH_NOT_SUPPORTED = 0x8000,
-    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_FRAME_ANALYSIS_NOT_SUPPORTED = 0x10000,
 } D3D12_VIDEO_ENCODER_VALIDATION_FLAGS;
 cpp_quote("DEFINE_ENUM_FLAG_OPERATORS(D3D12_VIDEO_ENCODER_VALIDATION_FLAGS)")
 
diff --git a/third_party/microsoft_dxheaders/src/include/directx/d3dx12_core.h b/third_party/microsoft_dxheaders/src/include/directx/d3dx12_core.h
index 47e97b5..20c9d2b 100644
--- a/third_party/microsoft_dxheaders/src/include/directx/d3dx12_core.h
+++ b/third_party/microsoft_dxheaders/src/include/directx/d3dx12_core.h
@@ -1496,389 +1496,6 @@ inline const CD3DX12_RESOURCE_DESC1* D3DX12ConditionallyExpandAPIDesc(
 }
 
 
-//------------------------------------------------------------------------------------------------
-struct CD3DX12_SHADER_RESOURCE_VIEW_DESC : public D3D12_SHADER_RESOURCE_VIEW_DESC
-{
-    CD3DX12_SHADER_RESOURCE_VIEW_DESC() = default;
-    explicit CD3DX12_SHADER_RESOURCE_VIEW_DESC( const D3D12_SHADER_RESOURCE_VIEW_DESC& o ) noexcept :
-        D3D12_SHADER_RESOURCE_VIEW_DESC(o)
-    {}
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC StructuredBuffer(
-        UINT NumElements,
-        UINT StructureByteStride,
-        UINT64 FirstElement = 0) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = DXGI_FORMAT_UNKNOWN;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_BUFFER;
-        desc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
-        desc.Buffer.FirstElement = FirstElement;
-        desc.Buffer.NumElements = NumElements;
-        desc.Buffer.StructureByteStride = StructureByteStride;
-        desc.Buffer.Flags = D3D12_BUFFER_SRV_FLAG_NONE;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC RawBuffer(
-        UINT NumElements,
-        UINT64 FirstElement = 0) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = DXGI_FORMAT_R32_UINT;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_BUFFER;
-        desc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
-        desc.Buffer.FirstElement = FirstElement;
-        desc.Buffer.NumElements = NumElements;
-        desc.Buffer.StructureByteStride = 0;
-        desc.Buffer.Flags = D3D12_BUFFER_SRV_FLAG_RAW;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC TypedBuffer(
-        DXGI_FORMAT Format,
-        UINT NumElements,
-        UINT64 FirstElement = 0,
-        UINT Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_BUFFER;
-        desc.Shader4ComponentMapping = Shader4ComponentMapping;
-        desc.Buffer.FirstElement = FirstElement;
-        desc.Buffer.NumElements = NumElements;
-        desc.Buffer.StructureByteStride = 0;
-        desc.Buffer.Flags = D3D12_BUFFER_SRV_FLAG_NONE;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC Tex1D(
-        DXGI_FORMAT Format,
-        UINT MipLevels = -1,
-        UINT MostDetailedMip = 0,
-        FLOAT ResourceMinLODClamp = 0.0f,
-        UINT Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE1D;
-        desc.Shader4ComponentMapping = Shader4ComponentMapping;
-        desc.Texture1D.MostDetailedMip = MostDetailedMip;
-        desc.Texture1D.MipLevels = MipLevels;
-        desc.Texture1D.ResourceMinLODClamp = ResourceMinLODClamp;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC Tex1DArray(
-        DXGI_FORMAT Format,
-        UINT ArraySize = -1,
-        UINT MipLevels = -1,
-        UINT FirstArraySlice = 0,
-        UINT MostDetailedMip = 0,
-        FLOAT ResourceMinLODClamp = 0.0f,
-        UINT Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE1DARRAY;
-        desc.Shader4ComponentMapping = Shader4ComponentMapping;
-        desc.Texture1DArray.MostDetailedMip = MostDetailedMip;
-        desc.Texture1DArray.MipLevels = MipLevels;
-        desc.Texture1DArray.FirstArraySlice = FirstArraySlice;
-        desc.Texture1DArray.ArraySize = ArraySize;
-        desc.Texture1DArray.ResourceMinLODClamp = ResourceMinLODClamp;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC Tex2D(
-        DXGI_FORMAT Format,
-        UINT MipLevels = -1,
-        UINT MostDetailedMip = 0,
-        UINT PlaneSlice = 0,
-        FLOAT ResourceMinLODClamp = 0.0f,
-        UINT Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;
-        desc.Shader4ComponentMapping = Shader4ComponentMapping;
-        desc.Texture2D.MostDetailedMip = MostDetailedMip;
-        desc.Texture2D.MipLevels = MipLevels;
-        desc.Texture2D.PlaneSlice = PlaneSlice;
-        desc.Texture2D.ResourceMinLODClamp = ResourceMinLODClamp;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC Tex2DArray(
-        DXGI_FORMAT Format,
-        UINT ArraySize = -1,
-        UINT MipLevels = -1,
-        UINT FirstArraySlice = 0,
-        UINT MostDetailedMip = 0,
-        UINT PlaneSlice = 0,
-        FLOAT ResourceMinLODClamp = 0.0f,
-        UINT Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2DARRAY;
-        desc.Shader4ComponentMapping = Shader4ComponentMapping;
-        desc.Texture2DArray.MostDetailedMip = MostDetailedMip;
-        desc.Texture2DArray.MipLevels = MipLevels;
-        desc.Texture2DArray.FirstArraySlice = FirstArraySlice;
-        desc.Texture2DArray.ArraySize = ArraySize;
-        desc.Texture2DArray.PlaneSlice = PlaneSlice;
-        desc.Texture2DArray.ResourceMinLODClamp = ResourceMinLODClamp;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC Tex2DMS(
-        DXGI_FORMAT Format,
-        UINT Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2DMS;
-        desc.Shader4ComponentMapping = Shader4ComponentMapping;
-        // desc.Texture2DMS.UnusedField_NothingToDefine = 0;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC Tex2DMSArray(
-        DXGI_FORMAT Format,
-        UINT ArraySize,
-        UINT FirstArraySlice = 0,
-        UINT Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY;
-        desc.Shader4ComponentMapping = Shader4ComponentMapping;
-        desc.Texture2DMSArray.ArraySize = ArraySize;
-        desc.Texture2DMSArray.FirstArraySlice = FirstArraySlice;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC Tex3D(
-        DXGI_FORMAT Format,
-        UINT MipLevels = -1,
-        UINT MostDetailedMip = 0,
-        FLOAT ResourceMinLODClamp = 0.0f,
-        UINT Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE3D;
-        desc.Shader4ComponentMapping = Shader4ComponentMapping;
-        desc.Texture3D.MostDetailedMip = MostDetailedMip;
-        desc.Texture3D.MipLevels = MipLevels;
-        desc.Texture3D.ResourceMinLODClamp = ResourceMinLODClamp;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC TexCube(
-        DXGI_FORMAT Format,
-        UINT MipLevels = -1,
-        UINT MostDetailedMip = 0,
-        FLOAT ResourceMinLODClamp = 0.0f,
-        UINT Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURECUBE;
-        desc.Shader4ComponentMapping = Shader4ComponentMapping;
-        desc.TextureCube.MostDetailedMip = MostDetailedMip;
-        desc.TextureCube.MipLevels = MipLevels;
-        desc.TextureCube.ResourceMinLODClamp = ResourceMinLODClamp;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC TexCubeArray(
-        DXGI_FORMAT Format,
-        UINT NumCubes,
-        UINT MipLevels = -1,
-        UINT First2DArrayFace = 0,
-        UINT MostDetailedMip = 0,
-        FLOAT ResourceMinLODClamp = 0.0f,
-        UINT Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURECUBEARRAY;
-        desc.Shader4ComponentMapping = Shader4ComponentMapping;
-        desc.TextureCubeArray.NumCubes = NumCubes;
-        desc.TextureCubeArray.MostDetailedMip = MostDetailedMip;
-        desc.TextureCubeArray.MipLevels = MipLevels;
-        desc.TextureCubeArray.First2DArrayFace = First2DArrayFace;
-        desc.TextureCubeArray.ResourceMinLODClamp = ResourceMinLODClamp;
-        return desc;
-    }
-
-    static inline CD3DX12_SHADER_RESOURCE_VIEW_DESC RaytracingAccelStruct(
-        D3D12_GPU_VIRTUAL_ADDRESS Location) noexcept
-    {
-        CD3DX12_SHADER_RESOURCE_VIEW_DESC desc;
-        desc.Format = DXGI_FORMAT_UNKNOWN;
-        desc.ViewDimension = D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE;
-        desc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
-        desc.RaytracingAccelerationStructure.Location = Location;
-        return desc;
-    }
-};
-
-//------------------------------------------------------------------------------------------------
-struct CD3DX12_UNORDERED_ACCESS_VIEW_DESC : public D3D12_UNORDERED_ACCESS_VIEW_DESC
-{
-    CD3DX12_UNORDERED_ACCESS_VIEW_DESC() = default;
-    explicit CD3DX12_UNORDERED_ACCESS_VIEW_DESC( const D3D12_UNORDERED_ACCESS_VIEW_DESC& o ) noexcept :
-        D3D12_UNORDERED_ACCESS_VIEW_DESC(o)
-    {}
-
-    static inline CD3DX12_UNORDERED_ACCESS_VIEW_DESC StructuredBuffer(
-        UINT NumElements,
-        UINT StructureByteStride,
-        UINT64 FirstElement = 0,
-        UINT64 CounterOffsetInBytes = 0) noexcept
-    {
-        CD3DX12_UNORDERED_ACCESS_VIEW_DESC desc;
-        desc.Format = DXGI_FORMAT_UNKNOWN;
-        desc.ViewDimension = D3D12_UAV_DIMENSION_BUFFER;
-        desc.Buffer.FirstElement = FirstElement;
-        desc.Buffer.NumElements = NumElements;
-        desc.Buffer.StructureByteStride = StructureByteStride;
-        desc.Buffer.Flags = D3D12_BUFFER_UAV_FLAG_NONE;
-        desc.Buffer.CounterOffsetInBytes = CounterOffsetInBytes;
-        return desc;
-    }
-
-    static inline CD3DX12_UNORDERED_ACCESS_VIEW_DESC RawBuffer(
-        UINT NumElements,
-        UINT64 FirstElement = 0,
-        UINT64 CounterOffsetInBytes = 0) noexcept
-    {
-        CD3DX12_UNORDERED_ACCESS_VIEW_DESC desc;
-        desc.Format = DXGI_FORMAT_R32_UINT;
-        desc.ViewDimension = D3D12_UAV_DIMENSION_BUFFER;
-        desc.Buffer.FirstElement = FirstElement;
-        desc.Buffer.NumElements = NumElements;
-        desc.Buffer.StructureByteStride = 0;
-        desc.Buffer.Flags = D3D12_BUFFER_UAV_FLAG_RAW;
-        desc.Buffer.CounterOffsetInBytes = CounterOffsetInBytes;
-        return desc;
-    }
-
-    static inline CD3DX12_UNORDERED_ACCESS_VIEW_DESC TypedBuffer(
-        DXGI_FORMAT Format,
-        UINT NumElements,
-        UINT64 FirstElement = 0,
-        UINT64 CounterOffsetInBytes = 0) noexcept
-    {
-        CD3DX12_UNORDERED_ACCESS_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_UAV_DIMENSION_BUFFER;
-        desc.Buffer.FirstElement = FirstElement;
-        desc.Buffer.NumElements = NumElements;
-        desc.Buffer.StructureByteStride = 0;
-        desc.Buffer.Flags = D3D12_BUFFER_UAV_FLAG_NONE;
-        desc.Buffer.CounterOffsetInBytes = CounterOffsetInBytes;
-        return desc;
-    }
-
-    static inline CD3DX12_UNORDERED_ACCESS_VIEW_DESC Tex1D(
-        DXGI_FORMAT Format,
-        UINT MipSlice = 0) noexcept
-    {
-        CD3DX12_UNORDERED_ACCESS_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_UAV_DIMENSION_TEXTURE1D;
-        desc.Texture1D.MipSlice = MipSlice;
-        return desc;
-    }
-
-    static inline CD3DX12_UNORDERED_ACCESS_VIEW_DESC Tex1DArray(
-        DXGI_FORMAT Format,
-        UINT ArraySize = -1,
-        UINT FirstArraySlice = 0,
-        UINT MipSlice = 0) noexcept
-    {
-        CD3DX12_UNORDERED_ACCESS_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_UAV_DIMENSION_TEXTURE1DARRAY;
-        desc.Texture1DArray.MipSlice = MipSlice;
-        desc.Texture1DArray.FirstArraySlice = FirstArraySlice;
-        desc.Texture1DArray.ArraySize = ArraySize;
-        return desc;
-    }
-
-    static inline CD3DX12_UNORDERED_ACCESS_VIEW_DESC Tex2D(
-        DXGI_FORMAT Format,
-        UINT MipSlice = 0,
-        UINT PlaneSlice = 0) noexcept
-    {
-        CD3DX12_UNORDERED_ACCESS_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_UAV_DIMENSION_TEXTURE2D;
-        desc.Texture2D.MipSlice = MipSlice;
-        desc.Texture2D.PlaneSlice = PlaneSlice;
-        return desc;
-    }
-
-    static inline CD3DX12_UNORDERED_ACCESS_VIEW_DESC Tex2DArray(
-        DXGI_FORMAT Format,
-        UINT ArraySize = -1,
-        UINT FirstArraySlice = 0,
-        UINT MipSlice = 0,
-        UINT PlaneSlice = 0) noexcept
-    {
-        CD3DX12_UNORDERED_ACCESS_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_UAV_DIMENSION_TEXTURE2DARRAY;
-        desc.Texture2DArray.MipSlice = MipSlice;
-        desc.Texture2DArray.FirstArraySlice = FirstArraySlice;
-        desc.Texture2DArray.ArraySize = ArraySize;
-        desc.Texture2DArray.PlaneSlice = PlaneSlice;
-        return desc;
-    }
-
-    static inline CD3DX12_UNORDERED_ACCESS_VIEW_DESC Tex2DMS(
-        DXGI_FORMAT Format) noexcept
-    {
-        CD3DX12_UNORDERED_ACCESS_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_UAV_DIMENSION_TEXTURE2DMS;
-        //desc.Texture2DMS.UnusedField_NothingToDefine = 0;
-        return desc;
-    }
-
-    static inline CD3DX12_UNORDERED_ACCESS_VIEW_DESC Tex2DMSArray(
-        DXGI_FORMAT Format,
-        UINT ArraySize = -1,
-        UINT FirstArraySlice = 0) noexcept
-    {
-        CD3DX12_UNORDERED_ACCESS_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_UAV_DIMENSION_TEXTURE2DMSARRAY;
-        desc.Texture2DMSArray.FirstArraySlice = FirstArraySlice;
-        desc.Texture2DMSArray.ArraySize = ArraySize;
-        return desc;
-    }
-
-    static inline CD3DX12_UNORDERED_ACCESS_VIEW_DESC Tex3D(
-        DXGI_FORMAT Format,
-        UINT WSize = -1,
-        UINT FirstWSlice = 0,
-        UINT MipSlice = 0) noexcept
-    {
-        CD3DX12_UNORDERED_ACCESS_VIEW_DESC desc;
-        desc.Format = Format;
-        desc.ViewDimension = D3D12_UAV_DIMENSION_TEXTURE3D;
-        desc.Texture3D.MipSlice = MipSlice;
-        desc.Texture3D.FirstWSlice = FirstWSlice;
-        desc.Texture3D.WSize = WSize;
-        return desc;
-    }
-};
-
 //------------------------------------------------------------------------------------------------
 struct CD3DX12_VIEW_INSTANCING_DESC : public D3D12_VIEW_INSTANCING_DESC
 {
diff --git a/third_party/microsoft_dxheaders/src/include/directx/d3dx12_resource_helpers.h b/third_party/microsoft_dxheaders/src/include/directx/d3dx12_resource_helpers.h
index 490c056..d792d9c 100644
--- a/third_party/microsoft_dxheaders/src/include/directx/d3dx12_resource_helpers.h
+++ b/third_party/microsoft_dxheaders/src/include/directx/d3dx12_resource_helpers.h
@@ -429,12 +429,6 @@ inline bool D3DX12GetCopyableFootprints(
     // Check if its a valid format
     D3DX12_ASSERT(D3D12_PROPERTY_LAYOUT_FORMAT_TABLE::FormatExists(Format));
 
-    // D3DX12GetCopyableFootprints does not support buffers with width larger than UINT_MAX.
-    if (ResourceDesc.Dimension == D3D12_RESOURCE_DIMENSION_BUFFER && ResourceDesc.Width >= UINT_MAX)
-    {
-        return false;
-    }
-
     const UINT WidthAlignment = D3D12_PROPERTY_LAYOUT_FORMAT_TABLE::GetWidthAlignment( Format );
     const UINT HeightAlignment = D3D12_PROPERTY_LAYOUT_FORMAT_TABLE::GetHeightAlignment( Format );
     const UINT16 DepthAlignment = UINT16( D3D12_PROPERTY_LAYOUT_FORMAT_TABLE::GetDepthAlignment( Format ) );
diff --git a/third_party/microsoft_dxheaders/src/include/directx/d3dx12_state_object.h b/third_party/microsoft_dxheaders/src/include/directx/d3dx12_state_object.h
index 7f31963..b460c76 100644
--- a/third_party/microsoft_dxheaders/src/include/directx/d3dx12_state_object.h
+++ b/third_party/microsoft_dxheaders/src/include/directx/d3dx12_state_object.h
@@ -65,6 +65,12 @@ public:
     CD3DX12_STATE_OBJECT_DESC& operator=(CD3DX12_STATE_OBJECT_DESC&& other) = default;
     operator const D3D12_STATE_OBJECT_DESC& ()
     {
+        // Do final preparation work
+        for (auto& ownedSubobject : m_OwnedSubobjectHelpers)
+        {
+            ownedSubobject->Finalize();
+        }
+
 #if defined(D3D12_SDK_VERSION) && (D3D12_SDK_VERSION >= 612)
         m_RepointedSubobjectVectors.clear();
         m_RepointedPrograms.clear();
@@ -164,14 +170,6 @@ public:
         return pSubobject;
     }
 
-    template<typename T, typename U>
-    T* CreateSubobject(U&& arg)
-    {
-        T* pSubobject = new T(std::forward<U>(arg), *this);
-        m_OwnedSubobjectHelpers.emplace_back(pSubobject);
-        return pSubobject;
-    }
-
 private:
     D3D12_STATE_SUBOBJECT* TrackSubobject(D3D12_STATE_SUBOBJECT_TYPE Type, void* pDesc)
     {
@@ -261,6 +259,7 @@ public:
         {
             m_pSubobject = ContainingStateObject.TrackSubobject(Type(), Data());
         }
+        virtual void Finalize() {};
         operator const D3D12_STATE_SUBOBJECT& () const noexcept { return *m_pSubobject; }
     protected:
         virtual void* Data() noexcept = 0;
@@ -304,7 +303,6 @@ private:
     friend class CD3DX12_DEPTH_STENCIL1_SUBOBJECT;
     friend class CD3DX12_SAMPLE_MASK_SUBOBJECT;
     friend class CD3DX12_NODE_OUTPUT_OVERRIDES;
-    friend class CD3DX12_NODE_HELPER_BASE;
     friend class CD3DX12_SHADER_NODE;
     friend class CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES;
     friend class CD3DX12_COALESCING_LAUNCH_NODE_OVERRIDES;
@@ -644,23 +642,10 @@ class CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT
 {
 public:
     CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT() noexcept
-        : m_Desc({})
     {
         Init();
     }
     CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc({})
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT(const D3D12_RAYTRACING_SHADER_CONFIG &desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_RAYTRACING_SHADER_CONFIG_SUBOBJECT(const D3D12_RAYTRACING_SHADER_CONFIG &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -679,11 +664,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG;
     }
     operator const D3D12_RAYTRACING_SHADER_CONFIG&() const noexcept { return m_Desc; }
-    operator D3D12_RAYTRACING_SHADER_CONFIG&() noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = {};
     }
     void* Data() noexcept override { return &m_Desc; }
     D3D12_RAYTRACING_SHADER_CONFIG m_Desc;
@@ -695,23 +680,10 @@ class CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT
 {
 public:
     CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT() noexcept
-        : m_Desc({})
     {
         Init();
     }
     CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc({})
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT(const D3D12_RAYTRACING_PIPELINE_CONFIG &desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_RAYTRACING_PIPELINE_CONFIG_SUBOBJECT(const D3D12_RAYTRACING_PIPELINE_CONFIG &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -729,11 +701,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG;
     }
     operator const D3D12_RAYTRACING_PIPELINE_CONFIG&() const noexcept { return m_Desc; }
-    operator D3D12_RAYTRACING_PIPELINE_CONFIG&() noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = {};
     }
     void* Data() noexcept override { return &m_Desc; }
     D3D12_RAYTRACING_PIPELINE_CONFIG m_Desc;
@@ -745,23 +717,10 @@ class CD3DX12_RAYTRACING_PIPELINE_CONFIG1_SUBOBJECT
 {
 public:
     CD3DX12_RAYTRACING_PIPELINE_CONFIG1_SUBOBJECT() noexcept
-        : m_Desc({})
     {
         Init();
     }
     CD3DX12_RAYTRACING_PIPELINE_CONFIG1_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc({})
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_RAYTRACING_PIPELINE_CONFIG1_SUBOBJECT(const D3D12_RAYTRACING_PIPELINE_CONFIG1 &desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_RAYTRACING_PIPELINE_CONFIG1_SUBOBJECT(const D3D12_RAYTRACING_PIPELINE_CONFIG1 &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -780,11 +739,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1;
     }
     operator const D3D12_RAYTRACING_PIPELINE_CONFIG1&() const noexcept { return m_Desc; }
-    operator D3D12_RAYTRACING_PIPELINE_CONFIG1&() noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = {};
     }
     void* Data() noexcept override { return &m_Desc; }
     D3D12_RAYTRACING_PIPELINE_CONFIG1 m_Desc;
@@ -870,23 +829,10 @@ class CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT
 {
 public:
     CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT() noexcept
-        : m_Desc({})
     {
         Init();
     }
     CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc({})
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT(const D3D12_STATE_OBJECT_CONFIG &desc) noexcept
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_STATE_OBJECT_CONFIG_SUBOBJECT(const D3D12_STATE_OBJECT_CONFIG &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -904,11 +850,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG;
     }
     operator const D3D12_STATE_OBJECT_CONFIG&() const noexcept { return m_Desc; }
-    operator D3D12_STATE_OBJECT_CONFIG&() noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = {};
     }
     void* Data() noexcept override { return &m_Desc; }
     D3D12_STATE_OBJECT_CONFIG m_Desc;
@@ -920,23 +866,10 @@ class CD3DX12_NODE_MASK_SUBOBJECT
 {
 public:
     CD3DX12_NODE_MASK_SUBOBJECT() noexcept
-        : m_Desc({})
     {
         Init();
     }
     CD3DX12_NODE_MASK_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc({})
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_NODE_MASK_SUBOBJECT(const D3D12_NODE_MASK &desc) noexcept
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_NODE_MASK_SUBOBJECT(const D3D12_NODE_MASK &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -954,11 +887,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK;
     }
     operator const D3D12_NODE_MASK&() const noexcept { return m_Desc; }
-    operator D3D12_NODE_MASK&() noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = {};
     }
     void* Data() noexcept override { return &m_Desc; }
     D3D12_NODE_MASK m_Desc;
@@ -979,20 +912,6 @@ public:
         Init();
         AddToStateObject(ContainingStateObject);
     }
-    void AddSODeclEntry(const D3D12_SO_DECLARATION_ENTRY &entry)
-    {
-        m_soDecalEntries.emplace_back(D3D12_SO_DECLARATION_ENTRY{
-            entry.Stream,
-            m_Strings.LocalCopy(entry.SemanticName),
-            entry.SemanticIndex,
-            entry.StartComponent,
-            entry.ComponentCount,
-            entry.OutputSlot
-        });
-        m_Desc.NumEntries++;
-        // Below: using ugly way to get pointer in case .data() is not defined
-        m_Desc.pSODeclaration = &m_soDecalEntries[0];
-    }
     void SetSODeclEntries(const D3D12_SO_DECLARATION_ENTRY* soDeclEntries, UINT numEntries)
     {
         m_soDecalEntries.resize(numEntries);
@@ -1007,20 +926,13 @@ public:
                 soDeclEntries[i].OutputSlot
             };
         }
-        m_Desc.NumEntries = numEntries;
         // Below: using ugly way to get pointer in case .data() is not defined
-        if (numEntries > 0)
-        {
-            m_Desc.pSODeclaration = &m_soDecalEntries[0];
-        }
+        m_Desc.pSODeclaration = &m_soDecalEntries[0];
+        m_Desc.NumEntries = numEntries;
     }
     void SetBufferStrides(const UINT* bufferStrides, UINT numStrides)
     {
-        for (UINT i = 0; i < numStrides; ++i)
-        {
-            m_Strides[i] = bufferStrides[i];
-        }
-        m_Desc.pBufferStrides = m_Strides;
+        m_Desc.pBufferStrides = bufferStrides;
         m_Desc.NumStrides = numStrides;
     }
     void SetRasterizedStream(UINT rasterizedStream)
@@ -1043,7 +955,6 @@ private:
     D3D12_STREAM_OUTPUT_DESC m_Desc;
     CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCSTR, std::string> m_Strings;
     std::vector<D3D12_SO_DECLARATION_ENTRY> m_soDecalEntries;
-    UINT m_Strides[D3D12_SO_STREAM_COUNT];
 };
 
 //------------------------------------------------------------------------------------------------
@@ -1052,23 +963,10 @@ class CD3DX12_BLEND_SUBOBJECT
 {
 public:
     CD3DX12_BLEND_SUBOBJECT()
-        : m_Desc(CD3DX12_BLEND_DESC(D3D12_DEFAULT))
     {
         Init();
     }
     CD3DX12_BLEND_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(CD3DX12_BLEND_DESC(D3D12_DEFAULT))
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_BLEND_SUBOBJECT(const D3D12_BLEND_DESC &desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_BLEND_SUBOBJECT(const D3D12_BLEND_DESC &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1099,11 +997,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_BLEND;
     }
     operator const D3D12_BLEND_DESC& () const noexcept { return m_Desc; }
-    operator D3D12_BLEND_DESC& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = CD3DX12_BLEND_DESC(D3D12_DEFAULT);
     }
     void* Data() noexcept override { return &m_Desc; }
     CD3DX12_BLEND_DESC m_Desc;
@@ -1115,23 +1013,10 @@ class CD3DX12_RASTERIZER_SUBOBJECT
 {
 public:
     CD3DX12_RASTERIZER_SUBOBJECT()
-        : m_Desc(CD3DX12_RASTERIZER_DESC2(D3D12_DEFAULT))
     {
         Init();
     }
     CD3DX12_RASTERIZER_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(CD3DX12_RASTERIZER_DESC2(D3D12_DEFAULT))
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_RASTERIZER_SUBOBJECT(const D3D12_RASTERIZER_DESC2 &desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_RASTERIZER_SUBOBJECT(const D3D12_RASTERIZER_DESC2 &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1181,11 +1066,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_RASTERIZER;
     }
     operator const D3D12_RASTERIZER_DESC2& () const noexcept { return m_Desc; }
-    operator D3D12_RASTERIZER_DESC2& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = CD3DX12_RASTERIZER_DESC2(D3D12_DEFAULT);
     }
     void* Data() noexcept override { return &m_Desc; }
     CD3DX12_RASTERIZER_DESC2 m_Desc;
@@ -1197,23 +1082,10 @@ class CD3DX12_DEPTH_STENCIL2_SUBOBJECT
 {
 public:
     CD3DX12_DEPTH_STENCIL2_SUBOBJECT()
-        : m_Desc(CD3DX12_DEPTH_STENCIL_DESC2(D3D12_DEFAULT))
     {
         Init();
     }
     CD3DX12_DEPTH_STENCIL2_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(CD3DX12_DEPTH_STENCIL_DESC2(D3D12_DEFAULT))
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_DEPTH_STENCIL2_SUBOBJECT(const D3D12_DEPTH_STENCIL_DESC2 &desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_DEPTH_STENCIL2_SUBOBJECT(const D3D12_DEPTH_STENCIL_DESC2 &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1265,11 +1137,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL2;
     }
     operator const D3D12_DEPTH_STENCIL_DESC2& () const noexcept { return m_Desc; }
-    operator D3D12_DEPTH_STENCIL_DESC2& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = CD3DX12_DEPTH_STENCIL_DESC2(D3D12_DEFAULT);
     }
     void* Data() noexcept override { return &m_Desc; }
     CD3DX12_DEPTH_STENCIL_DESC2 m_Desc;
@@ -1301,25 +1173,43 @@ public:
                 inputLayoutElementDesc.InputSlotClass,
                 inputLayoutElementDesc.InstanceDataStepRate
             });
-        ++m_Desc.NumElements;
-        // Below: using ugly way to get pointer in case .data() is not defined
-        m_Desc.pInputElementDescs = &m_inputLayoutElements[0];
+        ++m_numElements;
     }
     D3D12_STATE_SUBOBJECT_TYPE Type() const noexcept override
     {
         return D3D12_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT;
     }
     operator const D3D12_INPUT_LAYOUT_DESC& () const noexcept { return m_Desc; }
+    virtual void Finalize() override
+    {
+        if (m_numElements > 0)
+        {
+            std::list<D3D12_INPUT_ELEMENT_DESC>::iterator inputLayoutIt = m_inputLayoutElements.begin();
+            m_inputLayoutElementsVector.resize(m_numElements);
+            for (UINT i = 0; inputLayoutIt != m_inputLayoutElements.end(); i++, inputLayoutIt++)
+            {
+                m_inputLayoutElementsVector[i] = *inputLayoutIt;
+            }
+            // Below: using ugly way to get pointer in case .data() is not defined
+            m_Desc.pInputElementDescs = &m_inputLayoutElementsVector[0];
+        }
+        m_Desc.NumElements = m_numElements;
+    }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
         m_Desc = {};
+        m_Desc.pInputElementDescs = nullptr;
+        m_numElements = 0;
         m_inputLayoutElements.clear();
+        m_inputLayoutElementsVector.clear();
     }
     void* Data() noexcept override { return &m_Desc; }
     D3D12_INPUT_LAYOUT_DESC m_Desc;
-    std::vector<D3D12_INPUT_ELEMENT_DESC> m_inputLayoutElements;
+    std::list<D3D12_INPUT_ELEMENT_DESC> m_inputLayoutElements;
+    std::vector<D3D12_INPUT_ELEMENT_DESC> m_inputLayoutElementsVector;
+    UINT m_numElements;
     CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCSTR, std::string> m_Strings;
 };
 
@@ -1329,23 +1219,10 @@ class CD3DX12_IB_STRIP_CUT_VALUE_SUBOBJECT
 {
 public:
     CD3DX12_IB_STRIP_CUT_VALUE_SUBOBJECT()
-        : m_Desc(D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED)
     {
         Init();
     }
     CD3DX12_IB_STRIP_CUT_VALUE_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED)
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_IB_STRIP_CUT_VALUE_SUBOBJECT(D3D12_INDEX_BUFFER_STRIP_CUT_VALUE desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_IB_STRIP_CUT_VALUE_SUBOBJECT(D3D12_INDEX_BUFFER_STRIP_CUT_VALUE desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1359,7 +1236,6 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE;
     }
     operator const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE& () const noexcept { return m_Desc; }
-    operator D3D12_INDEX_BUFFER_STRIP_CUT_VALUE& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
@@ -1375,23 +1251,10 @@ class CD3DX12_PRIMITIVE_TOPOLOGY_SUBOBJECT
 {
 public:
     CD3DX12_PRIMITIVE_TOPOLOGY_SUBOBJECT()
-        : m_Desc(D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED)
     {
         Init();
     }
     CD3DX12_PRIMITIVE_TOPOLOGY_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED)
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_PRIMITIVE_TOPOLOGY_SUBOBJECT(D3D12_PRIMITIVE_TOPOLOGY_TYPE desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_PRIMITIVE_TOPOLOGY_SUBOBJECT(D3D12_PRIMITIVE_TOPOLOGY_TYPE desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1405,7 +1268,6 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY;
     }
     operator const D3D12_PRIMITIVE_TOPOLOGY_TYPE& () const noexcept { return m_Desc; }
-    operator D3D12_PRIMITIVE_TOPOLOGY_TYPE& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
@@ -1421,23 +1283,10 @@ class CD3DX12_RENDER_TARGET_FORMATS_SUBOBJECT
 {
 public:
     CD3DX12_RENDER_TARGET_FORMATS_SUBOBJECT()
-        : m_Desc({})
     {
         Init();
     }
     CD3DX12_RENDER_TARGET_FORMATS_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc({})
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_RENDER_TARGET_FORMATS_SUBOBJECT(const D3D12_RT_FORMAT_ARRAY &desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_RENDER_TARGET_FORMATS_SUBOBJECT(const D3D12_RT_FORMAT_ARRAY &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1455,11 +1304,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS;
     }
     operator const D3D12_RT_FORMAT_ARRAY& () const noexcept { return m_Desc; }
-    operator D3D12_RT_FORMAT_ARRAY& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = {};
     }
     void* Data() noexcept override { return &m_Desc; }
     D3D12_RT_FORMAT_ARRAY m_Desc;
@@ -1471,23 +1320,10 @@ class CD3DX12_DEPTH_STENCIL_FORMAT_SUBOBJECT
 {
 public:
     CD3DX12_DEPTH_STENCIL_FORMAT_SUBOBJECT()
-        : m_Desc(DXGI_FORMAT_UNKNOWN)
     {
         Init();
     }
     CD3DX12_DEPTH_STENCIL_FORMAT_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(DXGI_FORMAT_UNKNOWN)
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_DEPTH_STENCIL_FORMAT_SUBOBJECT(DXGI_FORMAT desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_DEPTH_STENCIL_FORMAT_SUBOBJECT(DXGI_FORMAT desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1501,7 +1337,6 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT;
     }
     operator const DXGI_FORMAT& () const noexcept { return m_Desc; }
-    operator DXGI_FORMAT& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
@@ -1517,23 +1352,10 @@ class CD3DX12_SAMPLE_DESC_SUBOBJECT
 {
 public:
     CD3DX12_SAMPLE_DESC_SUBOBJECT()
-        : m_Desc({1, 0})
     {
         Init();
     }
     CD3DX12_SAMPLE_DESC_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc({1, 0})
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_SAMPLE_DESC_SUBOBJECT(const DXGI_SAMPLE_DESC &desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_SAMPLE_DESC_SUBOBJECT(const DXGI_SAMPLE_DESC &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1551,7 +1373,6 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_SAMPLE_DESC;
     }
     operator const DXGI_SAMPLE_DESC& () const noexcept { return m_Desc; }
-    operator DXGI_SAMPLE_DESC& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
@@ -1568,23 +1389,10 @@ class CD3DX12_FLAGS_SUBOBJECT
 {
 public:
     CD3DX12_FLAGS_SUBOBJECT()
-        : m_Desc(D3D12_PIPELINE_STATE_FLAG_NONE)
     {
         Init();
     }
     CD3DX12_FLAGS_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(D3D12_PIPELINE_STATE_FLAG_NONE)
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_FLAGS_SUBOBJECT(D3D12_PIPELINE_STATE_FLAGS desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_FLAGS_SUBOBJECT(D3D12_PIPELINE_STATE_FLAGS desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1598,11 +1406,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_FLAGS;
     }
     operator const D3D12_PIPELINE_STATE_FLAGS& () const noexcept { return m_Desc; }
-    operator D3D12_PIPELINE_STATE_FLAGS& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = {};
     }
     void* Data() noexcept override { return &m_Desc; }
     D3D12_PIPELINE_STATE_FLAGS m_Desc;
@@ -1624,7 +1432,7 @@ public:
     }
     void AddViewInstanceLocation(D3D12_VIEW_INSTANCE_LOCATION viewInstanceLocation)
     {
-        m_Desc.ViewInstanceCount++;
+        m_viewInstanceCount++;
         m_viewInstanceLocations.emplace_back(
             D3D12_VIEW_INSTANCE_LOCATION
             {
@@ -1632,8 +1440,6 @@ public:
                 viewInstanceLocation.RenderTargetArrayIndex
             }
         );
-        // Below: using ugly way to get pointer in case .data() is not defined
-        m_Desc.pViewInstanceLocations = &m_viewInstanceLocations[0];
     }
     void SetFlags(D3D12_VIEW_INSTANCING_FLAGS flags)
     {
@@ -1644,16 +1450,35 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING;
     }
     operator const D3D12_VIEW_INSTANCING_DESC& () const noexcept { return m_Desc; }
+    virtual void Finalize() override
+    {
+        if (m_viewInstanceCount > 0)
+        {
+            m_viewInstanceLocationsVector.resize(m_viewInstanceCount);
+            std::list<D3D12_VIEW_INSTANCE_LOCATION>::iterator viewInstancingLocationIt = m_viewInstanceLocations.begin();
+            for (UINT i = 0; viewInstancingLocationIt != m_viewInstanceLocations.end(); i++, viewInstancingLocationIt++)
+            {
+                m_viewInstanceLocationsVector[i] = *viewInstancingLocationIt;
+            }
+            // Below: using ugly way to get pointer in case .data() is not defined
+            m_Desc.pViewInstanceLocations = &m_viewInstanceLocationsVector[0];
+        }
+        m_Desc.ViewInstanceCount = m_viewInstanceCount;
+    }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
         m_Desc = CD3DX12_VIEW_INSTANCING_DESC(D3D12_DEFAULT);
+        m_viewInstanceCount = 0;
         m_viewInstanceLocations.clear();
+        m_viewInstanceLocationsVector.clear();
     }
     void* Data() noexcept override { return &m_Desc; }
     CD3DX12_VIEW_INSTANCING_DESC m_Desc;
-    std::vector<D3D12_VIEW_INSTANCE_LOCATION> m_viewInstanceLocations;
+    UINT m_viewInstanceCount;
+    std::list<D3D12_VIEW_INSTANCE_LOCATION> m_viewInstanceLocations;
+    std::vector<D3D12_VIEW_INSTANCE_LOCATION> m_viewInstanceLocationsVector;
 };
 
 //------------------------------------------------------------------------------------------------
@@ -1662,23 +1487,10 @@ class CD3DX12_DEPTH_STENCIL_SUBOBJECT
 {
 public:
     CD3DX12_DEPTH_STENCIL_SUBOBJECT()
-        : m_Desc(CD3DX12_DEPTH_STENCIL_DESC(D3D12_DEFAULT))
     {
         Init();
     }
     CD3DX12_DEPTH_STENCIL_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(CD3DX12_DEPTH_STENCIL_DESC(D3D12_DEFAULT))
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_DEPTH_STENCIL_SUBOBJECT(const D3D12_DEPTH_STENCIL_DESC &desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_DEPTH_STENCIL_SUBOBJECT(const D3D12_DEPTH_STENCIL_DESC &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1730,11 +1542,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL;
     }
     operator const D3D12_DEPTH_STENCIL_DESC& () const noexcept { return m_Desc; }
-    operator D3D12_DEPTH_STENCIL_DESC& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = CD3DX12_DEPTH_STENCIL_DESC(D3D12_DEFAULT);
     }
     void* Data() noexcept override { return &m_Desc; }
     CD3DX12_DEPTH_STENCIL_DESC m_Desc;
@@ -1746,23 +1558,10 @@ class CD3DX12_DEPTH_STENCIL1_SUBOBJECT
 {
 public:
     CD3DX12_DEPTH_STENCIL1_SUBOBJECT()
-        : m_Desc(CD3DX12_DEPTH_STENCIL_DESC1(D3D12_DEFAULT))
     {
         Init();
     }
     CD3DX12_DEPTH_STENCIL1_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(CD3DX12_DEPTH_STENCIL_DESC1(D3D12_DEFAULT))
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_DEPTH_STENCIL1_SUBOBJECT(const D3D12_DEPTH_STENCIL_DESC1 &desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_DEPTH_STENCIL1_SUBOBJECT(const D3D12_DEPTH_STENCIL_DESC1 &desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1818,11 +1617,11 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1;
     }
     operator const D3D12_DEPTH_STENCIL_DESC1& () const noexcept { return m_Desc; }
-    operator D3D12_DEPTH_STENCIL_DESC1& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
+        m_Desc = CD3DX12_DEPTH_STENCIL_DESC1(D3D12_DEFAULT);
     }
     void* Data() noexcept override { return &m_Desc; }
     CD3DX12_DEPTH_STENCIL_DESC1 m_Desc;
@@ -1834,23 +1633,10 @@ class CD3DX12_SAMPLE_MASK_SUBOBJECT
 {
 public:
     CD3DX12_SAMPLE_MASK_SUBOBJECT()
-        : m_Desc(0xffffffffu)
     {
         Init();
     }
     CD3DX12_SAMPLE_MASK_SUBOBJECT(CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(0xffffffffu)
-    {
-        Init();
-        AddToStateObject(ContainingStateObject);
-    }
-    CD3DX12_SAMPLE_MASK_SUBOBJECT(UINT desc)
-        : m_Desc(desc)
-    {
-        Init();
-    }
-    CD3DX12_SAMPLE_MASK_SUBOBJECT(UINT desc, CD3DX12_STATE_OBJECT_DESC& ContainingStateObject)
-        : m_Desc(desc)
     {
         Init();
         AddToStateObject(ContainingStateObject);
@@ -1864,7 +1650,6 @@ public:
         return D3D12_STATE_SUBOBJECT_TYPE_SAMPLE_MASK;
     }
     operator const UINT& () const noexcept { return m_Desc; }
-    operator UINT& () noexcept { return m_Desc; }
 private:
     void Init() noexcept
     {
@@ -1895,32 +1680,72 @@ public:
     void AddExport(LPCWSTR exportName)
     {
         m_Exports.emplace_back(m_Strings.LocalCopy(exportName));
-        m_Desc.NumExports++;
-        // Below: using ugly way to get pointer in case .data() is not defined
-        m_Desc.pExports = &m_Exports[0];
+        m_numExports++;
     }
     void AddSubobject(const D3D12_STATE_SUBOBJECT& subobject)
     {
         m_Subobjects.emplace_back(&subobject);
-        m_Desc.NumSubobjects++;
-        // Below: using ugly way to get pointer in case .data() is not defined
-        m_Desc.ppSubobjects = &m_Subobjects[0];
+        m_numSubobjects++;
     }
     D3D12_STATE_SUBOBJECT_TYPE Type() const noexcept override
     {
         return D3D12_STATE_SUBOBJECT_TYPE_GENERIC_PROGRAM;
     }
     operator const D3D12_GENERIC_PROGRAM_DESC& () const noexcept { return m_Desc; }
+    virtual void Finalize() override
+    {
+        // Set exports
+        if (m_numExports > 0)
+        {
+            m_ExportsVector.resize(m_numExports);
+            std::list<LPCWSTR>::iterator exportIt = m_Exports.begin();
+            for (UINT i = 0; exportIt != m_Exports.end(); i++, exportIt++)
+            {
+                m_ExportsVector[i] = *exportIt;
+            }
+            // Below: using ugly way to get pointer in case .data() is not defined
+            m_Desc.pExports = &m_ExportsVector[0];
+        }
+        else
+        {
+            m_Desc.pExports = nullptr;
+        }
+        m_Desc.NumExports = m_numExports;
+
+        // Set subobjects
+        if (m_numSubobjects > 0)
+        {
+            m_SubobjectsVector.resize(m_numSubobjects);
+            std::list<D3D12_STATE_SUBOBJECT const*>::iterator subobjectIt = m_Subobjects.begin();
+            for (UINT i = 0; subobjectIt != m_Subobjects.end(); i++, subobjectIt++)
+            {
+                m_SubobjectsVector[i] = *subobjectIt;
+            }
+            // Below: using ugly way to get pointer in case .data() is not defined
+            m_Desc.ppSubobjects = &m_SubobjectsVector[0];
+        }
+        else
+        {
+            m_Desc.ppSubobjects = nullptr;
+        }
+        m_Desc.NumSubobjects = m_numSubobjects;
+    }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
         m_Desc = {};
+        m_numExports = 0;
+        m_numSubobjects = 0;
     }
     void* Data() noexcept override { return &m_Desc; }
     D3D12_GENERIC_PROGRAM_DESC m_Desc;
-    std::vector<LPCWSTR> m_Exports;
-    std::vector<D3D12_STATE_SUBOBJECT const*> m_Subobjects;
+    std::list<LPCWSTR> m_Exports;
+    std::vector<LPCWSTR> m_ExportsVector;
+    UINT m_numExports;
+    std::list<D3D12_STATE_SUBOBJECT const*> m_Subobjects;
+    std::vector<D3D12_STATE_SUBOBJECT const*> m_SubobjectsVector;
+    UINT m_numSubobjects;
     CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCWSTR, std::wstring> m_Strings;
 };
 
@@ -1976,28 +1801,11 @@ private:
     UINT* m_pNumOutputOverrides;
 };
 
-//------------------------------------------------------------------------------------------------
-class CD3DX12_WORK_GRAPH_SUBOBJECT;
-
 //------------------------------------------------------------------------------------------------
 class CD3DX12_NODE_HELPER_BASE
 {
-protected:
-    struct Backreference
-    {
-        CD3DX12_WORK_GRAPH_SUBOBJECT *m_pGraph;
-        UINT m_NodeIndex;
-    };
 public:
-    CD3DX12_NODE_HELPER_BASE(const Backreference &BackRef)
-        : m_BackRef(BackRef)
-    {
-    }
     virtual ~CD3DX12_NODE_HELPER_BASE() = default;
-protected:
-    D3D12_NODE *GetNode() const;
-    const Backreference m_BackRef;
-    CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCWSTR, std::wstring> m_Strings;
 };
 
 //------------------------------------------------------------------------------------------------
@@ -2007,18 +1815,20 @@ class CD3DX12_SHADER_NODE // Not specifying launch mode.
 {
 public:
     CD3DX12_SHADER_NODE(
-        const Backreference &BackRef,
+        D3D12_NODE* pNode,
         LPCWSTR _Shader = nullptr)
-            : CD3DX12_NODE_HELPER_BASE(BackRef)
     {
-        GetNode()->NodeType = D3D12_NODE_TYPE_SHADER;
+        m_pDesc = pNode;
+        m_pDesc->NodeType = D3D12_NODE_TYPE_SHADER;
         Shader(_Shader);
     }
     void Shader(LPCWSTR _Shader)
     {
-        GetNode()->Shader.Shader = m_Strings.LocalCopy(_Shader);
+        m_pDesc->Shader.Shader = m_Strings.LocalCopy(_Shader);
     }
-    LPCWSTR GetShaderName() const { return GetNode()->Shader.Shader; }
+    D3D12_NODE* m_pDesc;
+private:
+    CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCWSTR, std::wstring> m_Strings;
 };
 
 //------------------------------------------------------------------------------------------------
@@ -2029,23 +1839,21 @@ class CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES
 {
 public:
     CD3DX12_BROADCASTING_LAUNCH_NODE_OVERRIDES(
-        const Backreference &BackRef,
+        D3D12_NODE* pNode,
         LPCWSTR _Shader = nullptr) :
-            CD3DX12_NODE_HELPER_BASE(BackRef),
-            m_NodeOutputOverrides(&Overrides.pOutputOverrides, &Overrides.NumOutputOverrides)
+        m_NodeOutputOverrides(&Overrides.pOutputOverrides, &Overrides.NumOutputOverrides)
     {
         Overrides = {};
-        D3D12_NODE *pNode = GetNode();
-        pNode->NodeType = D3D12_NODE_TYPE_SHADER;
-        pNode->Shader.OverridesType = D3D12_NODE_OVERRIDES_TYPE_BROADCASTING_LAUNCH;
-        pNode->Shader.pBroadcastingLaunchOverrides = &Overrides;
+        m_pDesc = pNode;
+        m_pDesc->NodeType = D3D12_NODE_TYPE_SHADER;
+        m_pDesc->Shader.OverridesType = D3D12_NODE_OVERRIDES_TYPE_BROADCASTING_LAUNCH;
+        m_pDesc->Shader.pBroadcastingLaunchOverrides = &Overrides;
         Shader(_Shader);
     }
     void Shader(LPCWSTR _Shader)
     {
-        GetNode()->Shader.Shader = m_Strings.LocalCopy(_Shader);
+        m_pDesc->Shader.Shader = m_Strings.LocalCopy(_Shader);
     }
-    LPCWSTR GetShaderName() const { return GetNode()->Shader.Shader; }
     void LocalRootArgumentsTableIndex(UINT index)
     {
         m_UINTs.emplace_front(index);
@@ -2081,8 +1889,10 @@ public:
         return m_NodeOutputOverrides;
     }
     D3D12_BROADCASTING_LAUNCH_OVERRIDES Overrides;
+    D3D12_NODE* m_pDesc;
 private:
     // Cached parameters
+    CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCWSTR, std::wstring> m_Strings;
     std::forward_list<UINT> m_UINTs;
     struct UINT3
     {
@@ -2103,23 +1913,21 @@ class CD3DX12_COALESCING_LAUNCH_NODE_OVERRIDES
 {
 public:
     CD3DX12_COALESCING_LAUNCH_NODE_OVERRIDES(
-        const Backreference &BackRef,
+        D3D12_NODE* pNode,
         LPCWSTR _Shader = nullptr) :
-            CD3DX12_NODE_HELPER_BASE(BackRef),
-            m_NodeOutputOverrides(&Overrides.pOutputOverrides, &Overrides.NumOutputOverrides)
+        m_NodeOutputOverrides(&Overrides.pOutputOverrides, &Overrides.NumOutputOverrides)
     {
         Overrides = {};
-        D3D12_NODE *pNode = GetNode();
-        pNode->NodeType = D3D12_NODE_TYPE_SHADER;
-        pNode->Shader.OverridesType = D3D12_NODE_OVERRIDES_TYPE_COALESCING_LAUNCH;
-        pNode->Shader.pCoalescingLaunchOverrides = &Overrides;
+        m_pDesc = pNode;
+        m_pDesc->NodeType = D3D12_NODE_TYPE_SHADER;
+        m_pDesc->Shader.OverridesType = D3D12_NODE_OVERRIDES_TYPE_COALESCING_LAUNCH;
+        m_pDesc->Shader.pCoalescingLaunchOverrides = &Overrides;
         Shader(_Shader);
     }
     void Shader(LPCWSTR _Shader)
     {
-        GetNode()->Shader.Shader = m_Strings.LocalCopy(_Shader);
+        m_pDesc->Shader.Shader = m_Strings.LocalCopy(_Shader);
     }
-    LPCWSTR GetShaderName() const { return GetNode()->Shader.Shader; }
     void LocalRootArgumentsTableIndex(UINT index)
     {
         m_UINTs.emplace_front(index);
@@ -2145,8 +1953,10 @@ public:
         return m_NodeOutputOverrides;
     }
     D3D12_COALESCING_LAUNCH_OVERRIDES Overrides;
+    D3D12_NODE* m_pDesc;
 private:
     // Cached parameters
+    CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCWSTR, std::wstring> m_Strings;
     std::forward_list<UINT> m_UINTs;
     struct UINT3
     {
@@ -2167,23 +1977,21 @@ class CD3DX12_THREAD_LAUNCH_NODE_OVERRIDES
 {
 public:
     CD3DX12_THREAD_LAUNCH_NODE_OVERRIDES(
-        const Backreference &BackRef,
+        D3D12_NODE* pNode,
         LPCWSTR _Shader = nullptr) :
-            CD3DX12_NODE_HELPER_BASE(BackRef),
-            m_NodeOutputOverrides(&Overrides.pOutputOverrides, &Overrides.NumOutputOverrides)
+        m_NodeOutputOverrides(&Overrides.pOutputOverrides, &Overrides.NumOutputOverrides)
     {
         Overrides = {};
-        D3D12_NODE *pNode = GetNode();
-        pNode->NodeType = D3D12_NODE_TYPE_SHADER;
-        pNode->Shader.OverridesType = D3D12_NODE_OVERRIDES_TYPE_THREAD_LAUNCH;
-        pNode->Shader.pThreadLaunchOverrides = &Overrides;
+        m_pDesc = pNode;
+        m_pDesc->NodeType = D3D12_NODE_TYPE_SHADER;
+        m_pDesc->Shader.OverridesType = D3D12_NODE_OVERRIDES_TYPE_THREAD_LAUNCH;
+        m_pDesc->Shader.pThreadLaunchOverrides = &Overrides;
         Shader(_Shader);
     }
     void Shader(LPCWSTR _Shader)
     {
-        GetNode()->Shader.Shader = m_Strings.LocalCopy(_Shader);
+        m_pDesc->Shader.Shader = m_Strings.LocalCopy(_Shader);
     }
-    LPCWSTR GetShaderName() const { return GetNode()->Shader.Shader; }
     void LocalRootArgumentsTableIndex(UINT index)
     {
         m_UINTs.emplace_front(index);
@@ -2209,8 +2017,10 @@ public:
         return m_NodeOutputOverrides;
     }
     D3D12_THREAD_LAUNCH_OVERRIDES Overrides;
+    D3D12_NODE* m_pDesc;
 private:
     // Cached parameters
+    CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCWSTR, std::wstring> m_Strings;
     std::forward_list<UINT> m_UINTs;
     std::forward_list<D3D12_NODE_ID> m_NodeIDs;
     CD3DX12_NODE_OUTPUT_OVERRIDES m_NodeOutputOverrides;
@@ -2227,23 +2037,21 @@ class CD3DX12_COMMON_COMPUTE_NODE_OVERRIDES
 {
 public:
     CD3DX12_COMMON_COMPUTE_NODE_OVERRIDES(
-        const Backreference &BackRef,
+        D3D12_NODE* pNode,
         LPCWSTR _Shader = nullptr) :
-            CD3DX12_NODE_HELPER_BASE(BackRef),
-            m_NodeOutputOverrides(&Overrides.pOutputOverrides, &Overrides.NumOutputOverrides)
+        m_NodeOutputOverrides(&Overrides.pOutputOverrides, &Overrides.NumOutputOverrides)
     {
         Overrides = {};
-        D3D12_NODE *pNode = GetNode();
-        pNode->NodeType = D3D12_NODE_TYPE_SHADER;
-        pNode->Shader.OverridesType = D3D12_NODE_OVERRIDES_TYPE_COMMON_COMPUTE;
-        pNode->Shader.pThreadLaunchOverrides = &Overrides;
+        m_pDesc = pNode;
+        m_pDesc->NodeType = D3D12_NODE_TYPE_SHADER;
+        m_pDesc->Shader.OverridesType = D3D12_NODE_OVERRIDES_TYPE_COMMON_COMPUTE;
+        m_pDesc->Shader.pThreadLaunchOverrides = &Overrides;
         Shader(_Shader);
     }
     void Shader(LPCWSTR _Shader)
     {
-        GetNode()->Shader.Shader = m_Strings.LocalCopy(_Shader);
+        m_pDesc->Shader.Shader = m_Strings.LocalCopy(_Shader);
     }
-    LPCWSTR GetShaderName() const { return GetNode()->Shader.Shader; }
     void LocalRootArgumentsTableIndex(UINT index)
     {
         m_UINTs.emplace_front(index);
@@ -2269,8 +2077,10 @@ public:
         return m_NodeOutputOverrides;
     }
     D3D12_THREAD_LAUNCH_OVERRIDES Overrides;
+    D3D12_NODE* m_pDesc;
 private:
     // Cached parameters
+    CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCWSTR, std::wstring> m_Strings;
     std::forward_list<UINT> m_UINTs;
     std::forward_list<D3D12_NODE_ID> m_NodeIDs;
     CD3DX12_NODE_OUTPUT_OVERRIDES m_NodeOutputOverrides;
@@ -2305,17 +2115,15 @@ public:
     void AddEntrypoint(D3D12_NODE_ID Entrypoint)
     {
         m_Entrypoints.emplace_back(D3D12_NODE_ID{ m_Strings.LocalCopy(Entrypoint.Name),Entrypoint.ArrayIndex });
-        m_Desc.NumEntrypoints++;
-        m_Desc.pEntrypoints = m_Entrypoints.data();
+        m_NumEntrypoints++;
     }
 
     template<typename T>
     T* CreateNode()
     {
         m_NodeDescs.push_back({});
-        m_Desc.NumExplicitlyDefinedNodes++;
-        m_Desc.pExplicitlyDefinedNodes = m_NodeDescs.data();
-        T* pNodeHelper = new T({this, (UINT)m_NodeDescs.size() - 1});
+        m_NumNodes++;
+        T* pNodeHelper = new T(&m_NodeDescs.back());
         m_OwnedNodeHelpers.emplace_back(pNodeHelper);
         return pNodeHelper;
     }
@@ -2353,27 +2161,47 @@ public:
     {
         return m_Desc;
     }
+    virtual void Finalize() override
+    {
+        m_EntrypointsVector.resize(m_NumEntrypoints);
+        std::list<D3D12_NODE_ID>::iterator entryIt = m_Entrypoints.begin();
+        for (UINT n = 0; n < m_NumEntrypoints; n++, entryIt++)
+        {
+            m_EntrypointsVector[n] = *entryIt;
+        }
+        m_Desc.NumEntrypoints = m_NumEntrypoints;
+        m_Desc.pEntrypoints = m_EntrypointsVector.data();
+
+        m_NodeDescsVector.resize(m_NumNodes);
+        std::list<D3D12_NODE>::iterator nodeIt = m_NodeDescs.begin();
+        for (UINT n = 0; n < m_NumNodes; n++, nodeIt++)
+        {
+            m_NodeDescsVector[n] = *nodeIt;
+        }
+        m_Desc.NumExplicitlyDefinedNodes = m_NumNodes;
+        m_Desc.pExplicitlyDefinedNodes = m_NodeDescsVector.data();
+    }
 private:
     void Init() noexcept
     {
         SUBOBJECT_HELPER_BASE::Init();
         m_Desc = {};
-        m_Entrypoints.clear();
         m_NodeDescs.clear();
+        m_NodeDescsVector.clear();
+        m_NumNodes = 0;
+        m_NumEntrypoints = 0;
     }
     void* Data() noexcept override { return &m_Desc; }
     D3D12_WORK_GRAPH_DESC m_Desc;
-    std::vector<D3D12_NODE_ID> m_Entrypoints;
-    std::vector<D3D12_NODE> m_NodeDescs;
+    std::list<D3D12_NODE_ID> m_Entrypoints;
+    UINT m_NumEntrypoints;
+    std::vector<D3D12_NODE_ID> m_EntrypointsVector;
+    std::list<D3D12_NODE> m_NodeDescs;
+    UINT m_NumNodes;
+    std::vector<D3D12_NODE> m_NodeDescsVector;
     CD3DX12_STATE_OBJECT_DESC::StringContainer<LPCWSTR, std::wstring> m_Strings;
-    std::vector<std::unique_ptr<const CD3DX12_NODE_HELPER_BASE>> m_OwnedNodeHelpers;
-    friend class CD3DX12_NODE_HELPER_BASE;
+    std::list<std::unique_ptr<const CD3DX12_NODE_HELPER_BASE>> m_OwnedNodeHelpers;
 };
-
-inline D3D12_NODE * CD3DX12_NODE_HELPER_BASE::GetNode() const
-{
-    return &m_BackRef.m_pGraph->m_NodeDescs[m_BackRef.m_NodeIndex];
-}
 #endif // D3D12_SDK_VERSION >= 612
 
 #undef D3DX12_COM_PTR
