diff --git a/base/BUILD.gn b/base/BUILD.gn
index fc02f110a93f2..68fb2e8d5ef62 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -4298,7 +4298,6 @@ if (enable_nocompile_tests) {
       "traits_bag_nocompile.nc",
       "types/expected_macros_nocompile.nc",
       "types/optional_util_nocompile.nc",
-      "types/pass_key_nocompile.nc",
       "types/variant_util_nocompile.nc",
       "unsafe_buffers_nocompile.nc",
       "values_nocompile.nc",
diff --git a/base/types/pass_key.h b/base/types/pass_key.h
index 6684ffad2b81a..d7b057975f916 100644
--- a/base/types/pass_key.h
+++ b/base/types/pass_key.h
@@ -37,6 +37,7 @@ namespace base {
 template <typename T>
 class PassKey {
   friend T;
+ public:
   PassKey() = default;
 };
 
diff --git a/chrome/browser/ui/views/elevation_icon_setter.cc b/chrome/browser/ui/views/elevation_icon_setter.cc
index ba51820bfcd4c..127784532b53a 100644
--- a/chrome/browser/ui/views/elevation_icon_setter.cc
+++ b/chrome/browser/ui/views/elevation_icon_setter.cc
@@ -5,6 +5,7 @@
 #include "chrome/browser/ui/views/elevation_icon_setter.h"
 
 #include "base/functional/bind.h"
+#include "base/functional/callback.h"
 #include "base/task/thread_pool.h"
 #include "build/build_config.h"
 #include "third_party/skia/include/core/SkBitmap.h"
@@ -77,3 +78,36 @@ void ElevationIconSetter::SetButtonIcon(const SkBitmap& icon) {
             gfx::ImageSkia::CreateFromBitmap(icon, device_scale_factor)));
   }
 }
+
+
+// ElevationIconSetter --------------------------------------------------------
+
+ElevationIconSetter::ElevationIconSetter(views::LabelButton* button,
+                                         base::OnceCallback<void (base::PassKey<views::View>)> callback)
+    : button_(button) {
+#if BUILDFLAG(IS_WIN)
+  base::ThreadPool::CreateCOMSTATaskRunner(
+      {base::MayBlock(), base::TaskPriority::USER_BLOCKING})
+      ->PostTaskAndReplyWithResult(
+          FROM_HERE, base::BindOnce(&gfx::win::GetElevationIcon),
+          base::BindOnce(&ElevationIconSetter::SetButtonIcon_win7,
+                         weak_factory_.GetWeakPtr(), std::move(callback)));
+#endif
+}
+
+void ElevationIconSetter::SetButtonIcon_win7(base::OnceCallback<void (base::PassKey<views::View>)> callback,
+                                        const SkBitmap& icon) {
+  if (!icon.isNull()) {
+    float device_scale_factor = 1.0f;
+#if BUILDFLAG(IS_WIN)
+    // Windows gives us back a correctly-scaled image for the current DPI, so
+    // mark this image as having been scaled for the current DPI already.
+    device_scale_factor = display::win::GetDPIScale();
+#endif
+    button_->SetImageModel(
+        views::Button::STATE_NORMAL,
+        ui::ImageModel::FromImageSkia(
+            gfx::ImageSkia::CreateFromBitmap(icon, device_scale_factor)));
+    button_->SizeToPreferredSize();
+  }
+}
diff --git a/chrome/browser/ui/views/elevation_icon_setter.h b/chrome/browser/ui/views/elevation_icon_setter.h
index 11e1975c30767..4de55e03e6e27 100644
--- a/chrome/browser/ui/views/elevation_icon_setter.h
+++ b/chrome/browser/ui/views/elevation_icon_setter.h
@@ -8,10 +8,12 @@
 #include "base/functional/callback_forward.h"
 #include "base/memory/raw_ptr.h"
 #include "base/memory/weak_ptr.h"
+#include "base/types/pass_key.h"
 
 class SkBitmap;
 
 namespace views {
+class View;
 class LabelButton;
 }
 
@@ -25,6 +27,7 @@ class ElevationIconSetter {
   // should pass a function which does a relayout on the view containing the
   // button, to ensure the button is correctly resized as necessary.
   explicit ElevationIconSetter(views::LabelButton* button);
+  ElevationIconSetter(views::LabelButton* button, base::OnceCallback<void (base::PassKey<views::View>)>);
 
   ElevationIconSetter(const ElevationIconSetter&) = delete;
   ElevationIconSetter& operator=(const ElevationIconSetter&) = delete;
@@ -33,6 +36,7 @@ class ElevationIconSetter {
 
  private:
   void SetButtonIcon(const SkBitmap& icon);
+  void SetButtonIcon_win7(base::OnceCallback<void (base::PassKey<views::View>)> callback, const SkBitmap& icon);
 
   raw_ptr<views::LabelButton> button_;
   base::WeakPtrFactory<ElevationIconSetter> weak_factory_{this};
diff --git a/ui/views/BUILD.gn b/ui/views/BUILD.gn
index 7b320adfe662f..c1bb661367b0e 100644
--- a/ui/views/BUILD.gn
+++ b/ui/views/BUILD.gn
@@ -1576,15 +1576,15 @@ test("views_unittests") {
   }
 
   if (enable_nocompile_tests) {
-    deps += [ ":views_nocompile_tests" ]
+    # deps += [ ":views_nocompile_tests" ]
   }
 }
 
 if (enable_nocompile_tests) {
-  nocompile_source_set("views_nocompile_tests") {
-    sources = [ "view_nocompile.nc" ]
-    deps = [ ":views" ]
-  }
+  # nocompile_source_set("views_nocompile_tests") {
+    # sources = [ "view_nocompile.nc" ]
+    # deps = [ ":views" ]
+  # }
 }
 
 # This target is added as a dependency of browser interactive_ui_tests. It must
diff --git a/ui/views/view.h b/ui/views/view.h
index 4e0d42bdbc705..0dc05a4760854 100644
--- a/ui/views/view.h
+++ b/ui/views/view.h
@@ -295,7 +295,7 @@ class VIEWS_EXPORT View : public ui::LayerDelegate,
     OwnedByClientPassKey() = default;
   };
 
-  using PassKey = base::NonCopyablePassKey<View>;
+  using PassKey = base::PassKey<View>;
   using Views = std::vector<raw_ptr<View, VectorExperimental>>;
 
   // TODO(crbug.com/40212171): The |event| parameter is being removed. Do not
