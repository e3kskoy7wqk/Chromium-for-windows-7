diff --git a/chrome/app/profiles_strings.grdp b/chrome/app/profiles_strings.grdp
index 9fd0ee5e6540f..94a0fe3c912f6 100644
--- a/chrome/app/profiles_strings.grdp
+++ b/chrome/app/profiles_strings.grdp
@@ -1164,19 +1164,34 @@
       No thanks
     </message>
     <!-- History Sync Opt-in Expansion Pill Desktop -->
+    <message name="IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES" desc="The avatar button label for the history sync promo. When clicked, it opens the profile menu with the sync button.">
+      Browse across devices?
+    </message>
     <message name="IDS_AVATAR_BUTTON_SYNC_HISTORY" desc="The avatar button label for the history sync promo. When clicked, it opens the profile menu with the sync button.">
       Sync history?
     </message>
+    <message name="IDS_AVATAR_BUTTON_SEE_TABS_FROM_OTHER_DEVICES" desc="The avatar button label for the history sync promo. When clicked, it opens the profile menu with the sync button.">
+      See tabs from other devices?
+    </message>
     <message name="IDS_AVATAR_BUTTON_SYNC_PROMO" desc="The avatar button label for the sync promo. When clicked, it opens the profile menu with the sync button.">
       Back up your stuff?
     </message>
     <!-- Profile Menu Sync Promo Desktop -->
+    <message name="IDS_PROFILE_MENU_SYNC_PROMO_BROWSE_ACROSS_DEVICES_DESCRIPTION" desc="The description for the sync promo in the profile menu opened from the 'Browse across devices?' history sync opt-in identity pill.">
+      To pick up where you left off on other devices, sync your history and tabs to <ph name="ACCOUNT_EMAIL">$1<ex>elisa.beckett@gmail.com</ex></ph>
+    </message>
     <message name="IDS_PROFILE_MENU_SYNC_PROMO_SYNC_HISTORY_DESCRIPTION" desc="The description for the sync promo in the profile menu opened from the 'Sync history?' history sync opt-in identity pill.">
       To easily get back to sites youâ€™ve visited, sync your history and tabs to <ph name="ACCOUNT_EMAIL">$1<ex>elisa.beckett@gmail.com</ex></ph>
     </message>
+    <message name="IDS_PROFILE_MENU_SYNC_PROMO_SEE_TABS_FROM_OTHER_DEVICES_DESCRIPTION" desc="The description for the sync promo in the profile menu opened from the 'See tabs from other devices?' history sync opt-in identity pill.">
+      To see open tabs from your other computers and phones, sync your history and tabs to <ph name="ACCOUNT_EMAIL">$1<ex>elisa.beckett@gmail.com</ex></ph>
+    </message>
     <message name="IDS_PROFILE_MENU_SYNC_PROMO_BUTTON_LABEL" desc="The button label for the sync promo. When clicked, it opens the turn on sync dialog.">
       Turn on
     </message>
+    <message name="IDS_PROFILE_MENU_SYNC_PROMO_ROW_BUTTON_LABEL" desc="The button label for the history sync promo. When clicked, it opens the turn on sync dialog.">
+      Browse across devices
+    </message>
     <message name="IDS_PROFILE_MENU_DESCRIPTION_WITH_SYNC_PROMO" desc="The description of the identity section in the Profile Menu for users that can see the Sync Promo in the Avatar button. This describes the action presented right below it in the button.">
       Back up your passwords, bookmarks, and more, so you can easily get them on all your devices
     </message>
diff --git a/chrome/app/profiles_strings_grdp/IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES.png.sha1 b/chrome/app/profiles_strings_grdp/IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES.png.sha1
new file mode 100644
index 0000000000000..292f531a827f4
--- /dev/null
+++ b/chrome/app/profiles_strings_grdp/IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES.png.sha1
@@ -0,0 +1 @@
+d8df0286b94807b170b5e94c8ccf98545ad46f25
\ No newline at end of file
diff --git a/chrome/app/profiles_strings_grdp/IDS_AVATAR_BUTTON_SEE_TABS_FROM_OTHER_DEVICES.png.sha1 b/chrome/app/profiles_strings_grdp/IDS_AVATAR_BUTTON_SEE_TABS_FROM_OTHER_DEVICES.png.sha1
new file mode 100644
index 0000000000000..763ef2972bc92
--- /dev/null
+++ b/chrome/app/profiles_strings_grdp/IDS_AVATAR_BUTTON_SEE_TABS_FROM_OTHER_DEVICES.png.sha1
@@ -0,0 +1 @@
+28c86d74a2466eea75340c7b1a3d53313b116783
\ No newline at end of file
diff --git a/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_SYNC_PROMO_BROWSE_ACROSS_DEVICES_DESCRIPTION.png.sha1 b/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_SYNC_PROMO_BROWSE_ACROSS_DEVICES_DESCRIPTION.png.sha1
new file mode 100644
index 0000000000000..9378b1f533f4f
--- /dev/null
+++ b/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_SYNC_PROMO_BROWSE_ACROSS_DEVICES_DESCRIPTION.png.sha1
@@ -0,0 +1 @@
+88d01ab0e4253be04f0618c97089efe18848e7b0
\ No newline at end of file
diff --git a/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_SYNC_PROMO_ROW_BUTTON_LABEL.png.sha1 b/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_SYNC_PROMO_ROW_BUTTON_LABEL.png.sha1
new file mode 100644
index 0000000000000..d6f1342f4b1c7
--- /dev/null
+++ b/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_SYNC_PROMO_ROW_BUTTON_LABEL.png.sha1
@@ -0,0 +1 @@
+56a967e7cc83ab6aa478f689d001daf40e6588b3
\ No newline at end of file
diff --git a/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_SYNC_PROMO_SEE_TABS_FROM_OTHER_DEVICES_DESCRIPTION.png.sha1 b/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_SYNC_PROMO_SEE_TABS_FROM_OTHER_DEVICES_DESCRIPTION.png.sha1
new file mode 100644
index 0000000000000..aeb3ca7ef9196
--- /dev/null
+++ b/chrome/app/profiles_strings_grdp/IDS_PROFILE_MENU_SYNC_PROMO_SEE_TABS_FROM_OTHER_DEVICES_DESCRIPTION.png.sha1
@@ -0,0 +1 @@
+df1f9f3e8324c737433c0f91d2fbf1678ca7a8bf
\ No newline at end of file
diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 4a10d5a5d1344..a3729d9ccf2d0 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -4583,6 +4583,37 @@ const FeatureEntry::FeatureVariation kAILangsVariation[] = {
     {"Multilingual", kAILangsParam, std::size(kAILangsParam), nullptr},
 };
 
+#if BUILDFLAG(ENABLE_DICE_SUPPORT)
+const FeatureEntry::FeatureParam
+    kHistorySyncOptinExpansionPillBrowseAcrossDevices[] = {
+        {"history-sync-optin-expansion-pill-option", "browse-across-devices"}};
+const FeatureEntry::FeatureParam kHistorySyncOptinExpansionPillSyncHistory[] = {
+    {"history-sync-optin-expansion-pill-option", "sync-history"}};
+const FeatureEntry::FeatureParam
+    kHistorySyncOptinExpansionPillSeeTabsFromOtherDevices[] = {
+        {"history-sync-optin-expansion-pill-option",
+         "see-tabs-from-other-devices"}};
+const FeatureEntry::FeatureParam
+    kHistorySyncOptinExpansionPillBrowseAcrossDevicesNewProfileMenuPromoVariant
+        [] = {{"history-sync-optin-expansion-pill-option",
+               "browse-across-devices-new-profile-menu-promo-variant"}};
+
+const FeatureEntry::FeatureVariation kHistorySyncOptinExpansionPillVariations[] = {
+    {"- Browse across devices",
+     kHistorySyncOptinExpansionPillBrowseAcrossDevices,
+     std::size(kHistorySyncOptinExpansionPillBrowseAcrossDevices), nullptr},
+    {"- Sync history", kHistorySyncOptinExpansionPillSyncHistory,
+     std::size(kHistorySyncOptinExpansionPillSyncHistory), nullptr},
+    {"- See tabs from other devices",
+     kHistorySyncOptinExpansionPillSeeTabsFromOtherDevices,
+     std::size(kHistorySyncOptinExpansionPillSeeTabsFromOtherDevices), nullptr},
+    {"- Browse across devices (Profile Menu Variant)",
+     kHistorySyncOptinExpansionPillBrowseAcrossDevicesNewProfileMenuPromoVariant,
+     std::size(
+         kHistorySyncOptinExpansionPillBrowseAcrossDevicesNewProfileMenuPromoVariant),
+     nullptr}};
+#endif  // BUILDFLAG(ENABLE_DICE_SUPPORT)
+
 #if BUILDFLAG(IS_WIN)
 const FeatureEntry::FeatureParam kAvatarButtonSyncPromoMinimumCookeAge[] = {
     // 30 seconds to simplify testing.
@@ -10652,7 +10683,10 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kEnableHistorySyncOptinExpansionPillName,
      flag_descriptions::kEnableHistorySyncOptinExpansionPillDescription,
      kOsWin | kOsMac | kOsLinux,
-     FEATURE_VALUE_TYPE(switches::kEnableHistorySyncOptinExpansionPill)},
+     FEATURE_WITH_PARAMS_VALUE_TYPE(
+         switches::kEnableHistorySyncOptinExpansionPill,
+         kHistorySyncOptinExpansionPillVariations,
+         "EnableHistorySyncOptinExpansionPill")},
 #endif
 
 #if BUILDFLAG(IS_WIN)
diff --git a/chrome/browser/ui/views/profiles/avatar_toolbar_button_browsertest.cc b/chrome/browser/ui/views/profiles/avatar_toolbar_button_browsertest.cc
index 434939d002826..54f239c8d102e 100644
--- a/chrome/browser/ui/views/profiles/avatar_toolbar_button_browsertest.cc
+++ b/chrome/browser/ui/views/profiles/avatar_toolbar_button_browsertest.cc
@@ -1090,6 +1090,11 @@ enum FeaturePromoType {
   kSyncPromo,
 };
 
+struct FeaturePromoTestParams {
+  FeaturePromoType feature_promo_type;
+  std::string feature_parameters;
+};
+
 // The tests relying on this base class can test both the History Sync Promo and
 // the Sync Promo. It is important to ensure that one of the feature flags is
 // enabled at the same time, since the features are not compatible (SyncPromo
@@ -1098,12 +1103,15 @@ class AvatarToolbarButtonSyncPromoBaseBrowserTest
     : public AvatarToolbarButtonWithInteractiveFeaturePromoBrowserTest {
  protected:
   explicit AvatarToolbarButtonSyncPromoBaseBrowserTest(
-      FeaturePromoType promo_type) {
-    switch (promo_type) {
+      FeaturePromoTestParams params) {
+    switch (params.feature_promo_type) {
       case FeaturePromoType::kHistorySyncPromo:
-        feature_list_.InitWithFeatures(
-            /*enabled_features=*/{switches::
-                                      kEnableHistorySyncOptinExpansionPill},
+        feature_list_.InitWithFeaturesAndParameters(
+            /*enabled_features=*/
+            {{switches::kEnableHistorySyncOptinExpansionPill,
+              /*params=*/{{"history-sync-optin-expansion-pill-"
+                           "option",
+                           params.feature_parameters}}}},
             /*disabled_features=*/{switches::kAvatarButtonSyncPromoForTesting});
         break;
       case FeaturePromoType::kSyncPromo:
@@ -1124,39 +1132,8 @@ class AvatarToolbarButtonSyncPromoBrowserTest
       public testing::WithParamInterface<FeaturePromoType> {
  protected:
   AvatarToolbarButtonSyncPromoBrowserTest()
-      : AvatarToolbarButtonSyncPromoBaseBrowserTest(GetParam()) {}
-
-  // For History Sync promo, since it reactivates on inactivtity, we can just
-  // override the LastActive time.
-  // For the Sync promo, since it does not react to inactivity, we sign out and
-  // sign back in, where the user is expected to see the promo. Unloading and
-  // reloading the profile would have worked as well, but would have made the
-  // test setup more complex.
-  void SimulateResettingStateToAttemptShowingSyncPromo(
-      int shown_count,
-      const std::u16string& email,
-      const std::u16string& account_name,
-      AvatarToolbarButton* avatar) {
-    if (switches::IsAvatarSyncPromoFeatureEnabled()) {
-      // Signing back in should would put the profile in a state where it may
-      // show the promo.
-      Signout();
-      SigninWithImage(/*email=*/u"test@gmail.com", account_name);
-      avatar->ClearActiveStateForTesting();
-    } else {
-      // Simulate inactivity for enough time to trigger the new session.
-      RunTestSequence(SetLastActive(
-          shown_count *
-          user_education::features::GetIdleTimeBetweenSessions()));
-    }
-  }
-
-  std::u16string GetExpectedPromoText() {
-    if (switches::IsAvatarSyncPromoFeatureEnabled()) {
-      return l10n_util::GetStringUTF16(IDS_AVATAR_BUTTON_SYNC_PROMO);
-    }
-    return l10n_util::GetStringUTF16(IDS_AVATAR_BUTTON_SYNC_HISTORY);
-  }
+      : AvatarToolbarButtonSyncPromoBaseBrowserTest(
+            {.feature_promo_type = GetParam()}) {}
 };
 
 IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
@@ -1353,7 +1330,11 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(switches::IsAvatarSyncPromoFeatureEnabled()
+                                    ? IDS_AVATAR_BUTTON_SYNC_PROMO
+                                    : IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES));
   SimulatePassphraseError();
   // The history sync opt-in entry point should be replaced by the passphrase
   // error message.
@@ -1384,7 +1365,11 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(switches::IsAvatarSyncPromoFeatureEnabled()
+                                    ? IDS_AVATAR_BUTTON_SYNC_PROMO
+                                    : IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES));
   SimulateUpgradeClientError();
   // The history sync opt-in entry point should be replaced by the passphrase
   // error message.
@@ -1415,7 +1400,11 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(switches::IsAvatarSyncPromoFeatureEnabled()
+                                    ? IDS_AVATAR_BUTTON_SYNC_PROMO
+                                    : IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES));
   SimulateSigninError(/*web_sign_out=*/false);
   // The history sync opt-in entry point should be replaced by the signin
   // pending message.
@@ -1445,7 +1434,11 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(switches::IsAvatarSyncPromoFeatureEnabled()
+                                    ? IDS_AVATAR_BUTTON_SYNC_PROMO
+                                    : IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES));
   const std::u16string explicit_text(u"Explicit Text");
   base::ScopedClosureRunner hide_callback = avatar->SetExplicitButtonState(
       explicit_text, /*accessibility_label=*/std::nullopt,
@@ -1489,13 +1482,59 @@ IN_PROC_BROWSER_TEST_P(
   EXPECT_TRUE(avatar->GetText().empty());
 }
 
+INSTANTIATE_TEST_SUITE_P(,
+                         AvatarToolbarButtonSyncPromoBrowserTest,
+                         ValuesIn({FeaturePromoType::kHistorySyncPromo,
+                                   FeaturePromoType::kSyncPromo}));
+
+struct HistorySyncOptinExpansionPillOptionTestCase {
+  FeaturePromoType promo_type;
+  std::string feature_param;
+  int expected_history_sync_message_id;
+};
+
+class AvatarToolbarButtonHistorySyncOptinWithParamBrowserTest
+    : public AvatarToolbarButtonSyncPromoBaseBrowserTest,
+      public WithParamInterface<HistorySyncOptinExpansionPillOptionTestCase> {
+ public:
+  AvatarToolbarButtonHistorySyncOptinWithParamBrowserTest()
+      : AvatarToolbarButtonSyncPromoBaseBrowserTest(
+            {.feature_promo_type = GetParam().promo_type,
+             .feature_parameters = GetParam().feature_param}) {}
+
+  // For History Sync promo, since it reactivates on inactivtity, we can just
+  // override the LastActive time.
+  // For the Sync promo, since it does not react to inactivity, we sign out and
+  // sign back in, where the user is expected to see the promo. Unloading and
+  // reloading the profile would have worked as well, but would have made the
+  // test setup more complex.
+  void SimulateResettingStateToAttemptShowingSyncPromo(
+      int shown_count,
+      const std::u16string& email,
+      const std::u16string& account_name,
+      AvatarToolbarButton* avatar) {
+    if (switches::IsAvatarSyncPromoFeatureEnabled()) {
+      // Signing back in should would put the profile in a state where it may
+      // show the promo.
+      Signout();
+      SigninWithImage(/*email=*/u"test@gmail.com", account_name);
+      avatar->ClearActiveStateForTesting();
+    } else {
+      // Simulate inactivity for enough time to trigger the new session.
+      RunTestSequence(SetLastActive(
+          shown_count *
+          user_education::features::GetIdleTimeBetweenSessions()));
+    }
+  }
+};
+
 // TODO(crbug.com/331746545): Check the flaky test issue on Windows.
 #if BUILDFLAG(IS_WIN)
 #define MAYBE_CollapsesOnSyncTurnedOn DISABLED_CollapsesOnSyncTurnedOn
 #else
 #define MAYBE_CollapsesOnSyncTurnedOn CollapsesOnSyncTurnedOn
 #endif
-IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
+IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinWithParamBrowserTest,
                        MAYBE_CollapsesOnSyncTurnedOn) {
   AvatarToolbarButton* avatar = GetAvatarToolbarButton(browser());
   // Normal state.
@@ -1507,7 +1546,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   EnableSync(email, account_name);
   // Once sync is turned on, the button should return to the normal state.
   EXPECT_TRUE(avatar->GetText().empty());
@@ -1519,7 +1560,7 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
 #else
 #define MAYBE_CollapsesOnSignOut CollapsesOnSignOut
 #endif
-IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
+IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinWithParamBrowserTest,
                        MAYBE_CollapsesOnSignOut) {
   AvatarToolbarButton* avatar = GetAvatarToolbarButton(browser());
   // Normal state.
@@ -1531,7 +1572,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   Signout();
   // Once the user signs out, the button should return to the normal state.
   EXPECT_TRUE(avatar->GetText().empty());
@@ -1545,7 +1588,7 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
 #define MAYBE_PRE_ShowsOnBrowserRestart PRE_ShowsOnBrowserRestart
 #define MAYBE_ShowsOnBrowserRestart ShowsOnBrowserRestart
 #endif
-IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
+IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinWithParamBrowserTest,
                        MAYBE_PRE_ShowsOnBrowserRestart) {
   AvatarToolbarButton* avatar = GetAvatarToolbarButton(browser());
   // Normal state.
@@ -1557,13 +1600,15 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   avatar->ClearActiveStateForTesting();
   // The button should return to the normal state.
   EXPECT_TRUE(avatar->GetText().empty());
 }
 
-IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
+IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinWithParamBrowserTest,
                        MAYBE_ShowsOnBrowserRestart) {
   // Disable the preferences about syncing the tabs and history to make the
   // avatar promo eligible.
@@ -1576,7 +1621,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
       l10n_util::GetStringFUTF16(IDS_AVATAR_BUTTON_GREETING, u"Account name"));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   avatar->ClearActiveStateForTesting();
   // The button should return to the normal state.
   EXPECT_TRUE(avatar->GetText().empty());
@@ -1591,9 +1638,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
   HistorySyncOptinShowsAfterGreetingAndOnInactivity
 #endif
 IN_PROC_BROWSER_TEST_P(
-    AvatarToolbarButtonSyncPromoBrowserTest,
+    AvatarToolbarButtonHistorySyncOptinWithParamBrowserTest,
     MAYBE_HistorySyncOptinShowsAfterGreetingAndOnInactivity) {
-  if (GetParam() == FeaturePromoType::kSyncPromo) {
+  if (GetParam().promo_type == FeaturePromoType::kSyncPromo) {
     GTEST_SKIP() << "With the SyncPromo feature, the promo is not expected to "
                     "be shown on inactivity.";
   }
@@ -1617,7 +1664,9 @@ IN_PROC_BROWSER_TEST_P(
                                    IDS_AVATAR_BUTTON_GREETING, account_name));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   avatar->ClearActiveStateForTesting();
   // Once the history sync opt-in entry point collapses, the button should
   // return to the normal state.
@@ -1627,7 +1676,9 @@ IN_PROC_BROWSER_TEST_P(
   RunTestSequence(SetLastActive(last_active_time));
   // The history sync opt-in entry point should be shown again after the
   // inactivity period.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   avatar->ClearActiveStateForTesting();
   // Once the history sync opt-in entry point collapses, the button should
   // return to the normal state.
@@ -1651,7 +1702,7 @@ IN_PROC_BROWSER_TEST_P(
 #define MAYBE_HistorySyncOptinNotShownIfMaxShownCountReached \
   HistorySyncOptinNotShownIfMaxShownCountReached
 #endif
-IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
+IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinWithParamBrowserTest,
                        MAYBE_HistorySyncOptinNotShownIfMaxShownCountReached) {
   AvatarToolbarButton* avatar = GetAvatarToolbarButton(browser());
   // Normal state.
@@ -1663,7 +1714,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name_1));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   int shown_count = 1;
   avatar->ClearActiveStateForTesting();
   // The button comes back to the normal state.
@@ -1672,7 +1725,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
        ++shown_count) {
     SimulateResettingStateToAttemptShowingSyncPromo(shown_count, email,
                                                     account_name_1, avatar);
-    EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+    EXPECT_EQ(
+        avatar->GetText(),
+        l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
     avatar->ClearActiveStateForTesting();
     // The button comes back to the normal state.
     EXPECT_TRUE(avatar->GetText().empty());
@@ -1691,16 +1746,50 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonSyncPromoBrowserTest,
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point
   // (rate limiting is per account).
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
 }
 
-INSTANTIATE_TEST_SUITE_P(,
-                         AvatarToolbarButtonSyncPromoBrowserTest,
-                         ValuesIn({FeaturePromoType::kHistorySyncPromo,
-                                   FeaturePromoType::kSyncPromo}));
+const HistorySyncOptinExpansionPillOptionTestCase kHistorySyncOptinTestCases[] =
+    {
+        {
+            .promo_type = FeaturePromoType::kSyncPromo,
+            .expected_history_sync_message_id = IDS_AVATAR_BUTTON_SYNC_PROMO,
+        },
+        {
+            .promo_type = FeaturePromoType::kHistorySyncPromo,
+            .feature_param = "browse-across-devices",
+            .expected_history_sync_message_id =
+                IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES,
+        },
+        {
+            .promo_type = FeaturePromoType::kHistorySyncPromo,
+            .feature_param = "sync-history",
+            .expected_history_sync_message_id = IDS_AVATAR_BUTTON_SYNC_HISTORY,
+        },
+        {
+            .promo_type = FeaturePromoType::kHistorySyncPromo,
+            .feature_param = "see-tabs-from-other-devices",
+            .expected_history_sync_message_id =
+                IDS_AVATAR_BUTTON_SEE_TABS_FROM_OTHER_DEVICES,
+        },
+        {
+            .promo_type = FeaturePromoType::kHistorySyncPromo,
+            .feature_param =
+                "browse-across-devices-new-profile-menu-promo-variant",
+            .expected_history_sync_message_id =
+                IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES,
+        },
+};
+
+INSTANTIATE_TEST_SUITE_P(
+    HistorySyncOptinExpansionPillOptions,
+    AvatarToolbarButtonHistorySyncOptinWithParamBrowserTest,
+    ValuesIn(kHistorySyncOptinTestCases));
 
 class AvatarToolbarButtonHistorySyncOptinClickBrowserTest
-    : public AvatarToolbarButtonSyncPromoBrowserTest {
+    : public AvatarToolbarButtonHistorySyncOptinWithParamBrowserTest {
  protected:
   AvatarToolbarButtonHistorySyncOptinClickBrowserTest()
       : delegate_auto_reset_(signin_ui_util::SetSigninUiDelegateForTesting(
@@ -1742,7 +1831,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinClickBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   // `Signin.SyncOptIn.IdentityPill.Shown` should be recorded with the correct
   // access point.
   histogram_tester.ExpectBucketCount(
@@ -1805,7 +1896,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinClickBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   // `Signin.SyncOptIn.IdentityPill.Shown` should be recorded with the correct
   // access point.
   histogram_tester.ExpectBucketCount(
@@ -1823,7 +1916,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinClickBrowserTest,
       /*shown_count=*/1, email, account_name, avatar);
   // The history sync opt-in entry point should be shown again after the
   // inactivity period.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   // `Signin.SyncOptIn.IdentityPill.Shown` should be recorded with the correct
   // access point.
   histogram_tester.ExpectBucketCount(
@@ -1888,7 +1983,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinClickBrowserTest,
                                    IDS_AVATAR_BUTTON_GREETING, account_name_1));
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point.
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   // The button action should be overridden.
   Click(avatar);
   // The button comes back to the normal state.
@@ -1898,7 +1995,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinClickBrowserTest,
        ++used_count) {
     SimulateResettingStateToAttemptShowingSyncPromo(used_count, email,
                                                     account_name_1, avatar);
-    EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+    EXPECT_EQ(
+        avatar->GetText(),
+        l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
     Click(avatar);
     // The button comes back to the normal state.
     EXPECT_TRUE(avatar->GetText().empty());
@@ -1917,7 +2016,9 @@ IN_PROC_BROWSER_TEST_P(AvatarToolbarButtonHistorySyncOptinClickBrowserTest,
   avatar->ClearActiveStateForTesting();
   // The greeting should be followed by the history sync opt-in entry point
   // (rate limiting is per account).
-  EXPECT_EQ(avatar->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
 }
 
 // TODO(crbug.com/331746545): Check the flaky test issue on Windows.
@@ -1949,12 +2050,16 @@ IN_PROC_BROWSER_TEST_P(
   avatar_1->ClearActiveStateForTesting();
 
   // The greeting should be followed by the history sync opt-in.
-  EXPECT_EQ(avatar_1->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar_1->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   // Open the second browser before the history sync opt-in collapses.
   Browser* browser_2 = CreateBrowser(profile);
   AvatarToolbarButton* avatar_2 = GetAvatarToolbarButton(browser_2);
   // The history sync opt-in should be shown in the second browser as well.
-  EXPECT_EQ(avatar_2->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar_2->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   // `Signin.SyncOptIn.IdentityPill.Shown` histogram should be recorded only
   // once.
   histogram_tester.ExpectBucketCount(
@@ -1973,18 +2078,24 @@ IN_PROC_BROWSER_TEST_P(
       /*shown_count=*/1, email, account_name, avatar_1);
   // The history sync opt-in entry point should be shown again after the
   // inactivity period (in both browsers).
-  EXPECT_EQ(avatar_1->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar_1->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   if (switches::IsAvatarSyncPromoFeatureEnabled()) {
     // Since the sync promo was activated on Singing back in, we also need to
     // force clear the greeing on the second avatar button.
     avatar_2->ClearActiveStateForTesting();
   }
-  EXPECT_EQ(avatar_2->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar_2->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   // Open the third browser before the history sync opt-in collapses.
   Browser* browser_3 = CreateBrowser(profile);
   AvatarToolbarButton* avatar_3 = GetAvatarToolbarButton(browser_3);
   // The history sync opt-in should be shown in the third browser as well.
-  EXPECT_EQ(avatar_3->GetText(), GetExpectedPromoText());
+  EXPECT_EQ(
+      avatar_3->GetText(),
+      l10n_util::GetStringUTF16(GetParam().expected_history_sync_message_id));
   // `Signin.SyncOptIn.IdentityPill.Shown` histogram should be recorded only
   // once.
   histogram_tester.ExpectBucketCount(
@@ -2010,8 +2121,7 @@ IN_PROC_BROWSER_TEST_P(
 
 INSTANTIATE_TEST_SUITE_P(HistorySyncOptinExpansionPillOptions,
                          AvatarToolbarButtonHistorySyncOptinClickBrowserTest,
-                         ValuesIn({FeaturePromoType::kHistorySyncPromo,
-                                   FeaturePromoType::kSyncPromo}));
+                         ValuesIn(kHistorySyncOptinTestCases));
 #endif  // BUILDFLAG(ENABLE_DICE_SUPPORT)
 
 // Test suite for testing `AvatarToolbarButton`'s responsibility of updating
@@ -2468,8 +2578,8 @@ IN_PROC_BROWSER_TEST_P(
   avatar->ClearActiveStateForTesting();
   if (IsParamFeatureEnabled()) {
     // The greeting is followed by the history sync opt-in.
-    EXPECT_EQ(avatar->GetText(),
-              l10n_util::GetStringUTF16(IDS_AVATAR_BUTTON_SYNC_HISTORY));
+    EXPECT_EQ(avatar->GetText(), l10n_util::GetStringUTF16(
+                                     IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES));
     avatar->ClearActiveStateForTesting();
   }
   // Once the name (or sync promo) is not shown anymore, we expect no text.
@@ -2505,8 +2615,8 @@ IN_PROC_BROWSER_TEST_P(
   avatar->ClearActiveStateForTesting();
   if (IsParamFeatureEnabled()) {
     // The greeting is followed by the history sync opt-in.
-    EXPECT_EQ(avatar->GetText(),
-              l10n_util::GetStringUTF16(IDS_AVATAR_BUTTON_SYNC_HISTORY));
+    EXPECT_EQ(avatar->GetText(), l10n_util::GetStringUTF16(
+                                     IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES));
     avatar->ClearActiveStateForTesting();
   }
 
@@ -2541,8 +2651,8 @@ IN_PROC_BROWSER_TEST_P(
   avatar->ClearActiveStateForTesting();
   if (IsParamFeatureEnabled()) {
     // The greeting is followed by the history sync opt-in.
-    EXPECT_EQ(avatar->GetText(),
-              l10n_util::GetStringUTF16(IDS_AVATAR_BUTTON_SYNC_HISTORY));
+    EXPECT_EQ(avatar->GetText(), l10n_util::GetStringUTF16(
+                                     IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES));
     avatar->ClearActiveStateForTesting();
   }
 
@@ -2588,8 +2698,8 @@ IN_PROC_BROWSER_TEST_P(
   RunTestSequence(
       SetLastActive(user_education::features::GetIdleTimeBetweenSessions()));
   if (IsParamFeatureEnabled()) {
-    EXPECT_EQ(avatar->GetText(),
-              l10n_util::GetStringUTF16(IDS_AVATAR_BUTTON_SYNC_HISTORY));
+    EXPECT_EQ(avatar->GetText(), l10n_util::GetStringUTF16(
+                                     IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES));
     avatar->ClearActiveStateForTesting();
   }
   EXPECT_EQ(avatar->GetText(), u"Work");
diff --git a/chrome/browser/ui/views/profiles/avatar_toolbar_button_state_manager.cc b/chrome/browser/ui/views/profiles/avatar_toolbar_button_state_manager.cc
index 61794ad5ed4eb..bf09fd3b006db 100644
--- a/chrome/browser/ui/views/profiles/avatar_toolbar_button_state_manager.cc
+++ b/chrome/browser/ui/views/profiles/avatar_toolbar_button_state_manager.cc
@@ -1027,7 +1027,19 @@ class HistorySyncOptinStateProvider : public StateProvider {
       return l10n_util::GetStringUTF16(IDS_AVATAR_BUTTON_SYNC_PROMO);
     }
 
-    return l10n_util::GetStringUTF16(IDS_AVATAR_BUTTON_SYNC_HISTORY);
+    switch (switches::kHistorySyncOptinExpansionPillOption.Get()) {
+      case switches::HistorySyncOptinExpansionPillOption::kBrowseAcrossDevices:
+      case switches::HistorySyncOptinExpansionPillOption::
+          kBrowseAcrossDevicesNewProfileMenuPromoVariant:
+        return l10n_util::GetStringUTF16(
+            IDS_AVATAR_BUTTON_BROWSE_ACROSS_DEVICES);
+      case switches::HistorySyncOptinExpansionPillOption::kSyncHistory:
+        return l10n_util::GetStringUTF16(IDS_AVATAR_BUTTON_SYNC_HISTORY);
+      case switches::HistorySyncOptinExpansionPillOption::
+          kSeeTabsFromOtherDevices:
+        return l10n_util::GetStringUTF16(
+            IDS_AVATAR_BUTTON_SEE_TABS_FROM_OTHER_DEVICES);
+    }
   }
 
   void Init() override {
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view.cc b/chrome/browser/ui/views/profiles/profile_menu_view.cc
index e7b74b80b42bb..f98e9a637f1f1 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view.cc
@@ -169,9 +169,26 @@ std::u16string GetSyncPromoDescription(std::string_view email) {
 #if BUILDFLAG(ENABLE_DICE_SUPPORT)
   if (base::FeatureList::IsEnabled(
           switches::kEnableHistorySyncOptinExpansionPill)) {
-    return l10n_util::GetStringFUTF16(
-        IDS_PROFILE_MENU_SYNC_PROMO_SYNC_HISTORY_DESCRIPTION,
-        base::UTF8ToUTF16(email));
+    switch (switches::kHistorySyncOptinExpansionPillOption.Get()) {
+      case switches::HistorySyncOptinExpansionPillOption::kBrowseAcrossDevices:
+        return l10n_util::GetStringFUTF16(
+            IDS_PROFILE_MENU_SYNC_PROMO_BROWSE_ACROSS_DEVICES_DESCRIPTION,
+            base::UTF8ToUTF16(email));
+      case switches::HistorySyncOptinExpansionPillOption::kSyncHistory:
+        return l10n_util::GetStringFUTF16(
+            IDS_PROFILE_MENU_SYNC_PROMO_SYNC_HISTORY_DESCRIPTION,
+            base::UTF8ToUTF16(email));
+      case switches::HistorySyncOptinExpansionPillOption::
+          kSeeTabsFromOtherDevices:
+        return l10n_util::GetStringFUTF16(
+            IDS_PROFILE_MENU_SYNC_PROMO_SEE_TABS_FROM_OTHER_DEVICES_DESCRIPTION,
+            base::UTF8ToUTF16(email));
+      case switches::HistorySyncOptinExpansionPillOption::
+          kBrowseAcrossDevicesNewProfileMenuPromoVariant:
+        // If the new promo variant is enabled, the identity section
+        // shouldn't contain a sync promo.
+        NOTREACHED();
+    }
   }
 #endif
   return l10n_util::GetStringUTF16(IDS_PROFILES_DICE_SYNC_PROMO);
@@ -192,6 +209,19 @@ std::u16string GetSyncPromoButtonLabel() {
   return l10n_util::GetStringUTF16(IDS_PROFILES_DICE_SIGNIN_BUTTON);
 }
 
+bool IsNewSyncPromoVariantEnabled() {
+#if BUILDFLAG(ENABLE_DICE_SUPPORT)
+  if (base::FeatureList::IsEnabled(
+          switches::kEnableHistorySyncOptinExpansionPill) &&
+      switches::kHistorySyncOptinExpansionPillOption.Get() ==
+          switches::HistorySyncOptinExpansionPillOption::
+              kBrowseAcrossDevicesNewProfileMenuPromoVariant) {
+    return true;
+  }
+#endif
+  return false;
+}
+
 }  // namespace
 
 // static
@@ -735,6 +765,12 @@ ProfileMenuView::GetIdentitySectionParams(const ProfileAttributesEntry& entry) {
       break;
     }
     case signin_util::SignedInState::kSignedIn:
+      if (IsNewSyncPromoVariantEnabled()) {
+        // In the new variant, the sync button is displayed as the feature
+        // button.
+        params.subtitle = base::UTF8ToUTF16(primary_account_info.email);
+        break;
+      }
       params.subtitle = GetSyncPromoDescription(primary_account_info.email);
       params.button_text = GetSyncPromoButtonLabel();
       signin_metrics::LogSyncOptInOffered(
@@ -780,6 +816,22 @@ void ProfileMenuView::BuildIdentityWithCallToAction() {
   SetProfileIdentityWithCallToAction(GetIdentitySectionParams(*entry));
 }
 
+void ProfileMenuView::BuildHistorySyncOptInButton() {
+  CHECK(!profile().IsGuestSession());
+  signin_metrics::AccessPoint access_point =
+      explicit_signin_access_point_.value_or(
+          signin_metrics::AccessPoint::kAvatarBubbleSignIn);
+  signin_metrics::LogSyncOptInOffered(access_point);
+  AddPromoButton(
+      l10n_util::GetStringUTF16(IDS_PROFILE_MENU_SYNC_PROMO_ROW_BUTTON_LABEL),
+      base::BindRepeating(
+          &ProfileMenuView::OnSigninButtonClicked, base::Unretained(this),
+          IdentityManagerFactory::GetForProfile(&profile())
+              ->GetPrimaryAccountInfo(signin::ConsentLevel::kSignin),
+          ActionableItem::kHistorySyncOptInButton, access_point),
+      kDevicesChromeRefreshIcon);
+}
+
 void ProfileMenuView::OnBatchUploadDataReceived(
     std::map<syncer::DataType, syncer::LocalDataDescription> local_data_map) {
   size_t local_data_count = std::accumulate(
@@ -984,6 +1036,11 @@ void ProfileMenuView::MaybeBuildSignoutButton() {
 
 void ProfileMenuView::BuildFeatureButtons() {
   CHECK(!profile().IsGuestSession());
+  if (signin_util::GetSignedInState(IdentityManagerFactory::GetForProfile(
+          &profile())) == signin_util::SignedInState::kSignedIn &&
+      IsNewSyncPromoVariantEnabled()) {
+    BuildHistorySyncOptInButton();
+  }
   // May add the button asynchronously, order is not be guaranteed.
   MaybeBuildBatchUploadButton();
   BuildAutofillSettingsButton();
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view.h b/chrome/browser/ui/views/profiles/profile_menu_view.h
index 5e6c8b99c4f87..2eee73f373d14 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view.h
+++ b/chrome/browser/ui/views/profiles/profile_menu_view.h
@@ -102,6 +102,7 @@ class ProfileMenuView : public ProfileMenuViewBase {
   // Helper methods for building the menu.
   void SetMenuTitleForAccessibility();
   void BuildGuestIdentity();
+  void BuildHistorySyncOptInButton();
   void MaybeBuildBatchUploadButton();
   void BuildAutofillSettingsButton();
   void BuildCustomizeProfileButton();
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view_base.h b/chrome/browser/ui/views/profiles/profile_menu_view_base.h
index d2c881fa78c1a..8e4fe1dc0dda8 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view_base.h
+++ b/chrome/browser/ui/views/profiles/profile_menu_view_base.h
@@ -79,7 +79,7 @@ class ProfileMenuViewBase : public content::WebContentsDelegate,
     kProfileManagementLabel = 20,
     kSigninReauthButton = 21,
     kAutofillSettingsButton = 22,
-    // DEPRECATED: kHistorySyncOptInButton = 23,
+    kHistorySyncOptInButton = 23,
     kBatchUploadButton = 24,
     kMaxValue = kBatchUploadButton,
   };
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc b/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc
index 511f34408c169..70d7b7ce47b9d 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view_browsertest.cc
@@ -1391,9 +1391,8 @@ PROFILE_MENU_CLICK_TEST(kActionableItems_WithUnconsentedPrimaryAccount,
 
 // List of actionable items in the correct order as they appear in the menu. If
 // a new button is added to the menu, it should also be added to this list.
-constexpr std::array kActionableItems_WithPromoButton = {
-    ProfileMenuViewBase::ActionableItem::kSigninAccountButton,
-    ProfileMenuViewBase::ActionableItem::kBatchUploadButton,
+constexpr std::array kActionableItems_NewSyncPromoVariant = {
+    ProfileMenuViewBase::ActionableItem::kHistorySyncOptInButton,
     ProfileMenuViewBase::ActionableItem::kAutofillSettingsButton,
     ProfileMenuViewBase::ActionableItem::kManageGoogleAccountButton,
     ProfileMenuViewBase::ActionableItem::kEditProfileButton,
@@ -1404,15 +1403,57 @@ constexpr std::array kActionableItems_WithPromoButton = {
     ProfileMenuViewBase::ActionableItem::kManageProfilesButton,
     // The first button is added again to finish the cycle and test that
     // there are no other buttons at the end.
-    ProfileMenuViewBase::ActionableItem::kSigninAccountButton};
+    ProfileMenuViewBase::ActionableItem::kHistorySyncOptInButton};
 
 const std::vector<base::test::FeatureRefAndParams>
-    kProfileMenuPromoButtonFeatureFlags = {
-        {syncer::kReplaceSyncPromosWithSignInPromos, {}}};
+    kNewSyncPromoVariantEnabledFeatures = {
+        {switches::kEnableHistorySyncOptinExpansionPill,
+         {{"history-sync-optin-expansion-pill-option",
+           "browse-across-devices-new-profile-menu-promo-variant"}}}};
+
+PROFILE_MENU_CLICK_WITH_FEATURE_TEST(kActionableItems_NewSyncPromoVariant,
+                                     ProfileMenuClickTest_NewSyncPromoVariant,
+                                     kNewSyncPromoVariantEnabledFeatures,
+                                     /*disabled_features=*/{}) {
+  secondary_account_helper::SignInUnconsentedAccount(
+      GetProfile(), &test_url_loader_factory_, "user@example.com");
+  UnconsentedPrimaryAccountChecker(identity_manager()).Wait();
+  // Check that the setup was successful.
+  ASSERT_FALSE(
+      identity_manager()->HasPrimaryAccount(signin::ConsentLevel::kSync));
+  ASSERT_TRUE(
+      identity_manager()->HasPrimaryAccount(signin::ConsentLevel::kSignin));
+
+  RunTest();
+}
+
+// List of actionable items in the correct order as they appear in the menu. If
+// a new button is added to the menu, it should also be added to this list.
+constexpr std::array kActionableItems_WithPromoButtons = {
+    ProfileMenuViewBase::ActionableItem::kHistorySyncOptInButton,
+    ProfileMenuViewBase::ActionableItem::kBatchUploadButton,
+    ProfileMenuViewBase::ActionableItem::kAutofillSettingsButton,
+    ProfileMenuViewBase::ActionableItem::kManageGoogleAccountButton,
+    ProfileMenuViewBase::ActionableItem::kEditProfileButton,
+    ProfileMenuViewBase::ActionableItem::kSyncSettingsButton,
+    ProfileMenuViewBase::ActionableItem::kSignoutButton,
+    ProfileMenuViewBase::ActionableItem::kAddNewProfileButton,
+    ProfileMenuViewBase::ActionableItem::kGuestProfileButton,
+    ProfileMenuViewBase::ActionableItem::kManageProfilesButton,
+    // The first button is added again to finish the cycle and test that
+    // there are no other buttons at the end.
+    ProfileMenuViewBase::ActionableItem::kHistorySyncOptInButton};
 
-PROFILE_MENU_CLICK_WITH_FEATURE_TEST(kActionableItems_WithPromoButton,
-                                     ProfileMenuClickTest_WithPromoButton,
-                                     kProfileMenuPromoButtonFeatureFlags,
+const std::vector<base::test::FeatureRefAndParams>
+    kProfileMenuPromosButtonsFeatureFlags = {
+        {syncer::kReplaceSyncPromosWithSignInPromos, {}},
+        {switches::kEnableHistorySyncOptinExpansionPill,
+         {{"history-sync-optin-expansion-pill-option",
+           "browse-across-devices-new-profile-menu-promo-variant"}}}};
+
+PROFILE_MENU_CLICK_WITH_FEATURE_TEST(kActionableItems_WithPromoButtons,
+                                     ProfileMenuClickTest_WithPromoButtons,
+                                     kProfileMenuPromosButtonsFeatureFlags,
                                      /*disabled_features=*/{}) {
   secondary_account_helper::SignInUnconsentedAccount(
       GetProfile(), &test_url_loader_factory_, "user@example.com");
@@ -1971,7 +2012,9 @@ IN_PROC_BROWSER_TEST_F(ProfileMenuViewWebAppTest, ProfileMenuVisibility) {
 }
 #endif  // BUILDFLAG(IS_MAC)
 
-class ProfileMenuSigninAccessPointTest : public SigninBrowserTestBase {
+class ProfileMenuSigninAccessPointTest
+    : public testing::WithParamInterface<bool>,
+      public SigninBrowserTestBase {
  public:
   // SigninBrowserTestBase:
   void SetUpOnMainThread() override {
@@ -1991,7 +2034,16 @@ class ProfileMenuSigninAccessPointTest : public SigninBrowserTestBase {
  protected:
   ProfileMenuSigninAccessPointTest()
       : delegate_auto_reset_(signin_ui_util::SetSigninUiDelegateForTesting(
-            &mock_signin_ui_delegate_)) {}
+            &mock_signin_ui_delegate_)) {
+    if (IsNewPromoVariantEnabled()) {
+      feature_list_.InitAndEnableFeatureWithParameters(
+          switches::kEnableHistorySyncOptinExpansionPill,
+          {{"history-sync-optin-expansion-pill-option",
+            "browse-across-devices-new-profile-menu-promo-variant"}});
+    }
+  }
+
+  bool IsNewPromoVariantEnabled() const { return GetParam(); }
 
   void OpenProfileMenuFromCoordinator(
       std::optional<signin_metrics::AccessPoint> explicit_access_point =
@@ -2026,7 +2078,7 @@ class ProfileMenuSigninAccessPointTest : public SigninBrowserTestBase {
   base::test::ScopedFeatureList feature_list_;
 };
 
-IN_PROC_BROWSER_TEST_F(ProfileMenuSigninAccessPointTest,
+IN_PROC_BROWSER_TEST_P(ProfileMenuSigninAccessPointTest,
                        DefaultSigninAccessPoint) {
   base::HistogramTester histogram_tester;
   const signin_metrics::AccessPoint default_access_point =
@@ -2052,13 +2104,15 @@ IN_PROC_BROWSER_TEST_F(ProfileMenuSigninAccessPointTest,
                        /*user_already_signed_in=*/true));
   ASSERT_NO_FATAL_FAILURE(ClickSyncButton());
   const ProfileMenuViewBase::ActionableItem actionable_item =
-      ProfileMenuViewBase::ActionableItem::kSigninAccountButton;
+      IsNewPromoVariantEnabled()
+          ? ProfileMenuViewBase::ActionableItem::kHistorySyncOptInButton
+          : ProfileMenuViewBase::ActionableItem::kSigninAccountButton;
   histogram_tester.ExpectUniqueSample("Profile.Menu.ClickedActionableItem",
                                       actionable_item,
                                       /*expected_bucket_count=*/1);
 }
 
-IN_PROC_BROWSER_TEST_F(ProfileMenuSigninAccessPointTest,
+IN_PROC_BROWSER_TEST_P(ProfileMenuSigninAccessPointTest,
                        ExplicitSigninAccessPoint) {
   base::HistogramTester histogram_tester;
   const signin_metrics::AccessPoint explicit_access_point =
@@ -2084,8 +2138,18 @@ IN_PROC_BROWSER_TEST_F(ProfileMenuSigninAccessPointTest,
                        /*is_sync_promo=*/false,
                        /*user_already_signed_in=*/true));
   ASSERT_NO_FATAL_FAILURE(ClickSyncButton());
-  histogram_tester.ExpectUniqueSample(
-      "Profile.Menu.ClickedActionableItem",
-      ProfileMenuViewBase::ActionableItem::kSigninAccountButton,
-      /*expected_bucket_count=*/1);
+  const ProfileMenuViewBase::ActionableItem actionable_item =
+      GetParam() ? ProfileMenuViewBase::ActionableItem::kHistorySyncOptInButton
+                 : ProfileMenuViewBase::ActionableItem::kSigninAccountButton;
+  histogram_tester.ExpectUniqueSample("Profile.Menu.ClickedActionableItem",
+                                      actionable_item,
+                                      /*expected_bucket_count=*/1);
 }
+
+INSTANTIATE_TEST_SUITE_P(,
+                         ProfileMenuSigninAccessPointTest,
+                         testing::Bool(),
+                         [](const testing::TestParamInfo<bool>& info) {
+                           return info.param ? "NewPromoVariantEnabled"
+                                             : "NewPromoVariantDisabled";
+                         });
diff --git a/chrome/browser/ui/views/profiles/profile_menu_view_ui_browsertest.cc b/chrome/browser/ui/views/profiles/profile_menu_view_ui_browsertest.cc
index 0bdd3e7baf7c2..4718cc25c827b 100644
--- a/chrome/browser/ui/views/profiles/profile_menu_view_ui_browsertest.cc
+++ b/chrome/browser/ui/views/profiles/profile_menu_view_ui_browsertest.cc
@@ -230,6 +230,26 @@ const ProfileMenuViewPixelTestParam kPixelTestParams[] = {
         .extra_features_and_params =
             {{switches::kEnableHistorySyncOptinExpansionPill, {}}},
     },
+    {
+        .pixel_test_param = {.test_suffix =
+                                 "HistorySyncOptinExperimentNewPromoVariant"},
+        .signin_status = SigninStatusPixelTestParam::kSignedInNoSync,
+        .extra_features_and_params =
+            {{switches::kEnableHistorySyncOptinExpansionPill,
+              {{"history-sync-optin-expansion-pill-option",
+                "browse-across-devices-new-profile-menu-promo-variant"}}}},
+    },
+    {
+        .pixel_test_param =
+            {.test_suffix =
+                 "HistorySyncOptinExperimentNewPromoVariant_DarkTheme",
+             .use_dark_theme = true},
+        .signin_status = SigninStatusPixelTestParam::kSignedInNoSync,
+        .extra_features_and_params =
+            {{switches::kEnableHistorySyncOptinExpansionPill,
+              {{"history-sync-optin-expansion-pill-option",
+                "browse-across-devices-new-profile-menu-promo-variant"}}}},
+    },
     {
         .pixel_test_param = {.test_suffix = "BatchUploadPromoSingleLocalData"},
         .signin_status = SigninStatusPixelTestParam::kSignedInNoSync,
@@ -242,6 +262,16 @@ const ProfileMenuViewPixelTestParam kPixelTestParams[] = {
         .signin_status = SigninStatusPixelTestParam::kSignedInNoSync,
         .with_local_data = WithLocalData::kMultipleLocalData,
     },
+    {
+        .pixel_test_param = {.test_suffix =
+                                 "BatchUploadPromoAndHistorySyncOptinPromo"},
+        .signin_status = SigninStatusPixelTestParam::kSignedInNoSync,
+        .with_local_data = WithLocalData::kMultipleLocalData,
+        .extra_features_and_params =
+            {{switches::kEnableHistorySyncOptinExpansionPill,
+              {{"history-sync-optin-expansion-pill-option",
+                "browse-across-devices-new-profile-menu-promo-variant"}}}},
+    },
     {
         .pixel_test_param = {.test_suffix = "AvatarSyncPromo"},
         .signin_status = SigninStatusPixelTestParam::kSignedInNoSync,
diff --git a/components/signin/public/base/signin_switches.cc b/components/signin/public/base/signin_switches.cc
index 565bc7e28c11b..6f57485769e6e 100644
--- a/components/signin/public/base/signin_switches.cc
+++ b/components/signin/public/base/signin_switches.cc
@@ -98,6 +98,28 @@ BASE_FEATURE(kEnableHistorySyncOptinExpansionPill,
              "EnableHistorySyncOptinExpansionPill",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+constexpr base::FeatureParam<HistorySyncOptinExpansionPillOption>::Option
+    kHistorySyncOptinExpansionPillOptions[] = {
+        {HistorySyncOptinExpansionPillOption::kBrowseAcrossDevices,
+         "browse-across-devices"},
+        {HistorySyncOptinExpansionPillOption::kSyncHistory, "sync-history"},
+        {HistorySyncOptinExpansionPillOption::kSeeTabsFromOtherDevices,
+         "see-tabs-from-other-devices"},
+        {HistorySyncOptinExpansionPillOption::
+             kBrowseAcrossDevicesNewProfileMenuPromoVariant,
+         "browse-across-devices-new-profile-menu-promo-variant"}};
+
+// Determines the experiment arm of the History Sync Opt-in expansion pill
+// (different text options for the pill and the profile menu promo variant).
+//
+// It is no-op unless "EnableHistorySyncOptin" is enabled.
+constexpr base::FeatureParam<HistorySyncOptinExpansionPillOption>
+    kHistorySyncOptinExpansionPillOption = {
+        &kEnableHistorySyncOptinExpansionPill,
+        "history-sync-optin-expansion-pill-option",
+        HistorySyncOptinExpansionPillOption::kBrowseAcrossDevices,
+        &kHistorySyncOptinExpansionPillOptions};
+
 // Force enable the default browser step in the first run experience on Desktop.
 const char kForceFreDefaultBrowserStep[] = "force-fre-default-browser-step";
 #endif  // BUILDFLAG(ENABLE_DICE_SUPPORT)
diff --git a/components/signin/public/base/signin_switches.h b/components/signin/public/base/signin_switches.h
index 172ec53b16a79..3b97b2cfd64d1 100644
--- a/components/signin/public/base/signin_switches.h
+++ b/components/signin/public/base/signin_switches.h
@@ -136,6 +136,17 @@ BASE_DECLARE_FEATURE(kRetryInterceptionBubbleOnDiceSyncHeaderTimeout);
 COMPONENT_EXPORT(SIGNIN_SWITCHES)
 BASE_DECLARE_FEATURE(kEnableHistorySyncOptinExpansionPill);
 
+enum class HistorySyncOptinExpansionPillOption {
+  kBrowseAcrossDevices,
+  kSyncHistory,
+  kSeeTabsFromOtherDevices,
+  kBrowseAcrossDevicesNewProfileMenuPromoVariant,
+};
+
+COMPONENT_EXPORT(SIGNIN_SWITCHES)
+extern const base::FeatureParam<HistorySyncOptinExpansionPillOption>
+    kHistorySyncOptinExpansionPillOption;
+
 COMPONENT_EXPORT(SIGNIN_SWITCHES)
 extern const char kForceFreDefaultBrowserStep[];
 #endif  // BUILDFLAG(ENABLE_DICE_SUPPORT)
diff --git a/testing/variations/fieldtrial_testing_config.json b/testing/variations/fieldtrial_testing_config.json
index 5f2fb7bb9cd51..9bb8d9fa2913b 100644
--- a/testing/variations/fieldtrial_testing_config.json
+++ b/testing/variations/fieldtrial_testing_config.json
@@ -25453,6 +25453,26 @@
             ]
         }
     ],
+    "UnoDesktopHistorySyncPillExperiment": [
+        {
+            "platforms": [
+                "linux",
+                "mac",
+                "windows"
+            ],
+            "experiments": [
+                {
+                    "name": "EnabledWithBrowseAcrossDevices",
+                    "params": {
+                        "history-sync-optin-expansion-pill-option": "browse-across-devices"
+                    },
+                    "enable_features": [
+                        "EnableHistorySyncOptinExpansionPill"
+                    ]
+                }
+            ]
+        }
+    ],
     "UpdateStateBeforeUnbinding": [
         {
             "platforms": [
diff --git a/tools/metrics/histograms/metadata/profile/enums.xml b/tools/metrics/histograms/metadata/profile/enums.xml
index ae050372f2d80..d02cb19689390 100644
--- a/tools/metrics/histograms/metadata/profile/enums.xml
+++ b/tools/metrics/histograms/metadata/profile/enums.xml
@@ -455,7 +455,7 @@ chromium-metrics-reviews@google.com.
   <int value="20" label="Chrome Profile management link"/>
   <int value="21" label="Reauth button (Verify it's you)"/>
   <int value="22" label="Autofill settings button"/>
-  <int value="23" label="(DEPRECATED): History sync opt-in button"/>
+  <int value="23" label="History sync opt-in button"/>
   <int value="24" label="Batch upload button"/>
 </enum>
 
