diff --git a/AUTHORS b/AUTHORS
index b2aea0aedaa0b..88bbebc4199ac 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -1276,7 +1276,6 @@ Sergei Poletaev <spylogsster@gmail.com>
 Sergei Romanov <rsv.981@gmail.com>
 Sergey Romanov <svromanov@sberdevices.ru>
 Sergey Kipet <sergey.kipet@gmail.com>
-Sergey Markelov <sergionso@gmail.com>
 Sergey Putilin <p.sergey@samsung.com>
 Sergey Shekyan <shekyan@gmail.com>
 Sergey Talantov <sergey.talantov@gmail.com>
diff --git a/base/BUILD.gn b/base/BUILD.gn
index 4a93c5a396a68..acd9e3490fb4d 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -2809,10 +2809,6 @@ test("base_perftests") {
     "//testing:run_perf_test",
   ]
 
-  if (is_win) {
-    sources += [ "time/time_win_perftest.cc" ]
-  }
-
   if (is_android) {
     deps += [ "//testing/android/native_test:native_test_native_code" ]
     shard_timeout = 600
diff --git a/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/time/time_win.cc b/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/time/time_win.cc
index b68e825b23711..fd96cfd715fba 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/time/time_win.cc
+++ b/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/time/time_win.cc
@@ -7,9 +7,8 @@
 // A good article:  http://www.ddj.com/windows/184416651
 // A good mozilla bug:  http://bugzilla.mozilla.org/show_bug.cgi?id=363258
 //
-// The default windows timer, GetSystemTimePreciseAsFileTime is quite precise.
-// However it is not always fast on some hardware and is slower than the
-// performance counters.
+// The default windows timer, GetSystemTimeAsFileTime is not very precise.
+// It is only good to ~15.5ms.
 //
 // QueryPerformanceCounter is the logical choice for a high-precision timer.
 // However, it is known to be buggy on some hardware.  Specifically, it can
@@ -78,7 +77,7 @@ FILETIME MicrosecondsToFileTime(int64_t us) {
 
 int64_t CurrentWallclockMicroseconds() {
   FILETIME ft;
-  ::GetSystemTimePreciseAsFileTime(&ft);
+  ::GetSystemTimeAsFileTime(&ft);
   return FileTimeToMicroseconds(ft);
 }
 
@@ -114,8 +113,8 @@ Time TimeNowIgnoringOverride() {
   }
 
   // We implement time using the high-resolution timers so that we can get
-  // timeouts which likely are smaller than those if we just used
-  // CurrentWallclockMicroseconds().
+  // timeouts which are smaller than 10-15ms.  If we just used
+  // CurrentWallclockMicroseconds(), we'd have the less-granular timer.
   //
   // To make this work, we initialize the clock (g_initial_time) and the
   // counter (initial_ctr).  To compute the initial time, we can check
diff --git a/base/time/time_win.cc b/base/time/time_win.cc
index 1b4dd6f7cc2e7..c2d4e3b3a5362 100644
--- a/base/time/time_win.cc
+++ b/base/time/time_win.cc
@@ -79,7 +79,7 @@ FILETIME MicrosecondsToFileTime(int64_t us) {
 
 int64_t CurrentWallclockMicroseconds() {
   FILETIME ft;
-  ::GetSystemTimePreciseAsFileTime(&ft);
+  ::GetSystemTimeAsFileTime(&ft);
   return FileTimeToMicroseconds(ft);
 }
 
@@ -190,8 +190,8 @@ Time TimeNowIgnoringOverride() {
   }
 
   // We implement time using the high-resolution timers so that we can get
-  // timeouts which likely are smaller than those if we just used
-  // CurrentWallclockMicroseconds().
+  // timeouts which are smaller than 10-15ms.  If we just used
+  // CurrentWallclockMicroseconds(), we'd have the less-granular timer.
   //
   // To make this work, we initialize the clock (g_initial_time) and the
   // counter (initial_ctr).  To compute the initial time, we can check
diff --git a/base/time/time_win_perftest.cc b/base/time/time_win_perftest.cc
deleted file mode 100644
index 24c4e1e28fb42..0000000000000
--- a/base/time/time_win_perftest.cc
+++ /dev/null
@@ -1,142 +0,0 @@
-// Copyright 2024 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-#include "base/time/time.h"
-
-#include <windows.h>
-
-#include <stdint.h>
-
-#include <algorithm>
-#include <cstdio>
-
-#include "base/bit_cast.h"
-#include "base/strings/stringprintf.h"
-#include "testing/gtest/include/gtest/gtest.h"
-#include "testing/perf/perf_result_reporter.h"
-#include "third_party/google_benchmark/src/include/benchmark/benchmark.h"
-
-namespace base {
-namespace {
-
-constexpr char kCountDelta[] = ".count_time_imprecise_precise";
-constexpr char kAvgDelta[] = ".avg_time_precise_imprecise";
-constexpr char kMinDelta[] = ".min_time_precise_imprecise";
-constexpr char kMaxDelta[] = ".max_time_precise_imprecise";
-
-// Copied from base/time_win.cc.
-// From MSDN, FILETIME "Contains a 64-bit value representing the number of
-// 100-nanosecond intervals since January 1, 1601 (UTC)."
-int64_t FileTimeToMicroseconds(const FILETIME& ft) {
-  // Need to bit_cast to fix alignment, then divide by 10 to convert
-  // 100-nanoseconds to microseconds. This only works on little-endian
-  // machines.
-  return bit_cast<int64_t, FILETIME>(ft) / 10;
-}
-
-int64_t CurrentTimePrecise() {
-  FILETIME ft;
-  ::GetSystemTimePreciseAsFileTime(&ft);
-  return FileTimeToMicroseconds(ft);
-}
-
-int64_t CurrentTimeImprecise() {
-  FILETIME ft;
-  ::GetSystemTimeAsFileTime(&ft);
-  return FileTimeToMicroseconds(ft);
-}
-
-}  // namespace
-
-// This test case compares the performances of CurrentWallclockMicroseconds()
-// implemented with using GetSystemTimeAsFileTime() or
-// GetSystemTimePreciseAsFileTime().
-TEST(WinTimePerfTest, Precise) {
-  // The time interval that likely grabs a hardware timer interruption.
-  static constexpr TimeDelta kInterval = Milliseconds(50);
-  // The loop amount of calling the wall clock, it guaranties non zero amount of
-  // time ticks.
-  static constexpr int kLoop = 1000;
-
-  int precise_counter = 0;
-  TimeDelta precise_max_time;
-  TimeDelta precise_min_time = TimeDelta::Max();
-
-  TimeTicks begin = TimeTicks::Now();
-  TimeTicks end = begin + kInterval;
-  for (TimeTicks start = begin; start < end; start = TimeTicks::Now()) {
-    for (int i = 0; i < kLoop; ++i) {
-      int64_t current = CurrentTimePrecise();
-      ::benchmark::DoNotOptimize(current);
-    }
-
-    const TimeDelta delta = TimeTicks::Now() - start;
-    precise_min_time = std::min(precise_min_time, delta);
-    precise_max_time = std::max(precise_max_time, delta);
-    precise_counter += kLoop;
-  }
-  const TimeDelta precise_duration = TimeTicks::Now() - begin;
-
-  int imprecise_counter = 0;
-  TimeDelta imprecise_max_time;
-  TimeDelta imprecise_min_time = TimeDelta::Max();
-
-  begin = TimeTicks::Now();
-  end = begin + kInterval;
-  for (TimeTicks start = begin; start < end; start = TimeTicks::Now()) {
-    for (int i = 0; i < kLoop; ++i) {
-      int64_t current = CurrentTimeImprecise();
-      ::benchmark::DoNotOptimize(current);
-    }
-
-    const TimeDelta delta = TimeTicks::Now() - start;
-    imprecise_min_time = std::min(imprecise_min_time, delta);
-    imprecise_max_time = std::max(imprecise_max_time, delta);
-    imprecise_counter += kLoop;
-  }
-  const TimeDelta imprecise_duration = TimeTicks::Now() - begin;
-
-  ASSERT_GT(precise_counter, 0);
-  ASSERT_GT(imprecise_counter, 0);
-
-  // Format output like in Google Benchmark.
-  std::printf("----------------------------------------------------------\n");
-  std::printf("             Min Time    Avg Time    Max Time   Iterations\n");
-  std::printf("----------------------------------------------------------\n");
-  std::printf("Precise   %8lld ns %8lld ns %8lld ns %12d\n",
-              precise_min_time.InNanoseconds() / kLoop,
-              precise_duration.InNanoseconds() / precise_counter,
-              precise_max_time.InNanoseconds() / kLoop, precise_counter);
-  std::printf("Imprecise %8lld ns %8lld ns %8lld ns %12d\n",
-              imprecise_min_time.InNanoseconds() / kLoop,
-              imprecise_duration.InNanoseconds() / imprecise_counter,
-              imprecise_max_time.InNanoseconds() / kLoop, imprecise_counter);
-
-  // Negative values mean the function ::GetSystemTimePreciseAsFileTime() wins.
-
-  // Count of calls in kInterval (50) ms.
-  const double count_delta = imprecise_counter - precise_counter;
-  const double avg_delta = kInterval.InNanoseconds() / precise_counter -
-                           kInterval.InNanoseconds() / imprecise_counter;
-  const double min_delta =
-      (precise_min_time.InNanoseconds() - imprecise_min_time.InNanoseconds()) /
-      kLoop;
-  const double max_delta =
-      (precise_max_time.InNanoseconds() - imprecise_max_time.InNanoseconds()) /
-      kLoop;
-
-  perf_test::PerfResultReporter reporter("WinTime", "delta");
-  reporter.RegisterFyiMetric(
-      kCountDelta, StringPrintf("/%lldms", kInterval.InMilliseconds()));
-  reporter.RegisterFyiMetric(kAvgDelta, "ns");
-  reporter.RegisterFyiMetric(kMinDelta, "ns");
-  reporter.RegisterFyiMetric(kMaxDelta, "ns");
-
-  reporter.AddResult(kCountDelta, count_delta);
-  reporter.AddResult(kAvgDelta, avg_delta);
-  reporter.AddResult(kMinDelta, min_delta);
-  reporter.AddResult(kMaxDelta, max_delta);
-}
-
-}  // namespace base
