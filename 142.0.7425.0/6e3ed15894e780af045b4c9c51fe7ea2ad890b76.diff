

diff --git a/base/files/file_util_win.cc b/base/files/file_util_win.cc
index 8bb4146cce6c4..3b73661e6c7fb 100644
--- a/base/files/file_util_win.cc
+++ b/base/files/file_util_win.cc
@@ -425,6 +425,40 @@ bool IsPathSafeToSetAclOn(const FilePath& path) {
   return false;
 }
 
+bool PreReadFileSlow(const FilePath& file_path, int64_t max_bytes) {
+  DCHECK_GE(max_bytes, 0);
+
+  File file(file_path, File::FLAG_OPEN | File::FLAG_READ |
+                           File::FLAG_WIN_SEQUENTIAL_SCAN |
+                           File::FLAG_WIN_SHARE_DELETE);
+  if (!file.IsValid())
+    return false;
+
+  constexpr int kBufferSize = 1024 * 1024;
+  // Ensures the buffer is deallocated at function exit.
+  std::unique_ptr<char[]> buffer_deleter(new char[kBufferSize]);
+  char* const buffer = buffer_deleter.get();
+
+  while (max_bytes > 0) {
+    // The static_cast<int> is safe because kBufferSize is int, and both values
+    // are non-negative. So, the minimum is guaranteed to fit in int.
+    const int read_size =
+        static_cast<int>(std::min<int64_t>(max_bytes, kBufferSize));
+    DCHECK_GE(read_size, 0);
+    DCHECK_LE(read_size, kBufferSize);
+
+    const int read_bytes = file.ReadAtCurrentPos(buffer, read_size);
+    if (read_bytes < 0)
+      return false;
+    if (read_bytes == 0)
+      break;
+
+    max_bytes -= read_bytes;
+  }
+
+  return true;
+}
+
 }  // namespace
 
 OnceClosure GetDeleteFileCallback(const FilePath& path,
@@ -1135,9 +1169,8 @@ bool PreReadFile(const FilePath& file_path,
                                         ? MemoryMappedFile::READ_CODE_IMAGE
                                         : MemoryMappedFile::READ_ONLY;
   MemoryMappedFile mapped_file;
-  if (!mapped_file.Initialize(file_path, access)) {
-    return false;
-  }
+  if (!mapped_file.Initialize(file_path, access))
+    return PreReadFileSlow(file_path, max_bytes);
 
   const ::SIZE_T length =
       std::min(base::saturated_cast<::SIZE_T>(max_bytes),
@@ -1147,9 +1180,12 @@ bool PreReadFile(const FilePath& file_path,
   // simple data file read, more from a RAM perspective than CPU. This is
   // because reading the file as data results in double mapping to
   // Image/executable pages for all pages of code executed.
-  return ::PrefetchVirtualMemory(::GetCurrentProcess(),
-                                 /*NumberOfEntries=*/1, &address_range,
-                                 /*Flags=*/0);
+  if (!::PrefetchVirtualMemory(::GetCurrentProcess(),
+                               /*NumberOfEntries=*/1, &address_range,
+                               /*Flags=*/0)) {
+    return PreReadFileSlow(file_path, max_bytes);
+  }
+  return true;
 }
 
 bool PreventExecuteMappingInternal(const FilePath& path, bool skip_path_check) {
