

diff --git a/base/win/win_util.cc b/base/win/win_util.cc
index f70564db998d0..f9d3cec0b5499 100644
--- a/base/win/win_util.cc
+++ b/base/win/win_util.cc
@@ -101,6 +101,33 @@ POWER_PLATFORM_ROLE GetPlatformRole() {
   return PowerDeterminePlatformRoleEx(POWER_PLATFORM_ROLE_V2);
 }
 
+// Because we used to support versions earlier than 8.1, we dynamically load
+// this function from user32.dll, so it won't fail to load in runtime.
+// TODO(https://crbug.com/1408307): Call SetProcessDpiAwareness directly.
+bool SetProcessDpiAwarenessWrapper(PROCESS_DPI_AWARENESS value) {
+  if (!IsUser32AndGdi32Available())
+    return false;
+
+  static const auto set_process_dpi_awareness_func =
+      reinterpret_cast<decltype(&::SetProcessDpiAwareness)>(
+          GetUser32FunctionPointer("SetProcessDpiAwarenessInternal"));
+  if (set_process_dpi_awareness_func) {
+    HRESULT hr = set_process_dpi_awareness_func(value);
+    if (SUCCEEDED(hr))
+      return true;
+    DLOG_IF(ERROR, hr == E_ACCESSDENIED)
+        << "Access denied error from SetProcessDpiAwarenessInternal. "
+           "Function called twice, or manifest was used.";
+    NOTREACHED()
+        << "SetProcessDpiAwarenessInternal failed with unexpected error: "
+        << hr;
+  }
+
+  NOTREACHED() << "SetProcessDpiAwarenessInternal "
+                  "should be available on all platforms >= Windows 8.1";
+  return false;
+}
+
 // Enable V2 per-monitor high-DPI support for the process. This will cause
 // Windows to scale dialogs, comctl32 controls, context menus, and non-client
 // area owned by this process on a per-monitor basis. If per-monitor V2 is not
@@ -687,6 +715,31 @@ void DisableFlicks(HWND hwnd) {
                                      TABLET_DISABLE_FLICKFALLBACKKEYS));
 }
 
+bool IsProcessPerMonitorDpiAware() {
+  enum class PerMonitorDpiAware {
+    UNKNOWN = 0,
+    PER_MONITOR_DPI_UNAWARE,
+    PER_MONITOR_DPI_AWARE,
+  };
+  static PerMonitorDpiAware per_monitor_dpi_aware = PerMonitorDpiAware::UNKNOWN;
+  if (per_monitor_dpi_aware == PerMonitorDpiAware::UNKNOWN) {
+    per_monitor_dpi_aware = PerMonitorDpiAware::PER_MONITOR_DPI_UNAWARE;
+    HMODULE shcore_dll = ::LoadLibrary(L"shcore.dll");
+    if (shcore_dll) {
+      auto get_process_dpi_awareness_func =
+          reinterpret_cast<decltype(::GetProcessDpiAwareness)*>(
+              ::GetProcAddress(shcore_dll, "GetProcessDpiAwareness"));
+      if (get_process_dpi_awareness_func) {
+        PROCESS_DPI_AWARENESS awareness;
+        if (SUCCEEDED(get_process_dpi_awareness_func(nullptr, &awareness)) &&
+            awareness == PROCESS_PER_MONITOR_DPI_AWARE)
+          per_monitor_dpi_aware = PerMonitorDpiAware::PER_MONITOR_DPI_AWARE;
+      }
+    }
+  }
+  return per_monitor_dpi_aware == PerMonitorDpiAware::PER_MONITOR_DPI_AWARE;
+}
+
 void EnableHighDPISupport() {
   if (!IsUser32AndGdi32Available()) {
     return;
@@ -697,7 +750,7 @@ void EnableHighDPISupport() {
 
   // Fall back to per-monitor DPI for older versions of Win10.
   PROCESS_DPI_AWARENESS process_dpi_awareness = PROCESS_PER_MONITOR_DPI_AWARE;
-  if (!::SetProcessDpiAwareness(process_dpi_awareness)) {
+  if (!SetProcessDpiAwarenessWrapper(process_dpi_awareness)) {
     // For windows versions where SetProcessDpiAwareness fails, try its
     // predecessor.
     BOOL result = ::SetProcessDPIAware();
diff --git a/base/win/win_util.h b/base/win/win_util.h
index 032fc0ef34896..d0895c3c4ac45 100644
--- a/base/win/win_util.h
+++ b/base/win/win_util.h
@@ -196,6 +196,9 @@ BASE_EXPORT bool GetLoadedModulesSnapshot(HANDLE process,
 BASE_EXPORT void EnableFlicks(HWND hwnd);
 BASE_EXPORT void DisableFlicks(HWND hwnd);
 
+// Returns true if the process is per monitor DPI aware.
+BASE_EXPORT bool IsProcessPerMonitorDpiAware();
+
 // Enable high-DPI support for the current process.
 BASE_EXPORT void EnableHighDPISupport();
 
diff --git a/ui/display/BUILD.gn b/ui/display/BUILD.gn
index 2dbfeb138a82d..0c28a76bc8f90 100644
--- a/ui/display/BUILD.gn
+++ b/ui/display/BUILD.gn
@@ -129,8 +129,6 @@ component("display") {
       "//components/headless/screen_info",
       "//ui/gfx/mojom:dxgi_info",
     ]
-    libs = [ "shcore.lib" ]
-    ldflags = [ "/DELAYLOAD:shcore.dll" ]
   }
 
   if (use_aura) {
diff --git a/ui/display/win/screen_win.cc b/ui/display/win/screen_win.cc
index bbdd9a1151390..fddcd5928303b 100644
--- a/ui/display/win/screen_win.cc
+++ b/ui/display/win/screen_win.cc
@@ -48,11 +48,20 @@ ScreenWin* g_instance = nullptr;
 
 // Gets the DPI for a particular monitor.
 std::optional<int> GetPerMonitorDPI(HMONITOR monitor) {
+  if (!base::win::IsProcessPerMonitorDpiAware())
+    return std::nullopt;
+
+  static auto get_dpi_for_monitor_func = []() {
+    const HMODULE shcore_dll = ::LoadLibrary(L"shcore.dll");
+    return reinterpret_cast<decltype(&::GetDpiForMonitor)>(
+        shcore_dll ? ::GetProcAddress(shcore_dll, "GetDpiForMonitor")
+                   : nullptr);
+  }();
   UINT dpi_x, dpi_y;
-  if (!SUCCEEDED(
-          ::GetDpiForMonitor(monitor, MDT_EFFECTIVE_DPI, &dpi_x, &dpi_y))) {
+  if (!get_dpi_for_monitor_func ||
+      !SUCCEEDED(
+          get_dpi_for_monitor_func(monitor, MDT_EFFECTIVE_DPI, &dpi_x, &dpi_y)))
     return std::nullopt;
-  }
 
   DCHECK_EQ(dpi_x, dpi_y);
   return static_cast<int>(dpi_x);
@@ -712,13 +721,11 @@ std::optional<bool> ScreenWin::IsWindowOnCurrentVirtualDesktop(
   NOTREACHED();
 }
 
-ScreenWin::ScreenWin(bool initialize_from_system)
-    : per_process_dpi_awareness_disabled_for_testing_(!initialize_from_system) {
+ScreenWin::ScreenWin(bool initialize) {
   CHECK(!g_instance || FallbackScreenWin::IsActive());
   g_instance = this;
-  if (initialize_from_system) {
+  if (initialize)
     Initialize();
-  }
 }
 
 gfx::Point ScreenWin::GetCursorScreenPoint() {
@@ -1003,7 +1010,7 @@ ScreenWinDisplay ScreenWin::GetScreenWinDisplayVia(Getter getter,
 
 int ScreenWin::GetSystemMetricsForScaleFactor(float scale_factor,
                                               int metric) const {
-  if (!PerProcessDPIAwarenessDisabledForTesting()) {
+  if (base::win::IsProcessPerMonitorDpiAware()) {
     static const auto get_system_metrics_for_dpi =
         reinterpret_cast<decltype(&::GetSystemMetricsForDpi)>(
             base::win::GetUser32FunctionPointer("GetSystemMetricsForDpi"));
@@ -1013,7 +1020,7 @@ int ScreenWin::GetSystemMetricsForScaleFactor(float scale_factor,
     }
   }
 
-  // Versions < WIN10_RS1 don't support GetSystemMetricsForDpi, but do support
+  // Windows 8.1 doesn't support GetSystemMetricsForDpi(), yet does support
   // per-process dpi awareness.
   return base::ClampRound(GetSystemMetrics(metric) * scale_factor /
                           GetPrimaryDisplay().device_scale_factor());
@@ -1044,9 +1051,5 @@ void ScreenWin::OnUwpTextScaleFactorCleanup(UwpTextScaleFactor* source) {
   UwpTextScaleFactor::Observer::OnUwpTextScaleFactorCleanup(source);
 }
 
-bool ScreenWin::PerProcessDPIAwarenessDisabledForTesting() const {
-  return per_process_dpi_awareness_disabled_for_testing_;
-}
-
 // static
 void ScreenWin::ResetFallbackScreenForTesting() {
diff --git a/ui/display/win/screen_win.h b/ui/display/win/screen_win.h
index 90a08b08b7446..de95064f4131f 100644
--- a/ui/display/win/screen_win.h
+++ b/ui/display/win/screen_win.h
@@ -184,11 +184,7 @@ class DISPLAY_EXPORT ScreenWin : public Screen,
 
   ScreenWin();
 
-  // `initialize_from_system` is true if the ScreenWin should be initialized
-  // from the Windows desktop environment, e.g., the monitor information and
-  // configuration. It is false in unit tests, true in Chrome and browser
-  // tests.
-  ScreenWin(bool initialize_from_system);
+  ScreenWin(bool initialize);
 
   // Screen:
   gfx::Point GetCursorScreenPoint() override;
@@ -275,12 +271,6 @@ class DISPLAY_EXPORT ScreenWin : public Screen,
   void OnUwpTextScaleFactorChanged() override;
   void OnUwpTextScaleFactorCleanup(UwpTextScaleFactor* source) override;
 
-  // Tests don't want to use the actual DPI settings of the monitor(s) on
-  // the machine running the test.
-  // Returns false if running in unit tests, if the ScreenWin constructor was
-  // called with initialize set to false.
-  bool PerProcessDPIAwarenessDisabledForTesting() const;
-
   // Helper implementing the DisplayObserver handling.
   DisplayChangeNotifier change_notifier_;
 
@@ -306,9 +296,6 @@ class DISPLAY_EXPORT ScreenWin : public Screen,
   base::ScopedObservation<UwpTextScaleFactor, UwpTextScaleFactor::Observer>
       scale_factor_observation_{this};
 
-  // Used to avoid calling GetSystemMetricsForDpi in unit tests.
-  bool per_process_dpi_awareness_disabled_for_testing_ = false;
-
   // Used to track if primary_monitor_ changes, which is used as a signal that
   // screen_win_displays_ needs to be updated. This should be updated when
   // screen_win_displays_ is updated.
diff --git a/ui/views/win/hwnd_message_handler.cc b/ui/views/win/hwnd_message_handler.cc
index 3b4ddec2a7cbf..9aa6789ba2d38 100644
--- a/ui/views/win/hwnd_message_handler.cc
+++ b/ui/views/win/hwnd_message_handler.cc
@@ -1337,7 +1337,8 @@ bool HWNDMessageHandler::IsAXFragmentRootAControlElement() {
 // HWNDMessageHandler, private:
 
 void HWNDMessageHandler::InitExtras() {
-  if (!called_enable_non_client_dpi_scaling_ && delegate_->HasFrame()) {
+  if (!called_enable_non_client_dpi_scaling_ && delegate_->HasFrame() &&
+      base::win::IsProcessPerMonitorDpiAware()) {
     // Derived signature; not available in headers.
     // This call gets Windows to scale the non-client area when
     // WM_DPICHANGED is fired.
@@ -2361,7 +2362,7 @@ LRESULT HWNDMessageHandler::OnNCCalcSize(BOOL mode, LPARAM l_param) {
 
 LRESULT HWNDMessageHandler::OnNCCreate(LPCREATESTRUCT lpCreateStruct) {
   SetMsgHandled(FALSE);
-  if (delegate_->HasFrame()) {
+  if (delegate_->HasFrame() && base::win::IsProcessPerMonitorDpiAware()) {
     using EnableNonClientDpiScalingPtr = decltype(::EnableNonClientDpiScaling)*;
     static const auto enable_non_client_dpi_scaling_func =
         reinterpret_cast<EnableNonClientDpiScalingPtr>(
