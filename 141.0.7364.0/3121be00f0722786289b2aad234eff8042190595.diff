

diff --git a/chrome/browser/webshare/win/show_share_ui_for_window_operation.cc b/chrome/browser/webshare/win/show_share_ui_for_window_operation.cc
index a48308ac47576..e05b26b1a26ef 100644
--- a/chrome/browser/webshare/win/show_share_ui_for_window_operation.cc
+++ b/chrome/browser/webshare/win/show_share_ui_for_window_operation.cc
@@ -9,12 +9,10 @@
 #include <windows.applicationmodel.datatransfer.h>
 #include <wrl/event.h>
 
-#include <utility>
-
 #include "base/functional/callback.h"
 #include "base/task/single_thread_task_runner.h"
 #include "base/win/core_winrt_util.h"
-#include "base/win/scoped_hstring.h"
+#include "base/win/windows_version.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 
@@ -40,8 +37,12 @@ HRESULT GetDataTransferManagerHandles(
     HWND hwnd,
     IDataTransferManagerInterop** data_transfer_manager_interop,
     IDataTransferManager** data_transfer_manager) {
-  // If the required WinRT functionality is not available, fail the operation.
-  if (!base::win::ResolveCoreWinRTDelayload() ||
+  // If the required WinRT functionality is not available, fail the operation
+  // Note: Though the Share APIs are present starting in Windows 8, they are
+  // only fulfilled when invoked from within a UWP app container. Starting in
+  // Windows 10 they are fulfilled for all callers.
+  if ((base::win::GetVersion() < base::win::Version::WIN10) ||
+      !base::win::ResolveCoreWinRTDelayload() ||
       !base::win::ScopedHString::ResolveCoreWinRTStringDelayload()) {
     return E_FAIL;
   }
diff --git a/chrome/installer/util/taskbar_util.cc b/chrome/installer/util/taskbar_util.cc
index 0329447fdd3ad..8f578dc794444 100644
--- a/chrome/installer/util/taskbar_util.cc
+++ b/chrome/installer/util/taskbar_util.cc
@@ -110,9 +110,11 @@ bool UnpinShortcutWithIPinnedList3(const base::FilePath& shortcut) {
 }  // namespace
 
 bool CanPinShortcutToTaskbar() {
-  // "Pin to taskbar" isn't directly supported in Windows 10, but WIN10_RS5 has
+  // "Pin to taskbar" stopped being supported in Windows 10, but WIN10_RS5 has
   // some undocumented interfaces to do pinning.
-  return base::win::GetVersion() >= base::win::Version::WIN10_RS5;
+  const auto version = base::win::GetVersion();
+  return version < base::win::Version::WIN10 ||
+         version >= base::win::Version::WIN10_RS5;
 }
 
 bool PinShortcutToTaskbar(const base::FilePath& shortcut) {
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index f04d94e3a76a2..262f9e1d9d977 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -185,6 +185,7 @@
 #endif  // BUILDFLAG(ENABLE_SPEECH_SERVICE)
 
 #if BUILDFLAG(IS_WIN)
+#include "base/win/windows_version.h"
 #include "chrome/renderer/render_frame_font_family_accessor.h"
 #endif
 
@@ -349,6 +350,12 @@ std::unique_ptr<base::Unwinder> CreateV8Unwinder(v8::Isolate* isolate) {
 
 // Web Share is conditionally enabled here in chrome/, to avoid it
 // being made available in WebView or Linux.
+#if BUILDFLAG(IS_WIN)
+  if (base::win::GetVersion() < base::win::Version::WIN10) {
+    // Web Share API is not functional for non-UWP apps prior to Windows 10.
+    return;
+  }
+#endif
 #if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_WIN) || \
     BUILDFLAG(IS_MAC)
   blink::WebRuntimeFeatures::EnableWebShare(true);
diff --git a/chrome/test/delayload/delayloads_unittest.cc b/chrome/test/delayload/delayloads_unittest.cc
index 1cd12dc43efae..74cd2bca46abf 100644
--- a/chrome/test/delayload/delayloads_unittest.cc
+++ b/chrome/test/delayload/delayloads_unittest.cc
@@ -24,6 +24,7 @@
 #include "base/test/launcher/unit_test_launcher.h"
 #include "base/test/test_suite.h"
 #include "base/win/pe_image.h"
+#include "base/win/windows_version.h"
 #include "build/branding_buildflags.h"
 #include "build/build_config.h"
 #include "chrome/install_static/test/scoped_install_details.h"
@@ -325,8 +326,13 @@ TEST_F(DelayloadsTest, DISABLED_ChromeDllLoadSanityTestImpl) {
   HMODULE chrome_module_handle = ::LoadLibrary(dll.value().c_str());
   ASSERT_TRUE(chrome_module_handle != nullptr);
 
-  // Loading chrome.dll should not load user32.dll on Windows.
-  EXPECT_EQ(nullptr, ::GetModuleHandle(L"user32.dll"));
+  // Loading chrome.dll should not load user32.dll on Win10.
+  // On Win7, chains of system dlls and lack of apisets result in it loading.
+  if (base::win::GetVersion() >= base::win::Version::WIN10) {
+    EXPECT_EQ(nullptr, ::GetModuleHandle(L"user32.dll"));
+  } else {
+    EXPECT_NE(nullptr, ::GetModuleHandle(L"user32.dll"));
+  }
 }
 
 TEST_F(DelayloadsTest, ChromeElfDllDelayloadsCheck) {
